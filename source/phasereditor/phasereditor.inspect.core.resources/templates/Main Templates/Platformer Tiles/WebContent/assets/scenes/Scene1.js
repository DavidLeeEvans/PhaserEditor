// Generated by Phaser Editor v1.2.1

/**
 * Scene1.
 * @param {Phaser.Game} aGame The game.
 * @param {Phaser.Group} aParent The parent group. If not given the game world will be used instead.
 */
function Scene1(aGame, aParent) {
	Phaser.Group.call(this, aGame, aParent);

	/* --- pre-init-begin --- */

	// you can insert code here
	/* --- pre-init-end --- */

	var background = this.game.add.sprite(0, 0, 'background', null, this);

	var ground = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);
	ground.physicsSortDirection = Phaser.Physics.Arcade.LEFT_RIGHT;

	this.game.add.tileSprite(0, -35, 140, 2310, 'objects', 'block', ground);

	this.game.add.tileSprite(140, 1855, 2170, 420, 'objects', 'block', ground);

	this.game.add.tileSprite(3150, -35, 140, 2310, 'objects', 'block', ground);

	var hill_long = this.game.add.sprite(910, 1155, 'objects', 'hill_long', ground);
	hill_long.body.setSize(48.0, 129.12109375, 0.0, 16.87890625);

	var hill_short = this.game.add.sprite(835, 1199, 'objects', 'hill_short', ground);
	hill_short.body.setSize(48.0, 84.7193603515625, 0.0, 17.2806396484375);

	this.game.add.tileSprite(1120, 875, 350, 70, 'objects', 'ground', ground);

	this.game.add.tileSprite(1190, 945, 210, 70, 'objects', 'ground_dirt', ground);

	this.game.add.sprite(1260, 1015, 'objects', 'ground_dirt', ground);

	this.game.add.tileSprite(1960, 595, 210, 70, 'objects', 'ground_dirt', ground);

	var hill_short1 = this.game.add.sprite(1392, 1758, 'objects', 'hill_short', ground);
	hill_short1.body.setSize(48.0, 85.12109375, 0.0, 16.87890625);

	var hill_long1 = this.game.add.sprite(1330, 1715, 'objects', 'hill_long', ground);
	hill_long1.body.setSize(48.0, 131.532470703125, 0.0, 14.467529296875);

	this.game.add.tileSprite(1890, 525, 350, 70, 'objects', 'ground', ground);

	this.game.add.sprite(2030, 665, 'objects', 'ground_dirt', ground);

	this.game.add.tileSprite(2310, 1995, 840, 280, 'objects', 'block', ground);

	this.game.add.tileSprite(140, 1295, 2240, 70, 'objects', 'ground', ground);

	this.game.add.tileSprite(1785, 1750, 284, 24, 'objects', 'bridge', ground);

	this.game.add.tileSprite(140, 1715, 70, 140, 'objects', 'crate', ground);

	this.game.add.tileSprite(140, 1365, 2170, 140, 'objects', 'block', this);

	this.game.add.tileSprite(1889, 501, 350, 26, 'objects', 'bush', this);

	this.game.add.tileSprite(1155, 840, 280, 40, 'objects', 'grass', this);

	this.game.add.sprite(2099, 493, 'objects', 'shroom', this);

	this.game.add.tileSprite(140, 1855, 2170, 70, 'objects', 'ground', this);

	var lockYellow = this.game.add.sprite(140, 1505, 'objects', 'lock_yellow', this);
	this.game.physics.arcade.enable(lockYellow);
	lockYellow.body.immovable = true;
	lockYellow.body.allowGravity = false;

	this.game.add.sprite(455, 1820, 'objects', 'grass', this);

	this.game.add.sprite(805, 1820, 'objects', 'grass', this);

	this.game.add.sprite(1575, 1820, 'objects', 'grass', this);

	this.game.add.sprite(1995, 1260, 'objects', 'grass', this);

	var coins = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	this.game.add.sprite(350, 1225, 'objects', 'coin_gold', coins);

	this.game.add.sprite(420, 1225, 'objects', 'coin_gold', coins);

	this.game.add.sprite(490, 1225, 'objects', 'coin_gold', coins);

	this.game.add.sprite(560, 1225, 'objects', 'coin_gold', coins);

	this.game.add.sprite(910, 980, 'objects', 'coin_gold', coins);

	this.game.add.sprite(840, 1050, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1890, 420, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2030, 420, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2170, 420, 'objects', 'coin_gold', coins);

	this.game.add.sprite(525, 1715, 'objects', 'coin_gold', coins);

	this.game.add.sprite(595, 1715, 'objects', 'coin_gold', coins);

	this.game.add.sprite(665, 1715, 'objects', 'coin_gold', coins);

	this.game.add.sprite(735, 1715, 'objects', 'coin_gold', coins);

	this.game.add.sprite(805, 1715, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1960, 420, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2100, 420, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1138, 761, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1270, 699, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1207, 740, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1321, 642, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1134, 691, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1253, 625, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1199, 667, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1296, 565, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1594, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1664, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1734, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1804, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1874, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1944, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1855, 1610, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1855, 1540, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1855, 1680, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1960, 1540, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1960, 1610, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1960, 1680, 'objects', 'coin_gold', coins);

	this.game.add.sprite(315, 805, 'objects', 'coin_gold', coins);

	this.game.add.sprite(315, 875, 'objects', 'coin_gold', coins);

	this.game.add.sprite(315, 945, 'objects', 'coin_gold', coins);

	this.game.add.sprite(315, 1015, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2014, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2084, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1524, 1120, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2014, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(2084, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1524, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1594, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1664, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1734, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1804, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1874, 1190, 'objects', 'coin_gold', coins);

	this.game.add.sprite(1944, 1190, 'objects', 'coin_gold', coins);

	var movingPlatforms = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	var bridge = this.game.add.sprite(1016, 1200, 'objects', 'cloud_2', movingPlatforms);
	bridge.body.setSize(122.63885498046875, 26.8017578125, 1.92901611328125, 34.5177001953125);
	bridge.body.checkCollision.down = false;
	bridge.data = {
		 top : 900,
		 bottom : 1200,
		 velocity_y : -100
		};

	var cloud2 = this.game.add.sprite(1500, 737, 'objects', 'cloud_1', movingPlatforms);
	cloud2.body.setSize(122.7308349609375, 27.0, 2.4112548828125, 36.0);
	cloud2.body.checkCollision.down = false;
	cloud2.data = {
		 left : cloud2.x,
		 top : cloud2.y - 300,
		 right : cloud2.x + 300,
		 bottom: cloud2.y, 
		 velocity_y : -100,
		 velocity_x : 100
		};

	this.game.add.sprite(1241, 842, 'objects', 'shroom', this);

	var keyYellow = this.game.add.sprite(2170, 315, 'objects', 'key_yellow', this);
	this.game.physics.arcade.enable(keyYellow);
	keyYellow.body.immovable = true;
	keyYellow.body.allowGravity = false;

	var player = this.game.add.sprite(332, 665, 'character', 'walk_10', this);
	player.anchor.setTo(0.5, 0.0);
	player.animations.add('walk', ['walk_01', 'walk_02', 'walk_03', 'walk_04', 'walk_05', 'walk_06', 'walk_07', 'walk_08', 'walk_09', 'walk_10', 'walk_11'], 20, true);
	player.animations.add('jump', ['jump'], 60, false);
	player.animations.add('die', ['jump'], 60, false);
	player.animations.add('stay', ['side'], 60, false);
	this.game.physics.arcade.enable(player);
	player.body.setSize(70.0, 92.6739501953125);
	player.body.collideWorldBounds = true;

	this.game.add.sprite(651, 1235, 'objects', 'fence_broken', this);

	this.game.add.sprite(722, 1235, 'objects', 'fence', this);

	var water = this.game.add.group(this);

	var water0 = this.game.add.tileSprite(2380, 1364, 493, 45, 'objects', 'water', water);
	water0.angle = 90.0;

	var water02 = this.game.add.tileSprite(2325, 1365, 493, 40, 'objects', 'water', water);
	water02.angle = 90.0;
	water02.scale.setTo(1.0, -1.0);
	water02.anchor.setTo(0.0, 0.5);

	var water2 = this.game.add.tileSprite(2310, 1850, 840, 45, 'objects', 'water', water);
	water2.tileScale.setTo(2.0, 1.0);

	var water21 = this.game.add.tileSprite(2310, 1880, 840, 45, 'objects', 'water', water);
	water21.tileScale.setTo(2.0, 1.0);

	var water212 = this.game.add.tileSprite(2310, 1910, 840, 45, 'objects', 'water', water);
	water212.tileScale.setTo(2.0, 1.0);

	var water213 = this.game.add.tileSprite(2310, 1940, 840, 45, 'objects', 'water', water);
	water213.tileScale.setTo(2.0, 1.0);

	var water211 = this.game.add.tileSprite(2310, 1970, 840, 45, 'objects', 'water', water);
	water211.tileScale.setTo(2.0, 1.0);

	this.game.add.tileSprite(2310, 1996, 840, 70, 'objects', 'ground_sand', this);

	var flyEnemies = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	var fly1 = this.game.add.sprite(1913, 344, 'enemies', 'fly_normal', flyEnemies);
	fly1.anchor.setTo(0.5, 0.0);
	fly1.animations.add('fly', ['fly_normal', 'fly_fly'], 6, true);
	fly1.body.immovable = true;
	fly1.body.allowGravity = false;
	fly1.data = {
		 left: fly1.x,
		 right : fly1.x + 300,
		 velocity_x : -150,
		 face_x : -1
		};

	var fly3 = this.game.add.sprite(2170, 455, 'enemies', 'fly_normal', flyEnemies);
	fly3.anchor.setTo(0.5, 0.0);
	fly3.tint = 0x00ffff;
	fly3.animations.add('fly', ['fly_normal', 'fly_fly'], 6, true);
	fly3.body.immovable = true;
	fly3.body.allowGravity = false;
	fly3.data = {
		 left: fly3.x - 300,
		 right : fly3.x,
		 velocity_x : -50,
		 face_x : -1
		};

	var fly21 = this.game.add.sprite(665, 1645, 'enemies', 'fly_normal', flyEnemies);
	fly21.anchor.setTo(0.5, 0.0);
	fly21.animations.add('fly', ['fly_fly', 'fly_normal'], 5, true);
	fly21.body.immovable = true;
	fly21.body.allowGravity = false;
	fly21.data = {
		 left: fly21.x,
		 right : fly21.x + 300,
		 velocity_x : -150,
		 face_x : -1
		};

	var fly22 = this.game.add.sprite(1015, 1715, 'enemies', 'fly_normal', flyEnemies);
	fly22.anchor.setTo(0.5, 0.0);
	fly22.animations.add('fly', ['fly_fly', 'fly_normal'], 5, true);
	fly22.body.immovable = true;
	fly22.body.allowGravity = false;
	fly22.data = {
		 left: fly22.x,
		 right : fly22.x + 300,
		 velocity_x : 150,
		 face_x : -1
		};

	var fly23 = this.game.add.sprite(1645, 1610, 'enemies', 'fly_normal', flyEnemies);
	fly23.anchor.setTo(0.5, 0.0);
	fly23.animations.add('fly', ['fly_fly', 'fly_normal'], 5, true);
	fly23.body.immovable = true;
	fly23.body.allowGravity = false;
	fly23.data = {
		 left: fly23.x,
		 right : fly23.x + 500,
		 velocity_x : -250,
		 face_x : -1
		};

	var fly2 = this.game.add.sprite(315, 1785, 'enemies', 'fly_normal', flyEnemies);
	fly2.anchor.setTo(0.5, 0.0);
	fly2.tint = 0xff80c0;
	fly2.animations.add('fly', ['fly_fly', 'fly_normal'], 5, true);
	fly2.body.immovable = true;
	fly2.body.allowGravity = false;
	fly2.data = {
		 left: fly2.x,
		 right : fly2.x + 300,
		 velocity_x : -50,
		 face_x : -1
		};

	var spikes = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	this.game.add.tileSprite(875, 1820, 70, 35, 'objects', 'spikes', spikes);

	this.game.add.tileSprite(1505, 1260, 630, 35, 'objects', 'spikes', spikes);

	this.game.add.tileSprite(490, 1820, 70, 35, 'objects', 'spikes', spikes);

	this.game.add.tileSprite(1785, 1820, 280, 35, 'objects', 'spikes', spikes);

	 // public fields

	this.fBackground = background;
	this.fGround = ground;
	this.fLockYellow = lockYellow;
	this.fCoins = coins;
	this.fMovingPlatforms = movingPlatforms;
	this.fKeyYellow = keyYellow;
	this.fPlayer = player;
	this.fWater = water;
	this.fFlyEnemies = flyEnemies;
	this.fSpikes = spikes;

	/* --- post-init-begin --- */

	// init background
	this.fBackground.fixedToCamera = true;

	// init water

	var i;
	for (i = 0; i < this.fWater.length; i += 1) {
		/** @type Phaser.TileSprite */
		var sprite = this.fWater.getAt(i);
		sprite.tilePosition.x = i * 50;
	}

	// init enemies

	flyEnemies.forEach(function(fly) {
		fly.play("fly");
	});

	/* --- post-init-end --- */
}

/** @type Phaser.Group */
var Scene1_proto = Object.create(Phaser.Group.prototype);
Scene1.prototype = Scene1_proto;
Scene1.prototype.constructor = Phaser.Group;

/* --- end generated code --- */

Scene1.prototype.update = function() {
	var i;
	for (i = 0; i < this.fWater.length; i += 1) {
		/** @type Phaser.TileSprite */
		var sprite = this.fWater.getAt(i);
		sprite.tilePosition.x += i % 2 == 0 ? 1 : -1;
	}
};

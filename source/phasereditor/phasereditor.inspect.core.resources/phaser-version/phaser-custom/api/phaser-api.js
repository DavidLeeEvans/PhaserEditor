// Phaser API v2.5.0 
// Generated by Phaser Editor

var PIXI_SpriteBatch = function (texture) {};
PIXI_SpriteBatch.prototype = new Object();

var PIXI_GraphicsData = function (lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape) {};
PIXI_GraphicsData.prototype = new Object();

var PIXI_AbstractFilter = function (fragmentSrc, uniforms) {};
PIXI_AbstractFilter.prototype = new Object();
PIXI_AbstractFilter.dirty = true;
PIXI_AbstractFilter.padding = 0;

var Phaser_Rectangle = function (x, y, width, height) {};
Phaser_Rectangle.prototype = new Object();
Phaser_Rectangle.centerY = 0;
Phaser_Rectangle.centerX = 0;
Phaser_Rectangle.type = 0;
Phaser_Rectangle.empty = true;
Phaser_Rectangle.halfWidth = 0;
Phaser_Rectangle.height = 0;
Phaser_Rectangle.halfHeight = 0;
Phaser_Rectangle.bottom = 0;
Phaser_Rectangle.volume = 0;
Phaser_Rectangle.left = 0;
Phaser_Rectangle.perimeter = 0;
Phaser_Rectangle.randomX = 0;
Phaser_Rectangle.randomY = 0;
Phaser_Rectangle.bottomRight = new Phaser_Point();
Phaser_Rectangle.top = 0;
Phaser_Rectangle.bottomLeft = new Phaser_Point();
Phaser_Rectangle.topRight = new Phaser_Point();
Phaser_Rectangle.right = 0;
Phaser_Rectangle.topLeft = new Phaser_Point();
Phaser_Rectangle.x = 0;
Phaser_Rectangle.width = 0;
Phaser_Rectangle.y = 0;
Phaser_Rectangle.ceilAll = function () {};
Phaser_Rectangle.offsetPoint = function (point) { return new Phaser_Rectangle(); };
Phaser_Rectangle.copyTo = function (source) { return new Object(); };
Phaser_Rectangle.inflatePoint = function (a, point) { return new Phaser_Rectangle(); };
Phaser_Rectangle.intersection = function (b, out) { return new Phaser_Rectangle(); };
Phaser_Rectangle.getPoint = function (position, out) { return new Phaser_Point(); };
Phaser_Rectangle.offset = function (dx, dy) { return new Phaser_Rectangle(); };
Phaser_Rectangle.centerOn = function (x, y) { return new Phaser_Rectangle(); };
Phaser_Rectangle.ceil = function () {};
Phaser_Rectangle.contains = function (x, y) { return new Boolean(); };
Phaser_Rectangle.size = function (output) { return new Phaser_Point(); };
Phaser_Rectangle.intersects = function (b) { return new Boolean(); };
Phaser_Rectangle.scale = function (x, y) { return new Phaser_Rectangle(); };
Phaser_Rectangle.aabb = function (points, out) { return new Phaser_Rectangle(); };
Phaser_Rectangle.random = function (out) { return new Phaser_Point(); };
Phaser_Rectangle.floor = function () {};
Phaser_Rectangle.floorAll = function () {};
Phaser_Rectangle.union = function (b, out) { return new Phaser_Rectangle(); };
Phaser_Rectangle.copyFrom = function (source) { return new Phaser_Rectangle(); };
Phaser_Rectangle.containsRaw = function (rx, ry, rw, rh, x, y) { return new Boolean(); };
Phaser_Rectangle.inflate = function (dx, dy) { return new Phaser_Rectangle(); };
Phaser_Rectangle.equals = function (b) { return new Boolean(); };
Phaser_Rectangle.clone = function (output) { return new Phaser_Rectangle(); };
Phaser_Rectangle.setTo = function (x, y, width, height) { return new Phaser_Rectangle(); };
Phaser_Rectangle.resize = function (width, height) { return new Phaser_Rectangle(); };
Phaser_Rectangle.toString = function () { return new String(); };
Phaser_Rectangle.sameDimensions = function (a, b) { return new Boolean(); };
Phaser_Rectangle.containsPoint = function (a, point) { return new Boolean(); };
Phaser_Rectangle.containsRect = function (b) { return new Boolean(); };
Phaser_Rectangle.intersectsRaw = function (left, right, top, bottom, tolerance) { return new Boolean(); };

var Phaser_Ellipse = function (x, y, width, height) {};
Phaser_Ellipse.prototype = new Object();
Phaser_Ellipse.bottom = 0;
Phaser_Ellipse.right = 0;
Phaser_Ellipse.type = 0;
Phaser_Ellipse.empty = true;
Phaser_Ellipse.top = 0;
Phaser_Ellipse.left = new Object();
Phaser_Ellipse.x = 0;
Phaser_Ellipse.width = 0;
Phaser_Ellipse.y = 0;
Phaser_Ellipse.height = 0;
Phaser_Ellipse.getBounds = function () { return new Phaser_Rectangle(); };
Phaser_Ellipse.copyFrom = function (source) { return new Phaser_Ellipse(); };
Phaser_Ellipse.copyTo = function (dest) { return new Object(); };
Phaser_Ellipse.random = function (out) { return new Phaser_Point(); };
Phaser_Ellipse.contains = function (x, y) { return new Boolean(); };
Phaser_Ellipse.clone = function (output) { return new Phaser_Ellipse(); };
Phaser_Ellipse.setTo = function (x, y, width, height) { return new Phaser_Ellipse(); };
Phaser_Ellipse.toString = function () { return new String(); };

var Phaser_Polygon = function (points) {};
Phaser_Polygon.prototype = new Object();
Phaser_Polygon.area = 0;
Phaser_Polygon.flattened = true;
Phaser_Polygon.closed = true;
Phaser_Polygon.type = 0;
Phaser_Polygon.points = new Array();
Phaser_Polygon.flatten = function () { return new Phaser_Polygon(); };
Phaser_Polygon.contains = function (x, y) { return new Boolean(); };
Phaser_Polygon.toNumberArray = function (output) { return new Array(); };
Phaser_Polygon.clone = function (output) { return new Phaser_Polygon(); };
Phaser_Polygon.setTo = function (points) { return new Phaser_Polygon(); };

var Phaser_Circle = function (x, y, diameter) {};
Phaser_Circle.prototype = new Object();
Phaser_Circle.type = 0;
Phaser_Circle.empty = true;
Phaser_Circle.diameter = 0;
Phaser_Circle.top = 0;
Phaser_Circle.radius = 0;
Phaser_Circle.area = 0;
Phaser_Circle.bottom = 0;
Phaser_Circle.right = 0;
Phaser_Circle.left = new Object();
Phaser_Circle.x = 0;
Phaser_Circle.y = 0;
Phaser_Circle.circumferencePoint = function (angle, asDegrees, out) { return new Phaser_Point(); };
Phaser_Circle.distance = function (dest, round) { return new Number(); };
Phaser_Circle.intersects = function (a, b) { return new Boolean(); };
Phaser_Circle.offsetPoint = function (point) { return new Phaser_Circle(); };
Phaser_Circle.getBounds = function () { return new Phaser_Rectangle(); };
Phaser_Circle.copyTo = function (dest) { return new Object(); };
Phaser_Circle.random = function (out) { return new Phaser_Point(); };
Phaser_Circle.intersectsRectangle = function (c, r) { return new Boolean(); };
Phaser_Circle.offset = function (dx, dy) { return new Phaser_Circle(); };
Phaser_Circle.copyFrom = function (source) { return new Phaser_Circle(); };
Phaser_Circle.contains = function (x, y) { return new Boolean(); };
Phaser_Circle.circumference = function () { return new Number(); };
Phaser_Circle.equals = function (a, b) { return new Boolean(); };
Phaser_Circle.clone = function (output) { return new Phaser_Circle(); };
Phaser_Circle.setTo = function (x, y, diameter) { return new Phaser_Circle(); };
Phaser_Circle.toString = function () { return new String(); };

var PIXI_DisplayObjectContainer = function () {};
PIXI_DisplayObjectContainer.prototype = new PIXI.DisplayObject();
PIXI_DisplayObjectContainer.worldRotation = 0;
PIXI_DisplayObjectContainer.filterArea = new PIXI_Rectangle();
PIXI_DisplayObjectContainer.parent = new PIXI_DisplayObjectContainer();
PIXI_DisplayObjectContainer.renderable = true;
PIXI_DisplayObjectContainer.worldScale = new PIXI_Point();
PIXI_DisplayObjectContainer.scale = new PIXI_Point();
PIXI_DisplayObjectContainer.worldAlpha = 0;
PIXI_DisplayObjectContainer.worldVisible = true;
PIXI_DisplayObjectContainer.children = [new PIXI_DisplayObject()];
PIXI_DisplayObjectContainer.alpha = 0;
PIXI_DisplayObjectContainer.pivot = new PIXI_Point();
PIXI_DisplayObjectContainer.worldTransform = new PIXI_Matrix();
PIXI_DisplayObjectContainer.cacheAsBitmap = true;
PIXI_DisplayObjectContainer.mask = new PIXI_Graphics();
PIXI_DisplayObjectContainer.visible = true;
PIXI_DisplayObjectContainer.rotation = 0;
PIXI_DisplayObjectContainer.filters = new Array();
PIXI_DisplayObjectContainer.ignoreChildInput = true;
PIXI_DisplayObjectContainer.worldPosition = new PIXI_Point();
PIXI_DisplayObjectContainer.stage = new PIXI_Stage();
PIXI_DisplayObjectContainer.hitArea = new Phaser_Rectangle();
PIXI_DisplayObjectContainer.x = 0;
PIXI_DisplayObjectContainer.y = 0;
PIXI_DisplayObjectContainer.position = new PIXI_Point();
PIXI_DisplayObjectContainer.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
PIXI_DisplayObjectContainer.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
PIXI_DisplayObjectContainer.updateCache = function () { return new PIXI_DisplayObject(); };
PIXI_DisplayObjectContainer.toGlobal = function (position) { return new PIXI_Point(); };
PIXI_DisplayObjectContainer.destroy = function () {};
PIXI_DisplayObjectContainer.toLocal = function (position, from) { return new PIXI_Point(); };
PIXI_DisplayObjectContainer.preUpdate = function () {};

var PIXI_DisplayObject = function () {};
PIXI_DisplayObject.prototype = new Object();
PIXI_DisplayObject.worldRotation = 0;
PIXI_DisplayObject.filterArea = new PIXI_Rectangle();
PIXI_DisplayObject.parent = new PIXI_DisplayObjectContainer();
PIXI_DisplayObject.renderable = true;
PIXI_DisplayObject.worldScale = new PIXI_Point();
PIXI_DisplayObject.scale = new PIXI_Point();
PIXI_DisplayObject.worldAlpha = 0;
PIXI_DisplayObject.worldVisible = true;
PIXI_DisplayObject.alpha = 0;
PIXI_DisplayObject.pivot = new PIXI_Point();
PIXI_DisplayObject.worldTransform = new PIXI_Matrix();
PIXI_DisplayObject.cacheAsBitmap = true;
PIXI_DisplayObject.mask = new PIXI_Graphics();
PIXI_DisplayObject.visible = true;
PIXI_DisplayObject.rotation = 0;
PIXI_DisplayObject.filters = new Array();
PIXI_DisplayObject.worldPosition = new PIXI_Point();
PIXI_DisplayObject.stage = new PIXI_Stage();
PIXI_DisplayObject.hitArea = new Phaser_Rectangle();
PIXI_DisplayObject.x = 0;
PIXI_DisplayObject.y = 0;
PIXI_DisplayObject.position = new PIXI_Point();
PIXI_DisplayObject.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
PIXI_DisplayObject.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
PIXI_DisplayObject.updateCache = function () { return new PIXI_DisplayObject(); };
PIXI_DisplayObject.toGlobal = function (position) { return new PIXI_Point(); };
PIXI_DisplayObject.destroy = function () {};
PIXI_DisplayObject.toLocal = function (position, from) { return new PIXI_Point(); };
PIXI_DisplayObject.preUpdate = function () {};

var PIXI_Strip = function (texture, width, height) {};
PIXI_Strip.prototype = new PIXI.DisplayObjectContainer();
PIXI_Strip.worldRotation = 0;
PIXI_Strip.filterArea = new PIXI_Rectangle();
PIXI_Strip.canvasPadding = 0;
PIXI_Strip.parent = new PIXI_DisplayObjectContainer();
PIXI_Strip.renderable = true;
PIXI_Strip.worldScale = new PIXI_Point();
PIXI_Strip.scale = new PIXI_Point();
PIXI_Strip.worldAlpha = 0;
PIXI_Strip.worldVisible = true;
PIXI_Strip.children = [new PIXI_DisplayObject()];
PIXI_Strip.alpha = 0;
PIXI_Strip.pivot = new PIXI_Point();
PIXI_Strip.worldTransform = new PIXI_Matrix();
PIXI_Strip.cacheAsBitmap = true;
PIXI_Strip.DrawModes = new Object();
PIXI_Strip.mask = new PIXI_Graphics();
PIXI_Strip.dirty = true;
PIXI_Strip.visible = true;
PIXI_Strip.texture = new Texture();
PIXI_Strip.rotation = 0;
PIXI_Strip.filters = new Array();
PIXI_Strip.ignoreChildInput = true;
PIXI_Strip.worldPosition = new PIXI_Point();
PIXI_Strip.stage = new PIXI_Stage();
PIXI_Strip.blendMode = 0;
PIXI_Strip.hitArea = new Phaser_Rectangle();
PIXI_Strip.x = 0;
PIXI_Strip.y = 0;
PIXI_Strip.position = new PIXI_Point();
PIXI_Strip.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
PIXI_Strip.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
PIXI_Strip.updateCache = function () { return new PIXI_DisplayObject(); };
PIXI_Strip.toGlobal = function (position) { return new PIXI_Point(); };
PIXI_Strip.destroy = function () {};
PIXI_Strip.toLocal = function (position, from) { return new PIXI_Point(); };
PIXI_Strip.preUpdate = function () {};

var PIXI_Rope = function (texture, points) {};
PIXI_Rope.prototype = new PIXI.Strip();
PIXI_Rope.worldRotation = 0;
PIXI_Rope.filterArea = new PIXI_Rectangle();
PIXI_Rope.canvasPadding = 0;
PIXI_Rope.parent = new PIXI_DisplayObjectContainer();
PIXI_Rope.renderable = true;
PIXI_Rope.worldScale = new PIXI_Point();
PIXI_Rope.scale = new PIXI_Point();
PIXI_Rope.worldAlpha = 0;
PIXI_Rope.worldVisible = true;
PIXI_Rope.children = [new PIXI_DisplayObject()];
PIXI_Rope.alpha = 0;
PIXI_Rope.pivot = new PIXI_Point();
PIXI_Rope.worldTransform = new PIXI_Matrix();
PIXI_Rope.cacheAsBitmap = true;
PIXI_Rope.DrawModes = new Object();
PIXI_Rope.mask = new PIXI_Graphics();
PIXI_Rope.dirty = true;
PIXI_Rope.visible = true;
PIXI_Rope.texture = new Texture();
PIXI_Rope.rotation = 0;
PIXI_Rope.filters = new Array();
PIXI_Rope.ignoreChildInput = true;
PIXI_Rope.worldPosition = new PIXI_Point();
PIXI_Rope.stage = new PIXI_Stage();
PIXI_Rope.blendMode = 0;
PIXI_Rope.hitArea = new Phaser_Rectangle();
PIXI_Rope.x = 0;
PIXI_Rope.y = 0;
PIXI_Rope.position = new PIXI_Point();
PIXI_Rope.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
PIXI_Rope.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
PIXI_Rope.updateCache = function () { return new PIXI_DisplayObject(); };
PIXI_Rope.toGlobal = function (position) { return new PIXI_Point(); };
PIXI_Rope.destroy = function () {};
PIXI_Rope.toLocal = function (position, from) { return new PIXI_Point(); };
PIXI_Rope.preUpdate = function () {};

var Phaser_Point = function (x, y) {};
Phaser_Point.prototype = new Object();
Phaser_Point.type = 0;
Phaser_Point.x = 0;
Phaser_Point.y = 0;
Phaser_Point.rotate = function (x, y, angle, asDegrees, distance) { return new Phaser_Point(); };
Phaser_Point.distance = function (dest, round) { return new Number(); };
Phaser_Point.setMagnitude = function (magnitude) { return new Phaser_Point(); };
Phaser_Point.projectUnit = function (a, b, out) { return new Phaser_Point(); };
Phaser_Point.perp = function () { return new Phaser_Point(); };
Phaser_Point.dot = function (a) { return new Number(); };
Phaser_Point.project = function (a, b, out) { return new Phaser_Point(); };
Phaser_Point.getMagnitudeSq = function () { return new Number(); };
Phaser_Point.copyTo = function (dest) { return new Object(); };
Phaser_Point.negative = function (a, out) { return new Phaser_Point(); };
Phaser_Point.multiplyAdd = function (a, b, s, out) { return new Phaser_Point(); };
Phaser_Point.normalize = function () { return new Phaser_Point(); };
Phaser_Point.angle = function (a, asDegrees) { return new Number(); };
Phaser_Point.isZero = function () { return new Boolean(); };
Phaser_Point.divide = function (x, y) { return new Phaser_Point(); };
Phaser_Point.multiply = function (x, y) { return new Phaser_Point(); };
Phaser_Point.floor = function () { return new Phaser_Point(); };
Phaser_Point.clamp = function (min, max) { return new Phaser_Point(); };
Phaser_Point.rperp = function () { return new Phaser_Point(); };
Phaser_Point.add = function (x, y) { return new Phaser_Point(); };
Phaser_Point.set = function (x, y) { return new Phaser_Point(); };
Phaser_Point.invert = function () { return new Phaser_Point(); };
Phaser_Point.subtract = function (x, y) { return new Phaser_Point(); };
Phaser_Point.cross = function (a) { return new Number(); };
Phaser_Point.interpolate = function (a, b, f, out) { return new Phaser_Point(); };
Phaser_Point.ceil = function () { return new Phaser_Point(); };
Phaser_Point.parse = function (obj, xProp, yProp) { return new Phaser_Point(); };
Phaser_Point.getMagnitude = function () { return new Number(); };
Phaser_Point.copyFrom = function (source) { return new Phaser_Point(); };
Phaser_Point.clampY = function (min, max) { return new Phaser_Point(); };
Phaser_Point.clampX = function (min, max) { return new Phaser_Point(); };
Phaser_Point.normalRightHand = function () { return new Phaser_Point(); };
Phaser_Point.centroid = function (points, out) { return new Phaser_Point(); };
Phaser_Point.equals = function (a) { return new Boolean(); };
Phaser_Point.clone = function (output) { return new Phaser_Point(); };
Phaser_Point.setTo = function (x, y) { return new Phaser_Point(); };
Phaser_Point.toString = function () { return new String(); };

var Phaser_Canvas = function () {};
Phaser_Canvas.prototype = new Object();
Phaser_Canvas.removeFromDOM = function (canvas) {};
Phaser_Canvas.setBackgroundColor = function (canvas, color) { return new HTMLCanvasElement(); };
Phaser_Canvas.setTransform = function (context, translateX, translateY, scaleX, scaleY, skewX, skewY) { return new CanvasRenderingContext2D(); };
Phaser_Canvas.getSmoothingEnabled = function (context) { return new Boolean(); };
Phaser_Canvas.create = function (parent, width, height, id, skipPool) { return new HTMLCanvasElement(); };
Phaser_Canvas.setImageRenderingCrisp = function (canvas) { return new HTMLCanvasElement(); };
Phaser_Canvas.setUserSelect = function (canvas, value) { return new HTMLCanvasElement(); };
Phaser_Canvas.getSmoothingPrefix = function (context) { return new String(); };
Phaser_Canvas.addToDOM = function (canvas, parent, overflowHidden) { return new HTMLCanvasElement(); };
Phaser_Canvas.setSmoothingEnabled = function (context, value) { return new CanvasRenderingContext2D(); };
Phaser_Canvas.setImageRenderingBicubic = function (canvas) { return new HTMLCanvasElement(); };
Phaser_Canvas.setTouchAction = function (canvas, value) { return new HTMLCanvasElement(); };

var PIXI_Sprite = function (texture) {};
PIXI_Sprite.prototype = new PIXI.DisplayObjectContainer();
PIXI_Sprite.worldRotation = 0;
PIXI_Sprite.filterArea = new PIXI_Rectangle();
PIXI_Sprite.shader = new PIXI_AbstractFilter();
PIXI_Sprite.parent = new PIXI_DisplayObjectContainer();
PIXI_Sprite.renderable = true;
PIXI_Sprite.worldScale = new PIXI_Point();
PIXI_Sprite.scale = new PIXI_Point();
PIXI_Sprite.tint = 0;
PIXI_Sprite.worldAlpha = 0;
PIXI_Sprite.worldVisible = true;
PIXI_Sprite.tintedTexture = new Phaser_Canvas();
PIXI_Sprite.children = [new PIXI_DisplayObject()];
PIXI_Sprite.alpha = 0;
PIXI_Sprite.pivot = new PIXI_Point();
PIXI_Sprite.worldTransform = new PIXI_Matrix();
PIXI_Sprite.cacheAsBitmap = true;
PIXI_Sprite.mask = new PIXI_Graphics();
PIXI_Sprite.visible = true;
PIXI_Sprite.texture = new Texture();
PIXI_Sprite.rotation = 0;
PIXI_Sprite.filters = new Array();
PIXI_Sprite.ignoreChildInput = true;
PIXI_Sprite.worldPosition = new PIXI_Point();
PIXI_Sprite.stage = new PIXI_Stage();
PIXI_Sprite.blendMode = 0;
PIXI_Sprite.hitArea = new Phaser_Rectangle();
PIXI_Sprite.anchor = new Phaser_Point();
PIXI_Sprite.x = 0;
PIXI_Sprite.exists = true;
PIXI_Sprite.y = 0;
PIXI_Sprite.position = new PIXI_Point();
PIXI_Sprite.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
PIXI_Sprite.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
PIXI_Sprite.updateCache = function () { return new PIXI_DisplayObject(); };
PIXI_Sprite.toGlobal = function (position) { return new PIXI_Point(); };
PIXI_Sprite.destroy = function () {};
PIXI_Sprite.toLocal = function (position, from) { return new PIXI_Point(); };
PIXI_Sprite.preUpdate = function () {};

var PIXI_TilingSprite = function (texture, width, height) {};
PIXI_TilingSprite.prototype = new PIXI.Sprite();
PIXI_TilingSprite.worldRotation = 0;
PIXI_TilingSprite.filterArea = new PIXI_Rectangle();
PIXI_TilingSprite.shader = new PIXI_AbstractFilter();
PIXI_TilingSprite.parent = new PIXI_DisplayObjectContainer();
PIXI_TilingSprite.renderable = true;
PIXI_TilingSprite.tileScaleOffset = new Phaser_Point();
PIXI_TilingSprite.tilePosition = new Phaser_Point();
PIXI_TilingSprite.worldScale = new PIXI_Point();
PIXI_TilingSprite.tilePattern = new PIXI_Texture();
PIXI_TilingSprite.scale = new PIXI_Point();
PIXI_TilingSprite.canvasBuffer = new PIXI_CanvasBuffer();
PIXI_TilingSprite.tint = 0;
PIXI_TilingSprite.worldAlpha = 0;
PIXI_TilingSprite.worldVisible = true;
PIXI_TilingSprite.tintedTexture = new Phaser_Canvas();
PIXI_TilingSprite.children = [new PIXI_DisplayObject()];
PIXI_TilingSprite.alpha = 0;
PIXI_TilingSprite.pivot = new PIXI_Point();
PIXI_TilingSprite.worldTransform = new PIXI_Matrix();
PIXI_TilingSprite.cacheAsBitmap = true;
PIXI_TilingSprite.height = 0;
PIXI_TilingSprite.mask = new PIXI_Graphics();
PIXI_TilingSprite.visible = true;
PIXI_TilingSprite.tileScale = new Phaser_Point();
PIXI_TilingSprite.texture = new Texture();
PIXI_TilingSprite.textureDebug = true;
PIXI_TilingSprite.rotation = 0;
PIXI_TilingSprite.filters = new Array();
PIXI_TilingSprite.ignoreChildInput = true;
PIXI_TilingSprite.worldPosition = new PIXI_Point();
PIXI_TilingSprite.stage = new PIXI_Stage();
PIXI_TilingSprite.blendMode = 0;
PIXI_TilingSprite.hitArea = new Phaser_Rectangle();
PIXI_TilingSprite.anchor = new Phaser_Point();
PIXI_TilingSprite.width = 0;
PIXI_TilingSprite.x = 0;
PIXI_TilingSprite.exists = true;
PIXI_TilingSprite.y = 0;
PIXI_TilingSprite.position = new PIXI_Point();
PIXI_TilingSprite.refreshTexture = true;
PIXI_TilingSprite.tilingTexture = new PIXI_Texture();
PIXI_TilingSprite.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
PIXI_TilingSprite.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
PIXI_TilingSprite.updateCache = function () { return new PIXI_DisplayObject(); };
PIXI_TilingSprite.toGlobal = function (position) { return new PIXI_Point(); };
PIXI_TilingSprite.destroy = function () {};
PIXI_TilingSprite.toLocal = function (position, from) { return new PIXI_Point(); };
PIXI_TilingSprite.preUpdate = function () {};

var Phaser_Easing_Linear = function () {};
Phaser_Easing_Linear.prototype = new Object();
Phaser_Easing_Linear.None = function (k) { return new Number(); };

var Phaser_Net = function (game) {};
Phaser_Net.prototype = new Object();
Phaser_Net.getHostName = function () { return new String(); };
Phaser_Net.updateQueryString = function (key, value, redirect, url) { return new String(); };
Phaser_Net.getQueryString = function (parameter) { return new String(); };
Phaser_Net.decodeURI = function (value) { return new String(); };
Phaser_Net.checkDomainName = function (domain) { return new Boolean(); };

var Phaser_Component_AutoCull = function () {};
Phaser_Component_AutoCull.prototype = new Object();
Phaser_Component_AutoCull.autoCull = true;
Phaser_Component_AutoCull.inCamera = true;

var Phaser_Component_Reset = function () {};
Phaser_Component_Reset.prototype = new Object();
Phaser_Component_Reset.reset = function (x, y, health) { return new PIXI_DisplayObject(); };

var Phaser_Utils = function () {};
Phaser_Utils.prototype = new Object();
Phaser_Utils.reverseString = function (string) { return new String(); };
Phaser_Utils.extend = function (deep, target) { return new Object(); };
Phaser_Utils.mixin = function (from, to) { return new Object(); };
Phaser_Utils.pad = function (str, len, pad, dir) { return new String(); };
Phaser_Utils.getProperty = function (obj, prop) { return new _(); };
Phaser_Utils.isPlainObject = function (obj) { return new Boolean(); };
Phaser_Utils.setProperty = function (obj, prop) { return new Object(); };
Phaser_Utils.chanceRoll = function (chance) { return new Boolean(); };
Phaser_Utils.randomChoice = function (choice1, choice2) { return new Object(); };
Phaser_Utils.Debug = function (game) {};
Phaser_Utils.mixinPrototype = function (target, mixin, replace) {};
Phaser_Utils.parseDimension = function (size, dimension) { return new Number(); };

var Phaser_RandomDataGenerator = function (seeds) {};
Phaser_RandomDataGenerator.prototype = new Object();
Phaser_RandomDataGenerator.normal = function () { return new Number(); };
Phaser_RandomDataGenerator.integerInRange = function (min, max) { return new Number(); };
Phaser_RandomDataGenerator.sign = function () { return new Number(); };
Phaser_RandomDataGenerator.integer = function () { return new Number(); };
Phaser_RandomDataGenerator.real = function () { return new Number(); };
Phaser_RandomDataGenerator.uuid = function () { return new String(); };
Phaser_RandomDataGenerator.realInRange = function (min, max) { return new Number(); };
Phaser_RandomDataGenerator.pick = function (ary) { return new Object(); };
Phaser_RandomDataGenerator.angle = function () { return new Number(); };
Phaser_RandomDataGenerator.sow = function (seeds) {};
Phaser_RandomDataGenerator.state = function (state) { return new String(); };
Phaser_RandomDataGenerator.weightedPick = function (ary) { return new Object(); };
Phaser_RandomDataGenerator.frac = function () { return new Number(); };
Phaser_RandomDataGenerator.between = function (min, max) { return new Number(); };
Phaser_RandomDataGenerator.timestamp = function (min, max) { return new Number(); };

var Phaser_Signal = function () {};
Phaser_Signal.prototype = new Object();
Phaser_Signal.active = true;
Phaser_Signal.memorize = true;
Phaser_Signal.add = function (listener, listenerContext, priority, args) { return new Phaser_SignalBinding(); };
Phaser_Signal.dispatch = function (params) {};
Phaser_Signal.addOnce = function (listener, listenerContext, priority, args) { return new Phaser_SignalBinding(); };
Phaser_Signal.remove = function (listener, context) { return new Function(); };
Phaser_Signal.getNumListeners = function () { return new Number(); };
Phaser_Signal.halt = function () {};
Phaser_Signal.removeAll = function (context) {};
Phaser_Signal.forget = function () {};
Phaser_Signal.dispose = function () {};
Phaser_Signal.toString = function () { return new String(); };
Phaser_Signal.has = function (listener, context) { return new Boolean(); };

var Phaser_Frame = function (index, x, y, width, height, name) {};
Phaser_Frame.prototype = new Object();
Phaser_Frame.centerY = 0;
Phaser_Frame.distance = 0;
Phaser_Frame.spriteSourceSizeW = 0;
Phaser_Frame.centerX = 0;
Phaser_Frame.spriteSourceSizeX = 0;
Phaser_Frame.bottom = 0;
Phaser_Frame.index = 0;
Phaser_Frame.rotated = true;
Phaser_Frame.sourceSizeH = 0;
Phaser_Frame.spriteSourceSizeY = 0;
Phaser_Frame.right = 0;
Phaser_Frame.spriteSourceSizeH = 0;
Phaser_Frame.x = 0;
Phaser_Frame.width = 0;
Phaser_Frame.name = "";
Phaser_Frame.y = 0;
Phaser_Frame.trimmed = true;
Phaser_Frame.sourceSizeW = 0;
Phaser_Frame.rotationDirection = "";
Phaser_Frame.height = 0;
Phaser_Frame.setTrim = function (trimmed, actualWidth, actualHeight, destX, destY, destWidth, destHeight) {};
Phaser_Frame.clone = function () { return new Phaser_Frame(); };
Phaser_Frame.resize = function (width, height) {};
Phaser_Frame.getRect = function (out) { return new Phaser_Rectangle(); };

var Phaser_Math = function () {};
Phaser_Math.prototype = new Object();
Phaser_Math.PI2 = new Object();
Phaser_Math.smoothstep = function (x, min, max) { return new float(); };
Phaser_Math.sinCosGenerator = function (length, sinAmplitude, cosAmplitude, frequency) { return new Object(); };
Phaser_Math.sign = function (x) { return new Number(); };
Phaser_Math.radToDeg = function (radians) { return new Number(); };
Phaser_Math.snapToCeil = function (input, gap, start) { return new Number(); };
Phaser_Math.angleBetween = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.angleBetweenPointsY = function (point1, point2) { return new Number(); };
Phaser_Math.wrapAngle = function (angle, radians) { return new Number(); };
Phaser_Math.reverseAngle = function (angleRad) { return new Number(); };
Phaser_Math.maxAdd = function (value, amount, max) { return new Number(); };
Phaser_Math.snapToFloor = function (input, gap, start) { return new Number(); };
Phaser_Math.snapTo = function (input, gap, start) { return new Number(); };
Phaser_Math.wrapValue = function (value, amount, max) { return new Number(); };
Phaser_Math.between = function (min, max) { return new Number(); };
Phaser_Math.clamp = function (v, min, max) { return new Number(); };
Phaser_Math.clampBottom = function (x, a) { return new Number(); };
Phaser_Math.bernstein = function (n, i) { return new Number(); };
Phaser_Math.fuzzyLessThan = function (a, b, epsilon) { return new Boolean(); };
Phaser_Math.maxProperty = function () { return new Number(); };
Phaser_Math.smootherstep = function (x, min, max) { return new float(); };
Phaser_Math.catmullRomInterpolation = function (v, k) { return new Number(); };
Phaser_Math.normalizeAngle = function (angleRad) { return new Number(); };
Phaser_Math.difference = function (a, b) { return new Number(); };
Phaser_Math.fuzzyFloor = function (val, epsilon) { return new Number(); };
Phaser_Math.roundTo = function (value, place, base) { return new Number(); };
Phaser_Math.average = function () { return new Number(); };
Phaser_Math.roundAwayFromZero = function (value) { return new Number(); };
Phaser_Math.distance = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.angleBetweenPoints = function (point1, point2) { return new Number(); };
Phaser_Math.isEven = function (n) { return new Boolean(); };
Phaser_Math.fuzzyEqual = function (a, b, epsilon) { return new Boolean(); };
Phaser_Math.factorial = function (value) { return new Number(); };
Phaser_Math.minProperty = function () { return new Number(); };
Phaser_Math.distanceSq = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.percent = function (a, b, base) { return new Number(); };
Phaser_Math.angleBetweenY = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.ceilTo = function (value, place, base) { return new Number(); };
Phaser_Math.min = function () { return new Number(); };
Phaser_Math.degToRad = function (degrees) { return new Number(); };
Phaser_Math.isOdd = function (n) { return new Boolean(); };
Phaser_Math.catmullRom = function (p0, p1, p2, p3, t) { return new Number(); };
Phaser_Math.fuzzyGreaterThan = function (a, b, epsilon) { return new Boolean(); };
Phaser_Math.bezierInterpolation = function (v, k) { return new Number(); };
Phaser_Math.linearInterpolation = function (v, k) { return new Number(); };
Phaser_Math.linear = function (p0, p1, t) { return new Number(); };
Phaser_Math.shear = function (n) { return new Number(); };
Phaser_Math.max = function () { return new Number(); };
Phaser_Math.within = function (a, b, tolerance) { return new Boolean(); };
Phaser_Math.distancePow = function (x1, y1, x2, y2, pow) { return new Number(); };
Phaser_Math.floorTo = function (value, place, base) { return new Number(); };
Phaser_Math.fuzzyCeil = function (val, epsilon) { return new Number(); };
Phaser_Math.minSub = function (value, amount, min) { return new Number(); };
Phaser_Math.mapLinear = function (x, a1, a2, b1, b2) { return new Number(); };
Phaser_Math.wrap = function (value, min, max) { return new Number(); };

var Phaser_DOM = function () {};
Phaser_DOM.prototype = new Object();
Phaser_DOM.layoutBounds = new Object();
Phaser_DOM.documentBounds = new Object();
Phaser_DOM.scrollY = 0;
Phaser_DOM.visualBounds = new Object();
Phaser_DOM.scrollX = 0;
Phaser_DOM.getAspectRatio = function (object) { return new Number(); };
Phaser_DOM.getOffset = function (element, point) { return new Phaser_Point(); };
Phaser_DOM.getScreenOrientation = function (primaryFallback) {};
Phaser_DOM.getBounds = function (element, cushion) { return new Object(); };
Phaser_DOM.inLayoutViewport = function (element, cushion) { return new Boolean(); };

var Phaser_Tween = function (target, game, manager) {};
Phaser_Tween.prototype = new Object();
Phaser_Tween.game = new Phaser_Game();
Phaser_Tween.timeScale = 0;
Phaser_Tween.current = 0;
Phaser_Tween.onStart = new Phaser_Signal();
Phaser_Tween.isRunning = true;
Phaser_Tween.onRepeat = new Phaser_Signal();
Phaser_Tween.repeatCounter = 0;
Phaser_Tween.onChildComplete = new Phaser_Signal();
Phaser_Tween.totalDuration = new Phaser_TweenData();
Phaser_Tween.isPaused = true;
Phaser_Tween.manager = new Phaser_TweenManager();
Phaser_Tween.onComplete = new Phaser_Signal();
Phaser_Tween.reverse = true;
Phaser_Tween.target = new Object();
Phaser_Tween.chainedTween = new Phaser_Tween();
Phaser_Tween.timeline = new Array();
Phaser_Tween.frameBased = true;
Phaser_Tween.pendingDelete = true;
Phaser_Tween.properties = new Object();
Phaser_Tween.onLoop = new Phaser_Signal();
Phaser_Tween.update = function (time) { return new Boolean(); };
Phaser_Tween.updateTweenData = function (property, value, index) { return new Phaser_Tween(); };
Phaser_Tween.onUpdateCallback = function (callback, callbackContext) { return new Phaser_Tween(); };
Phaser_Tween.easing = function (ease, index) { return new Phaser_Tween(); };
Phaser_Tween.yoyoDelay = function (duration, index) { return new Phaser_Tween(); };
Phaser_Tween.yoyo = function (enable, yoyoDelay, index) { return new Phaser_Tween(); };
Phaser_Tween.loop = function (value) { return new Phaser_Tween(); };
Phaser_Tween.repeat = function (total, repeat, index) { return new Phaser_Tween(); };
Phaser_Tween.generateData = function (frameRate, data) { return new Array(); };
Phaser_Tween.from = function (properties, duration, ease, autoStart, delay, repeat, yoyo) { return new Phaser_Tween(); };
Phaser_Tween.repeatDelay = function (duration, index) { return new Phaser_Tween(); };
Phaser_Tween.resume = function () {};
Phaser_Tween.chain = function (tweens) { return new Phaser_Tween(); };
Phaser_Tween.start = function (index) { return new Phaser_Tween(); };
Phaser_Tween.pause = function () {};
Phaser_Tween.interpolation = function (interpolation, context, index) { return new Phaser_Tween(); };
Phaser_Tween.delay = function (duration, index) { return new Phaser_Tween(); };
Phaser_Tween.stop = function (complete) { return new Phaser_Tween(); };
Phaser_Tween.repeatAll = function (total) { return new Phaser_Tween(); };
Phaser_Tween.to = function (properties, duration, ease, autoStart, delay, repeat, yoyo) { return new Phaser_Tween(); };

var Phaser_Easing_Quintic = function () {};
Phaser_Easing_Quintic.prototype = new Object();
Phaser_Easing_Quintic.In = function (k) { return new Number(); };
Phaser_Easing_Quintic.InOut = function (k) { return new Number(); };
Phaser_Easing_Quintic.Out = function (k) { return new Number(); };

var Phaser_Device = function () {};
Phaser_Device.prototype = new Object();
Phaser_Device.fullscreenKeyboard = true;
Phaser_Device.arora = true;
Phaser_Device.windowsPhone = true;
Phaser_Device.opera = true;
Phaser_Device.webGL = true;
Phaser_Device.getUserMedia = true;
Phaser_Device.firefox = true;
Phaser_Device.ieVersion = 0;
Phaser_Device.hlsVideo = true;
Phaser_Device.canvasBitBltShift = true;
Phaser_Device.opus = true;
Phaser_Device.iOS = true;
Phaser_Device.vibration = true;
Phaser_Device.epiphany = true;
Phaser_Device.ogg = true;
Phaser_Device.audioData = true;
Phaser_Device.iPhone4 = true;
Phaser_Device.edge = true;
Phaser_Device.cordova = true;
Phaser_Device.electron = true;
Phaser_Device.safariVersion = 0;
Phaser_Device.quirksMode = true;
Phaser_Device.nodeWebkit = true;
Phaser_Device.worker = true;
Phaser_Device.ie = true;
Phaser_Device.css3D = true;
Phaser_Device.canvas = true;
Phaser_Device.cancelFullscreen = "";
Phaser_Device.firefoxVersion = 0;
Phaser_Device.chrome = true;
Phaser_Device.wheelType = "";
Phaser_Device.touch = true;
Phaser_Device.chromeOS = true;
Phaser_Device.webm = true;
Phaser_Device.node = true;
Phaser_Device.fullscreen = true;
Phaser_Device.pixelRatio = 0;
Phaser_Device.support32bit = true;
Phaser_Device.deviceReadyAt = 0;
Phaser_Device.mobileSafari = true;
Phaser_Device.mspointer = true;
Phaser_Device.iPhone = true;
Phaser_Device.requestFullscreen = "";
Phaser_Device.safari = true;
Phaser_Device.android = true;
Phaser_Device.localStorage = true;
Phaser_Device.mp4Video = true;
Phaser_Device.vp9Video = true;
Phaser_Device.LITTLE_ENDIAN = true;
Phaser_Device.chromeVersion = 0;
Phaser_Device.h264Video = true;
Phaser_Device.desktop = true;
Phaser_Device.crosswalk = true;
Phaser_Device.file = true;
Phaser_Device.webmVideo = true;
Phaser_Device.linux = true;
Phaser_Device.pointerLock = true;
Phaser_Device.oggVideo = true;
Phaser_Device.initialized = true;
Phaser_Device.iPad = true;
Phaser_Device.m4a = true;
Phaser_Device.macOS = true;
Phaser_Device.webApp = true;
Phaser_Device.silk = true;
Phaser_Device.fileSystem = true;
Phaser_Device.trident = true;
Phaser_Device.tridentVersion = 0;
Phaser_Device.webAudio = true;
Phaser_Device.cocoonJSApp = true;
Phaser_Device.iOSVersion = 0;
Phaser_Device.cocoonJS = true;
Phaser_Device.typedArray = true;
Phaser_Device.midori = true;
Phaser_Device.littleEndian = true;
Phaser_Device.onInitialized = new Phaser_Signal();
Phaser_Device.windows = true;
Phaser_Device.wav = true;
Phaser_Device.dolby = true;
Phaser_Device.ejecta = true;
Phaser_Device.mp3 = true;
Phaser_Device.whenReady = function (handler, context, nonPrimer) {};
Phaser_Device.isConsoleOpen = function () {};
Phaser_Device.canPlayVideo = function (type) { return new Boolean(); };
Phaser_Device.canPlayAudio = function (type) { return new Boolean(); };
Phaser_Device.isAndroidStockBrowser = function () {};

var Phaser_Component_BringToTop = function () {};
Phaser_Component_BringToTop.prototype = new Object();
Phaser_Component_BringToTop.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Component_BringToTop.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Component_BringToTop.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Component_BringToTop.moveUp = function () { return new PIXI_DisplayObject(); };

var Phaser_Time = function (game) {};
Phaser_Time.prototype = new Object();
Phaser_Time.game = new Phaser_Game();
Phaser_Time.fpsMin = 0;
Phaser_Time.timeToCall = 0;
Phaser_Time.elapsed = 0;
Phaser_Time.advancedTiming = true;
Phaser_Time.fpsMax = 0;
Phaser_Time.now = 0;
Phaser_Time.physicsElapsedMS = 0;
Phaser_Time.desiredFpsMult = 0;
Phaser_Time.suggestedFps = 0;
Phaser_Time.events = new Phaser_Timer();
Phaser_Time.frames = 0;
Phaser_Time.desiredFps = 0;
Phaser_Time.fps = 0;
Phaser_Time.prevTime = 0;
Phaser_Time.slowMotion = 0;
Phaser_Time.msMax = 0;
Phaser_Time.physicsElapsed = 0;
Phaser_Time.pauseDuration = 0;
Phaser_Time.timeExpected = 0;
Phaser_Time.msMin = 0;
Phaser_Time.time = 0;
Phaser_Time.elapsedMS = 0;
Phaser_Time.update = function (time) {};
Phaser_Time.totalElapsedSeconds = function () { return new Number(); };
Phaser_Time.removeAll = function () {};
Phaser_Time.create = function (autoDestroy) { return new Phaser_Timer(); };
Phaser_Time.boot = function () {};
Phaser_Time.elapsedSecondsSince = function (since) { return new Number(); };
Phaser_Time.add = function (timer) { return new Phaser_Timer(); };
Phaser_Time.elapsedSince = function (since) { return new Number(); };
Phaser_Time.refresh = function () {};
Phaser_Time.reset = function () {};

var Phaser_Sound = function (game, key, volume, loop) {};
Phaser_Sound.prototype = new Object();
Phaser_Sound.paused = true;
Phaser_Sound.onMute = new Phaser_Signal();
Phaser_Sound.externalNode = new Object();
Phaser_Sound.usingAudioTag = true;
Phaser_Sound.gainNode = new Object();
Phaser_Sound.loop = true;
Phaser_Sound.context = new AudioContext();
Phaser_Sound.onStop = new Phaser_Signal();
Phaser_Sound.totalDuration = 0;
Phaser_Sound.isPlaying = true;
Phaser_Sound.pendingPlayback = true;
Phaser_Sound.masterGainNode = new Object();
Phaser_Sound.mute = true;
Phaser_Sound.onPlay = new Phaser_Signal();
Phaser_Sound.autoplay = true;
Phaser_Sound.onResume = new Phaser_Signal();
Phaser_Sound.currentTime = 0;
Phaser_Sound.volume = 0;
Phaser_Sound.name = "";
Phaser_Sound.position = 0;
Phaser_Sound.onLoop = new Phaser_Signal();
Phaser_Sound.game = new Phaser_Game();
Phaser_Sound.onDecoded = new Phaser_Signal();
Phaser_Sound.isDecoding = true;
Phaser_Sound.onPause = new Phaser_Signal();
Phaser_Sound.pausedPosition = 0;
Phaser_Sound.isDecoded = true;
Phaser_Sound.duration = 0;
Phaser_Sound.onFadeComplete = new Phaser_Signal();
Phaser_Sound.startTime = 0;
Phaser_Sound.stopTime = 0;
Phaser_Sound.override = true;
Phaser_Sound.durationMS = 0;
Phaser_Sound.key = "";
Phaser_Sound.pausedTime = 0;
Phaser_Sound.usingWebAudio = true;
Phaser_Sound.allowMultiple = true;
Phaser_Sound.onMarkerComplete = new Phaser_Signal();
Phaser_Sound.fadeTween = new Phaser_Tween();
Phaser_Sound.markers = new Object();
Phaser_Sound.currentMarker = "";
Phaser_Sound.play = function (marker, position, volume, loop, forceRestart) { return new Phaser_Sound(); };
Phaser_Sound.fadeTo = function (duration, volume) {};
Phaser_Sound.removeMarker = function (name) {};
Phaser_Sound.updateGlobalVolume = function (globalVolume) {};
Phaser_Sound.destroy = function (remove) {};
Phaser_Sound.pause = function () {};
Phaser_Sound.stop = function () {};
Phaser_Sound.fadeOut = function (duration) {};
Phaser_Sound.update = function () {};
Phaser_Sound.fadeIn = function (duration, loop, marker) {};
Phaser_Sound.loopFull = function (volume) { return new Phaser_Sound(); };
Phaser_Sound.resume = function () {};
Phaser_Sound.restart = function (marker, position, volume, loop) {};
Phaser_Sound.onEndedHandler = function () {};
Phaser_Sound.soundHasUnlocked = function (key) {};
Phaser_Sound.addMarker = function (name, start, duration, volume, loop) {};

var Phaser_Game = function (width, height, renderer, parent, state, transparent, antialias, physicsConfig) {};
Phaser_Game.prototype = new Object();
Phaser_Game.parent = "";
Phaser_Game.paused = true;
Phaser_Game.plugins = new Phaser_PluginManager();
Phaser_Game.lockRender = true;
Phaser_Game.sound = new Phaser_SoundManager();
Phaser_Game.stepping = true;
Phaser_Game.resolution = 0;
Phaser_Game.clearBeforeRender = true;
Phaser_Game.antialias = true;
Phaser_Game.raf = new Phaser_RequestAnimationFrame();
Phaser_Game.updatesThisFrame = 0;
Phaser_Game.context = new CanvasRenderingContext2D();
Phaser_Game.create = new Phaser_Create();
Phaser_Game.id = 0;
Phaser_Game.state = new Phaser_StateManager();
Phaser_Game.currentUpdateID = 0;
Phaser_Game.net = new Phaser_Net();
Phaser_Game.particles = new Phaser_Particles();
Phaser_Game.height = 0;
Phaser_Game.add = new Phaser_GameObjectFactory();
Phaser_Game.physicsConfig = new Object();
Phaser_Game.cache = new Phaser_Cache();
Phaser_Game.canvas = new HTMLCanvasElement();
Phaser_Game.rnd = new Phaser_RandomDataGenerator();
Phaser_Game.onResume = new Phaser_Signal();
Phaser_Game.onFocus = new Phaser_Signal();
Phaser_Game.input = new Phaser_Input();
Phaser_Game.fpsProblemNotifier = new Phaser_Signal();
Phaser_Game.math = new Phaser_Math();
Phaser_Game.device = new Phaser_Device();
Phaser_Game.stepCount = 0;
Phaser_Game.renderer = new PIXI_CanvasRenderer();
Phaser_Game.tweens = new Phaser_TweenManager();
Phaser_Game.scale = new Phaser_ScaleManager();
Phaser_Game.onPause = new Phaser_Signal();
Phaser_Game.transparent = true;
Phaser_Game.world = new Phaser_World();
Phaser_Game.load = new Phaser_Loader();
Phaser_Game.isRunning = true;
Phaser_Game.preserveDrawingBuffer = true;
Phaser_Game.physics = new Phaser_Physics();
Phaser_Game.pendingStep = true;
Phaser_Game.renderType = 0;
Phaser_Game.camera = new Phaser_Camera();
Phaser_Game.make = new Phaser_GameObjectCreator();
Phaser_Game.isBooted = true;
Phaser_Game.debug = new Phaser_Utils_Debug();
Phaser_Game.forceSingleUpdate = true;
Phaser_Game.onBlur = new Phaser_Signal();
Phaser_Game.stage = new Phaser_Stage();
Phaser_Game.width = 0;
Phaser_Game.time = new Phaser_Time();
Phaser_Game.config = new Object();
Phaser_Game.gamePaused = function (event) {};
Phaser_Game.focusLoss = function (event) {};
Phaser_Game.showDebugHeader = function () {};
Phaser_Game.parseConfig = function () {};
Phaser_Game.destroy = function () {};
Phaser_Game.enableStep = function () {};
Phaser_Game.setUpRenderer = function () {};
Phaser_Game.update = function (time) {};
Phaser_Game.updateRender = function (elapsedTime) {};
Phaser_Game.updateLogic = function (timeStep) {};
Phaser_Game.boot = function () {};
Phaser_Game.gameResumed = function (event) {};
Phaser_Game.step = function () {};
Phaser_Game.focusGain = function (event) {};
Phaser_Game.disableStep = function () {};

var Phaser_Animation = function (game, parent, name, frameData, frames, frameRate, loop) {};
Phaser_Animation.prototype = new Object();
Phaser_Animation.game = new Phaser_Game();
Phaser_Animation.paused = true;
Phaser_Animation.speed = 0;
Phaser_Animation.loopCount = 0;
Phaser_Animation.onStart = new Phaser_Signal();
Phaser_Animation.frameTotal = 0;
Phaser_Animation.loop = true;
Phaser_Animation.currentFrame = new Phaser_Frame();
Phaser_Animation.isPaused = true;
Phaser_Animation.isPlaying = true;
Phaser_Animation.onComplete = new Phaser_Signal();
Phaser_Animation.isFinished = true;
Phaser_Animation.delay = 0;
Phaser_Animation.enableUpdate = true;
Phaser_Animation.name = "";
Phaser_Animation.killOnComplete = true;
Phaser_Animation.onUpdate = new Phaser_Signal();
Phaser_Animation.reversed = true;
Phaser_Animation.onLoop = new Phaser_Signal();
Phaser_Animation.isReversed = true;
Phaser_Animation.frame = 0;
Phaser_Animation.play = function (frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Animation.next = function (quantity) {};
Phaser_Animation.update = function () {};
Phaser_Animation.onPause = function () {};
Phaser_Animation.setFrame = function (frameId, useLocalFrameIndex) {};
Phaser_Animation.generateFrameNames = function (prefix, start, stop, suffix, zeroPad) { return new Array(); };
Phaser_Animation.previous = function (quantity) {};
Phaser_Animation.restart = function () {};
Phaser_Animation.reverseOnce = function () { return new Phaser_Animation(); };
Phaser_Animation.destroy = function () {};
Phaser_Animation.reverse = function () { return new Phaser_Animation(); };
Phaser_Animation.onResume = function () {};
Phaser_Animation.stop = function (resetFrame, dispatchComplete) {};
Phaser_Animation.complete = function () {};
Phaser_Animation.updateFrameData = function (frameData) {};

var Phaser_Easing_Exponential = function () {};
Phaser_Easing_Exponential.prototype = new Object();
Phaser_Easing_Exponential.In = function (k) { return new Number(); };
Phaser_Easing_Exponential.InOut = function (k) { return new Number(); };
Phaser_Easing_Exponential.Out = function (k) { return new Number(); };

var Phaser_Physics_Arcade = function (game) {};
Phaser_Physics_Arcade.prototype = new Object();
Phaser_Physics_Arcade.BOTTOM_TOP = 0;
Phaser_Physics_Arcade.RIGHT_LEFT = 0;
Phaser_Physics_Arcade.SORT_NONE = 0;
Phaser_Physics_Arcade.TOP_BOTTOM = 0;
Phaser_Physics_Arcade.LEFT_RIGHT = 0;
Phaser_Physics_Arcade.forceX = true;
Phaser_Physics_Arcade.sortDirection = 0;
Phaser_Physics_Arcade.maxObjects = 0;
Phaser_Physics_Arcade.isPaused = true;
Phaser_Physics_Arcade.checkCollision = new Object();
Phaser_Physics_Arcade.maxLevels = 0;
Phaser_Physics_Arcade.bounds = new Phaser_Rectangle();
Phaser_Physics_Arcade.skipQuadTree = true;
Phaser_Physics_Arcade.game = new Phaser_Game();
Phaser_Physics_Arcade.quadTree = new Phaser_QuadTree();
Phaser_Physics_Arcade.OVERLAP_BIAS = 0;
Phaser_Physics_Arcade.gravity = new Phaser_Point();
Phaser_Physics_Arcade.getOverlapY = function (body1, body2, overlapOnly) { return new float(); };
Phaser_Physics_Arcade.distanceBetween = function (source, target, world) { return new Number(); };
Phaser_Physics_Arcade.getOverlapX = function (body1, body2, overlapOnly) { return new float(); };
Phaser_Physics_Arcade.angleBetween = function (source, target, world) { return new Number(); };
Phaser_Physics_Arcade.enableBody = function (object) {};
Phaser_Physics_Arcade.enable = function (object, children) {};
Phaser_Physics_Arcade.angleToPointer = function (displayObject, pointer, world) { return new Number(); };
Phaser_Physics_Arcade.circleBodyIntersects = function (circle, body) { return new Boolean(); };
Phaser_Physics_Arcade.accelerateToPointer = function (displayObject, pointer, speed, xSpeedMax, ySpeedMax) { return new Number(); };
Phaser_Physics_Arcade.sortTopBottom = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.collide = function (object1, object2, collideCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Arcade.sort = function (group, sortDirection) {};
Phaser_Physics_Arcade.sortRightLeft = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.updateMotion = function (The) {};
Phaser_Physics_Arcade.angleBetweenCenters = function (source, target) { return new Number(); };
Phaser_Physics_Arcade.overlap = function (object1, object2, overlapCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Arcade.worldAngleToPointer = function (displayObject, pointer) { return new Number(); };
Phaser_Physics_Arcade.getObjectsAtLocation = function (x, y, group, callback, callbackContext, callbackArg) { return new Array(); };
Phaser_Physics_Arcade.intersects = function (body1, body2) { return new Boolean(); };
Phaser_Physics_Arcade.moveToObject = function (displayObject, destination, speed, maxTime) { return new Number(); };
Phaser_Physics_Arcade.distanceToXY = function (displayObject, x, y, world) { return new Number(); };
Phaser_Physics_Arcade.getObjectsUnderPointer = function (pointer, group, callback, callbackContext) { return new Array(); };
Phaser_Physics_Arcade.accelerateToObject = function (displayObject, destination, speed, xSpeedMax, ySpeedMax) { return new Number(); };
Phaser_Physics_Arcade.computeVelocity = function (axis, body, velocity, acceleration, drag, max) { return new Number(); };
Phaser_Physics_Arcade.moveToPointer = function (displayObject, speed, pointer, maxTime) { return new Number(); };
Phaser_Physics_Arcade.sortLeftRight = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.Body = function (sprite) {};
Phaser_Physics_Arcade.distanceToPointer = function (displayObject, pointer, world) { return new Number(); };
Phaser_Physics_Arcade.velocityFromAngle = function (angle, speed, point) { return new Phaser_Point(); };
Phaser_Physics_Arcade.moveToXY = function (displayObject, x, y, speed, maxTime) { return new Number(); };
Phaser_Physics_Arcade.setBounds = function (x, y, width, height) {};
Phaser_Physics_Arcade.setBoundsToWorld = function () {};
Phaser_Physics_Arcade.sortBottomTop = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.accelerateToXY = function (displayObject, x, y, speed, xSpeedMax, ySpeedMax) { return new Number(); };
Phaser_Physics_Arcade.velocityFromRotation = function (rotation, speed, point) { return new Phaser_Point(); };
Phaser_Physics_Arcade.accelerationFromRotation = function (rotation, speed, point) { return new Phaser_Point(); };
Phaser_Physics_Arcade.angleToXY = function (displayObject, x, y, world) { return new Number(); };

var Phaser_Mouse = function (game) {};
Phaser_Mouse.prototype = new Object();
Phaser_Mouse.LEFT_BUTTON = 0;
Phaser_Mouse.NO_BUTTON = 0;
Phaser_Mouse.RIGHT_BUTTON = 0;
Phaser_Mouse.WHEEL_DOWN = 0;
Phaser_Mouse.MIDDLE_BUTTON = 0;
Phaser_Mouse.BACK_BUTTON = 0;
Phaser_Mouse.WHEEL_UP = 0;
Phaser_Mouse.FORWARD_BUTTON = 0;
Phaser_Mouse.game = new Phaser_Game();
Phaser_Mouse.mouseOutCallback = new Function();
Phaser_Mouse.mouseWheelCallback = new Function();
Phaser_Mouse.wheelDelta = 0;
Phaser_Mouse.mouseOverCallback = new Function();
Phaser_Mouse.enabled = true;
Phaser_Mouse.button = 0;
Phaser_Mouse.pointerLock = new Phaser_Signal();
Phaser_Mouse.locked = true;
Phaser_Mouse.event = new MouseEvent();
Phaser_Mouse.mouseDownCallback = new Function();
Phaser_Mouse.capture = true;
Phaser_Mouse.callbackContext = new Object();
Phaser_Mouse.stopOnGameOut = true;
Phaser_Mouse.mouseUpCallback = new Function();
Phaser_Mouse.input = new Phaser_Input();
Phaser_Mouse.requestPointerLock = function () {};
Phaser_Mouse.releasePointerLock = function () {};
Phaser_Mouse.onMouseWheel = function (event) {};
Phaser_Mouse.onMouseOut = function (event) {};
Phaser_Mouse.onMouseDown = function (event) {};
Phaser_Mouse.onMouseOver = function (event) {};
Phaser_Mouse.start = function () {};
Phaser_Mouse.onMouseUpGlobal = function (event) {};
Phaser_Mouse.onMouseMove = function (event) {};
Phaser_Mouse.onMouseOutGlobal = function (event) {};
Phaser_Mouse.stop = function () {};
Phaser_Mouse.pointerLockChange = function (event) {};
Phaser_Mouse.onMouseUp = function (event) {};

var Phaser_Particles = function (game) {};
Phaser_Particles.prototype = new Object();
Phaser_Particles.game = new Phaser_Game();
Phaser_Particles.emitters = new Object();
Phaser_Particles.ID = 0;
Phaser_Particles.add = function (emitter) { return new Phaser_Emitter(); };
Phaser_Particles.update = function () {};
Phaser_Particles.remove = function (emitter) {};

var Phaser_Pointer = function (game, id, pointerMode) {};
Phaser_Pointer.prototype = new Object();
Phaser_Pointer.MIDDLE_BUTTON = 0;
Phaser_Pointer.LEFT_BUTTON = 0;
Phaser_Pointer.NO_BUTTON = 0;
Phaser_Pointer.ERASER_BUTTON = 0;
Phaser_Pointer.RIGHT_BUTTON = 0;
Phaser_Pointer.BACK_BUTTON = 0;
Phaser_Pointer.FORWARD_BUTTON = 0;
Phaser_Pointer.rawMovementY = 0;
Phaser_Pointer.rawMovementX = 0;
Phaser_Pointer.isMouse = true;
Phaser_Pointer.interactiveCandidates = new Array();
Phaser_Pointer.type = 0;
Phaser_Pointer.id = 0;
Phaser_Pointer.identifier = 0;
Phaser_Pointer.timeUp = 0;
Phaser_Pointer.clientY = 0;
Phaser_Pointer.clientX = 0;
Phaser_Pointer.timeDown = 0;
Phaser_Pointer.active = true;
Phaser_Pointer.totalTouches = 0;
Phaser_Pointer.position = new Phaser_Point();
Phaser_Pointer.circle = new Phaser_Circle();
Phaser_Pointer.screenX = 0;
Phaser_Pointer.screenY = 0;
Phaser_Pointer.game = new Phaser_Game();
Phaser_Pointer.targetObject = new Object();
Phaser_Pointer.msSinceLastClick = 0;
Phaser_Pointer.isDown = true;
Phaser_Pointer.pointerMode = new Phaser_PointerMode();
Phaser_Pointer.button = new Object();
Phaser_Pointer.middleButton = new Phaser_DeviceButton();
Phaser_Pointer.duration = 0;
Phaser_Pointer.leftButton = new Phaser_DeviceButton();
Phaser_Pointer.isUp = true;
Phaser_Pointer.previousTapTime = 0;
Phaser_Pointer.backButton = new Phaser_DeviceButton();
Phaser_Pointer.withinGame = true;
Phaser_Pointer.dirty = true;
Phaser_Pointer.movementY = 0;
Phaser_Pointer.worldX = 0;
Phaser_Pointer.worldY = 0;
Phaser_Pointer.movementX = 0;
Phaser_Pointer.positionDown = new Phaser_Point();
Phaser_Pointer.target = new Object();
Phaser_Pointer.pointerId = 0;
Phaser_Pointer.positionUp = new Phaser_Point();
Phaser_Pointer.forwardButton = new Phaser_DeviceButton();
Phaser_Pointer.x = 0;
Phaser_Pointer.exists = true;
Phaser_Pointer.y = 0;
Phaser_Pointer.rightButton = new Phaser_DeviceButton();
Phaser_Pointer.eraserButton = new Phaser_DeviceButton();
Phaser_Pointer.pageY = 0;
Phaser_Pointer.pageX = 0;
Phaser_Pointer.leave = function (event) {};
Phaser_Pointer.addClickTrampoline = function (name, callback, callbackContext, callbackArgs) {};
Phaser_Pointer.stop = function (event) {};
Phaser_Pointer.swapTarget = function (newTarget, silent) {};
Phaser_Pointer.reset = function () {};
Phaser_Pointer.updateButtons = function (event) {};
Phaser_Pointer.resetButtons = function () {};
Phaser_Pointer.update = function () {};
Phaser_Pointer.processInteractiveObjects = function (fromClick) { return new Boolean(); };
Phaser_Pointer.resetMovement = function () {};
Phaser_Pointer.justReleased = function (duration) { return new Boolean(); };
Phaser_Pointer.justPressed = function (duration) { return new Boolean(); };
Phaser_Pointer.move = function (event, fromClick) {};
Phaser_Pointer.start = function (event) {};

var Phaser_Component_LifeSpan = function () {};
Phaser_Component_LifeSpan.prototype = new Object();
Phaser_Component_LifeSpan.alive = true;
Phaser_Component_LifeSpan.lifespan = 0;
Phaser_Component_LifeSpan.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Component_LifeSpan.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Component_LifeSpan.preUpdate = function () {};

var Phaser_Component_LoadTexture = function () {};
Phaser_Component_LoadTexture.prototype = new Object();
Phaser_Component_LoadTexture.frameName = "";
Phaser_Component_LoadTexture.frame = 0;
Phaser_Component_LoadTexture.resizeFrame = function (parent, width, height) {};
Phaser_Component_LoadTexture.setFrame = function (frame) {};
Phaser_Component_LoadTexture.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Component_LoadTexture.resetFrame = function () {};

var Phaser_Component_InCamera = function () {};
Phaser_Component_InCamera.prototype = new Object();
Phaser_Component_InCamera.inCamera = true;

var Phaser_RenderTexture = function (game, key, width, height, key, scaleMode, resolution) {};
Phaser_RenderTexture.prototype = new PIXI.RenderTexture();
Phaser_RenderTexture.game = new Phaser_Game();
Phaser_RenderTexture.type = 0;
Phaser_RenderTexture.key = "";
Phaser_RenderTexture.renderXY = function (displayObject, x, y, clear) {};
Phaser_RenderTexture.render = function (displayObject, matrix, clear) {};
Phaser_RenderTexture.renderRawXY = function (displayObject, x, y, clear) {};

var Phaser_Physics_Ninja = function (game) {};
Phaser_Physics_Ninja.prototype = new Object();
Phaser_Physics_Ninja.game = new Phaser_Game();
Phaser_Physics_Ninja.maxLevels = 0;
Phaser_Physics_Ninja.quadTree = new Phaser_QuadTree();
Phaser_Physics_Ninja.gravity = 0;
Phaser_Physics_Ninja.bounds = new Phaser_Rectangle();
Phaser_Physics_Ninja.time = new Phaser_Time();
Phaser_Physics_Ninja.maxObjects = 0;
Phaser_Physics_Ninja.Circle = function (body, x, y, radius) {};
Phaser_Physics_Ninja.separate = function (body1, body2) { return new Boolean(); };
Phaser_Physics_Ninja.Tile = function (body, x, y, width, height, type) {};
Phaser_Physics_Ninja.enableTile = function (object, id, children) {};
Phaser_Physics_Ninja.collide = function (object1, object2, collideCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Ninja.enableAABB = function (object, children) {};
Phaser_Physics_Ninja.setBounds = function (x, y, width, height) {};
Phaser_Physics_Ninja.setBoundsToWorld = function () {};
Phaser_Physics_Ninja.convertTilemap = function (map, layer, slopeMap) { return new Array(); };
Phaser_Physics_Ninja.overlap = function (object1, object2, overlapCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Ninja.enableCircle = function (object, radius, children) {};
Phaser_Physics_Ninja.enableBody = function (object) {};
Phaser_Physics_Ninja.enable = function (object, type, id, radius, children) {};
Phaser_Physics_Ninja.Body = function (system, sprite, type, id, radius, x, y, width, height) {};
Phaser_Physics_Ninja.AABB = function (body, x, y, width, height) {};
Phaser_Physics_Ninja.clearTilemapLayerBodies = function (map, layer) {};

var Phaser_QuadTree = function (x, y, width, height, maxObjects, maxLevels, level) {};
Phaser_QuadTree.prototype = new Object();
Phaser_QuadTree.maxLevels = 0;
Phaser_QuadTree.level = 0;
Phaser_QuadTree.objects = new Array();
Phaser_QuadTree.nodes = new Array();
Phaser_QuadTree.bounds = new Object();
Phaser_QuadTree.maxObjects = 0;
Phaser_QuadTree.getIndex = function (rect) { return new Number(); };
Phaser_QuadTree.clear = function () {};
Phaser_QuadTree.insert = function (body) {};
Phaser_QuadTree.populate = function (group) {};
Phaser_QuadTree.split = function () {};
Phaser_QuadTree.populateHandler = function (sprite) {};
Phaser_QuadTree.reset = function (x, y, width, height, maxObjects, maxLevels, level) {};
Phaser_QuadTree.retrieve = function (source) { return new Array(); };

var Phaser_Video = function (game, key, url) {};
Phaser_Video.prototype = new Object();
Phaser_Video.paused = true;
Phaser_Video.type = 0;
Phaser_Video.textureFrame = new Phaser_Frame();
Phaser_Video.loop = true;
Phaser_Video.onChangeSource = new Phaser_Signal();
Phaser_Video.height = 0;
Phaser_Video.mute = true;
Phaser_Video.onPlay = new Phaser_Signal();
Phaser_Video.currentTime = 0;
Phaser_Video.volume = 0;
Phaser_Video.isStreaming = true;
Phaser_Video.disableTextureUpload = true;
Phaser_Video.playing = true;
Phaser_Video.snapshot = new Phaser_BitmapData();
Phaser_Video.onAccess = new Phaser_Signal();
Phaser_Video.game = new Phaser_Game();
Phaser_Video.video = new HTMLVideoElement();
Phaser_Video.timeout = 0;
Phaser_Video.duration = 0;
Phaser_Video.playbackRate = 0;
Phaser_Video.onTimeout = new Phaser_Signal();
Phaser_Video.key = "";
Phaser_Video.retry = 0;
Phaser_Video.onError = new Phaser_Signal();
Phaser_Video.texture = new PIXI_Texture();
Phaser_Video.onComplete = new Phaser_Signal();
Phaser_Video.retryLimit = 0;
Phaser_Video.videoStream = new MediaStream();
Phaser_Video.width = 0;
Phaser_Video.progress = 0;
Phaser_Video.retryInterval = 0;
Phaser_Video.touchLocked = true;
Phaser_Video.play = function (loop, playbackRate) { return new Phaser_Video(); };
Phaser_Video.addToWorld = function (x, y, anchorX, anchorY, scaleX, scaleY) { return new Phaser_Image(); };
Phaser_Video.createVideoFromURL = function (url, autoplay) { return new Phaser_Video(); };
Phaser_Video.add = function (object) { return new Phaser_Video(); };
Phaser_Video.unlock = function () {};
Phaser_Video.setTouchLock = function () {};
Phaser_Video.destroy = function () {};
Phaser_Video.removeVideoElement = function () {};
Phaser_Video.stop = function () { return new Phaser_Video(); };
Phaser_Video.updateTexture = function (event, width, height) {};
Phaser_Video.changeSource = function (src, autoplay) { return new Phaser_Video(); };
Phaser_Video.render = function () {};
Phaser_Video.connectToMediaStream = function (video, stream) { return new Phaser_Video(); };
Phaser_Video.startMediaStream = function (captureAudio, width, height) { return new Phaser_Video(); };
Phaser_Video.createVideoFromBlob = function (blob) { return new Phaser_Video(); };
Phaser_Video.complete = function () {};
Phaser_Video.grab = function (clear, alpha, blendMode) { return new Phaser_BitmapData(); };

var Phaser_Component_Crop = function () {};
Phaser_Component_Crop.prototype = new Object();
Phaser_Component_Crop.cropRect = new Phaser_Rectangle();
Phaser_Component_Crop.updateCrop = function () {};
Phaser_Component_Crop.crop = function (rect, copy) {};

var Phaser_RequestAnimationFrame = function (game, forceSetTimeOut) {};
Phaser_RequestAnimationFrame.prototype = new Object();
Phaser_RequestAnimationFrame.game = new Phaser_Game();
Phaser_RequestAnimationFrame.isRunning = true;
Phaser_RequestAnimationFrame.forceSetTimeOut = true;
Phaser_RequestAnimationFrame.isRAF = function () { return new Boolean(); };
Phaser_RequestAnimationFrame.isSetTimeOut = function () { return new Boolean(); };
Phaser_RequestAnimationFrame.updateSetTimeout = function () {};
Phaser_RequestAnimationFrame.stop = function () {};
Phaser_RequestAnimationFrame.start = function () {};
Phaser_RequestAnimationFrame.updateRAF = function () {};

var Phaser_Easing_Bounce = function () {};
Phaser_Easing_Bounce.prototype = new Object();
Phaser_Easing_Bounce.In = function (k) { return new Number(); };
Phaser_Easing_Bounce.InOut = function (k) { return new Number(); };
Phaser_Easing_Bounce.Out = function (k) { return new Number(); };

var Phaser_KeyCode = function () {};
Phaser_KeyCode.prototype = new Object();
Phaser_KeyCode.UNDERSCORE = new Object();
Phaser_KeyCode.FOUR = new Object();
Phaser_KeyCode.MINUS = new Object();
Phaser_KeyCode.NUMPAD_ADD = new Object();
Phaser_KeyCode.LEFT = new Object();
Phaser_KeyCode.NUMPAD_DECIMAL = new Object();
Phaser_KeyCode.TWO = new Object();
Phaser_KeyCode.NUMPAD_2 = new Object();
Phaser_KeyCode.NUMPAD_3 = new Object();
Phaser_KeyCode.NUMPAD_4 = new Object();
Phaser_KeyCode.NUMPAD_5 = new Object();
Phaser_KeyCode.NUMPAD_6 = new Object();
Phaser_KeyCode.NUMPAD_7 = new Object();
Phaser_KeyCode.NUMPAD_8 = new Object();
Phaser_KeyCode.NUMPAD_9 = new Object();
Phaser_KeyCode.A = new Object();
Phaser_KeyCode.B = new Object();
Phaser_KeyCode.C = new Object();
Phaser_KeyCode.D = new Object();
Phaser_KeyCode.E = new Object();
Phaser_KeyCode.F = new Object();
Phaser_KeyCode.NUMPAD_0 = new Object();
Phaser_KeyCode.G = new Object();
Phaser_KeyCode.ONE = new Object();
Phaser_KeyCode.NUMPAD_1 = new Object();
Phaser_KeyCode.H = new Object();
Phaser_KeyCode.I = new Object();
Phaser_KeyCode.ENTER = new Object();
Phaser_KeyCode.J = new Object();
Phaser_KeyCode.K = new Object();
Phaser_KeyCode.L = new Object();
Phaser_KeyCode.M = new Object();
Phaser_KeyCode.N = new Object();
Phaser_KeyCode.O = new Object();
Phaser_KeyCode.P = new Object();
Phaser_KeyCode.Q = new Object();
Phaser_KeyCode.R = new Object();
Phaser_KeyCode.DELETE = new Object();
Phaser_KeyCode.S = new Object();
Phaser_KeyCode.T = new Object();
Phaser_KeyCode.ESC = new Object();
Phaser_KeyCode.U = new Object();
Phaser_KeyCode.V = new Object();
Phaser_KeyCode.W = new Object();
Phaser_KeyCode.X = new Object();
Phaser_KeyCode.Y = new Object();
Phaser_KeyCode.RIGHT = new Object();
Phaser_KeyCode.Z = new Object();
Phaser_KeyCode.SEVEN = new Object();
Phaser_KeyCode.COMMA = new Object();
Phaser_KeyCode.HELP = new Object();
Phaser_KeyCode.BACKWARD_SLASH = new Object();
Phaser_KeyCode.TAB = new Object();
Phaser_KeyCode.QUOTES = new Object();
Phaser_KeyCode.ZERO = new Object();
Phaser_KeyCode.EIGHT = new Object();
Phaser_KeyCode.DOWN = new Object();
Phaser_KeyCode.ALT = new Object();
Phaser_KeyCode.FIVE = new Object();
Phaser_KeyCode.QUESTION_MARK = new Object();
Phaser_KeyCode.NINE = new Object();
Phaser_KeyCode.BACKSPACE = new Object();
Phaser_KeyCode.UP = new Object();
Phaser_KeyCode.F1 = new Object();
Phaser_KeyCode.F2 = new Object();
Phaser_KeyCode.NUMPAD_ENTER = new Object();
Phaser_KeyCode.F3 = new Object();
Phaser_KeyCode.PAGE_UP = new Object();
Phaser_KeyCode.F4 = new Object();
Phaser_KeyCode.F5 = new Object();
Phaser_KeyCode.F6 = new Object();
Phaser_KeyCode.F7 = new Object();
Phaser_KeyCode.F8 = new Object();
Phaser_KeyCode.F9 = new Object();
Phaser_KeyCode.NUM_LOCK = new Object();
Phaser_KeyCode.PERIOD = new Object();
Phaser_KeyCode.END = new Object();
Phaser_KeyCode.INSERT = new Object();
Phaser_KeyCode.THREE = new Object();
Phaser_KeyCode.CONTROL = new Object();
Phaser_KeyCode.PLUS = new Object();
Phaser_KeyCode.CAPS_LOCK = new Object();
Phaser_KeyCode.SIX = new Object();
Phaser_KeyCode.NUMPAD_DIVIDE = new Object();
Phaser_KeyCode.PAGE_DOWN = new Object();
Phaser_KeyCode.SHIFT = new Object();
Phaser_KeyCode.NUMPAD_MULTIPLY = new Object();
Phaser_KeyCode.CLOSED_BRACKET = new Object();
Phaser_KeyCode.SPACEBAR = new Object();
Phaser_KeyCode.F10 = new Object();
Phaser_KeyCode.EQUALS = new Object();
Phaser_KeyCode.F12 = new Object();
Phaser_KeyCode.F11 = new Object();
Phaser_KeyCode.F14 = new Object();
Phaser_KeyCode.OPEN_BRACKET = new Object();
Phaser_KeyCode.F13 = new Object();
Phaser_KeyCode.COLON = new Object();
Phaser_KeyCode.F15 = new Object();
Phaser_KeyCode.NUMPAD_SUBTRACT = new Object();
Phaser_KeyCode.TILDE = new Object();
Phaser_KeyCode.CLEAR = new Object();
Phaser_KeyCode.HOME = new Object();

var Phaser_FrameData = function () {};
Phaser_FrameData.prototype = new Object();
Phaser_FrameData.total = 0;
Phaser_FrameData.getFrameByName = function (name) { return new Phaser_Frame(); };
Phaser_FrameData.getFrames = function (frames, useNumericIndex, output) { return new Array(); };
Phaser_FrameData.getFrameIndexes = function (frames, useNumericIndex, output) { return new Array(); };
Phaser_FrameData.checkFrameName = function (name) { return new Boolean(); };
Phaser_FrameData.getFrame = function (index) { return new Phaser_Frame(); };
Phaser_FrameData.getFrameRange = function (start, end, output) { return new Array(); };
Phaser_FrameData.clone = function () { return new Phaser_FrameData(); };
Phaser_FrameData.addFrame = function (frame) { return new Phaser_Frame(); };
Phaser_FrameData.destroy = function () {};

var Phaser_Key = function (game, keycode) {};
Phaser_Key.prototype = new Object();
Phaser_Key.repeats = 0;
Phaser_Key.game = new Phaser_Game();
Phaser_Key.onHoldContext = new Object();
Phaser_Key.timeUp = 0;
Phaser_Key.ctrlKey = true;
Phaser_Key.onHoldCallback = new Function();
Phaser_Key.timeDown = 0;
Phaser_Key.isDown = true;
Phaser_Key.onUp = new Phaser_Signal();
Phaser_Key.duration = 0;
Phaser_Key.keyCode = 0;
Phaser_Key.shiftKey = true;
Phaser_Key.isUp = true;
Phaser_Key.onDown = new Phaser_Signal();
Phaser_Key.altKey = true;
Phaser_Key.event = new Object();
Phaser_Key.update = function () {};
Phaser_Key.downDuration = function (duration) { return new Boolean(); };
Phaser_Key.upDuration = function (duration) { return new Boolean(); };
Phaser_Key.reset = function (hard) {};
Phaser_Key.processKeyUp = function (event) {};
Phaser_Key.processKeyDown = function (event) {};

var Phaser_InputHandler = function (sprite) {};
Phaser_InputHandler.prototype = new Object();
Phaser_InputHandler.pixelPerfectClick = true;
Phaser_InputHandler.snapPoint = new Phaser_Point();
Phaser_InputHandler.allowVerticalDrag = true;
Phaser_InputHandler.checked = true;
Phaser_InputHandler.bringToTop = true;
Phaser_InputHandler.dragStartPoint = new Phaser_Point();
Phaser_InputHandler.useHandCursor = true;
Phaser_InputHandler.scaleLayer = true;
Phaser_InputHandler.downPoint = new Phaser_Point();
Phaser_InputHandler.game = new Phaser_Game();
Phaser_InputHandler.pixelPerfectOver = true;
Phaser_InputHandler.snapX = 0;
Phaser_InputHandler.snapY = 0;
Phaser_InputHandler.enabled = true;
Phaser_InputHandler.snapOffsetX = 0;
Phaser_InputHandler.allowHorizontalDrag = true;
Phaser_InputHandler.draggable = true;
Phaser_InputHandler.snapOffsetY = 0;
Phaser_InputHandler.sprite = new Phaser_Sprite();
Phaser_InputHandler.dragStopBlocksInputUp = true;
Phaser_InputHandler.boundsSprite = new Phaser_Sprite();
Phaser_InputHandler.dragOffset = new Phaser_Point();
Phaser_InputHandler.pixelPerfectAlpha = 0;
Phaser_InputHandler.dragFromCenter = true;
Phaser_InputHandler.dragDistanceThreshold = 0;
Phaser_InputHandler.snapOnRelease = true;
Phaser_InputHandler.priorityID = 0;
Phaser_InputHandler.snapOffset = new Phaser_Point();
Phaser_InputHandler.snapOnDrag = true;
Phaser_InputHandler.isDragged = true;
Phaser_InputHandler.boundsRect = new Phaser_Rectangle();
Phaser_InputHandler.dragTimeThreshold = 0;
Phaser_InputHandler.pointerTimeUp = function (pointerId) { return new Number(); };
Phaser_InputHandler.enableDrag = function (lockCenter, bringToTop, pixelPerfect, alphaThreshold, boundsRect, boundsSprite) {};
Phaser_InputHandler.overDuration = function (pointerId) { return new Number(); };
Phaser_InputHandler.globalToLocalX = function (x) {};
Phaser_InputHandler.globalToLocalY = function (y) {};
Phaser_InputHandler.checkPixel = function (x, y, pointer) { return new Boolean(); };
Phaser_InputHandler.pointerOut = function (pointerId) { return new Boolean(); };
Phaser_InputHandler.disableDrag = function () {};
Phaser_InputHandler.isPixelPerfect = function () { return new Boolean(); };
Phaser_InputHandler.destroy = function () {};
Phaser_InputHandler.pointerTimeOut = function (pointerId) { return new Number(); };
Phaser_InputHandler.pointerDragged = function (pointerId) { return new Boolean(); };
Phaser_InputHandler.validForInput = function (highestID, highestRenderID, includePixelPerfect) { return new Boolean(); };
Phaser_InputHandler.pointerDown = function (pointerId) { return new Boolean(); };
Phaser_InputHandler.stop = function () {};
Phaser_InputHandler.enableSnap = function (snapX, snapY, onDrag, onRelease, snapOffsetX, snapOffsetY) {};
Phaser_InputHandler.startDrag = function (pointer) {};
Phaser_InputHandler.reset = function () {};
Phaser_InputHandler.checkPointerOver = function (pointer, fastTest) { return new Boolean(); };
Phaser_InputHandler.pointerTimeDown = function (pointerId) { return new Number(); };
Phaser_InputHandler.justOut = function (pointerId, delay) { return new Boolean(); };
Phaser_InputHandler.update = function (pointer) { return new Boolean(); };
Phaser_InputHandler.pointerTimeOver = function (pointerId) { return new Number(); };
Phaser_InputHandler.justOver = function (pointerId, delay) { return new Boolean(); };
Phaser_InputHandler.justReleased = function (pointerId, delay) { return new Boolean(); };
Phaser_InputHandler.checkBoundsSprite = function () {};
Phaser_InputHandler.justPressed = function (pointerId, delay) { return new Boolean(); };
Phaser_InputHandler.pointerOver = function (pointerId) { return new Boolean(); };
Phaser_InputHandler.checkBoundsRect = function () {};
Phaser_InputHandler.setDragLock = function (allowHorizontal, allowVertical) {};
Phaser_InputHandler.start = function (priority, useHandCursor) { return new Phaser_Sprite(); };
Phaser_InputHandler.downDuration = function (pointerId) { return new Number(); };
Phaser_InputHandler.pointerUp = function (pointerId) { return new Boolean(); };
Phaser_InputHandler.pointerX = function (pointerId) { return new Number(); };
Phaser_InputHandler.pointerY = function (pointerId) { return new Number(); };
Phaser_InputHandler.stopDrag = function (pointer) {};
Phaser_InputHandler.checkPointerDown = function (pointer, fastTest) { return new Boolean(); };
Phaser_InputHandler.disableSnap = function () {};

var Phaser_PointerMode = function () {};
Phaser_PointerMode.prototype = new Object();
Phaser_PointerMode.CONTACT = new Object();
Phaser_PointerMode.CURSOR = new Object();

var Phaser_Touch = function (game) {};
Phaser_Touch.prototype = new Object();
Phaser_Touch.game = new Phaser_Game();
Phaser_Touch.touchStartCallback = new Function();
Phaser_Touch.touchLeaveCallback = new Function();
Phaser_Touch.callbackContext = new Object();
Phaser_Touch.enabled = true;
Phaser_Touch.touchLockCallbacks = new Array();
Phaser_Touch.touchEnterCallback = new Function();
Phaser_Touch.touchMoveCallback = new Function();
Phaser_Touch.touchCancelCallback = new Function();
Phaser_Touch.touchEndCallback = new Function();
Phaser_Touch.event = new TouchEvent();
Phaser_Touch.preventDefault = true;
Phaser_Touch.onTouchStart = function (event) {};
Phaser_Touch.onTouchEnter = function (event) {};
Phaser_Touch.onTouchMove = function (event) {};
Phaser_Touch.start = function () {};
Phaser_Touch.consumeTouchMove = function () {};
Phaser_Touch.onTouchLeave = function (event) {};
Phaser_Touch.addTouchLockCallback = function (callback, context, onEnd) {};
Phaser_Touch.onTouchCancel = function (event) {};
Phaser_Touch.stop = function () {};
Phaser_Touch.removeTouchLockCallback = function (callback, context) { return new Boolean(); };
Phaser_Touch.onTouchEnd = function (event) {};

var Phaser_Timer = function (game, autoDestroy) {};
Phaser_Timer.prototype = new Object();
Phaser_Timer.HALF = 0;
Phaser_Timer.QUARTER = 0;
Phaser_Timer.MINUTE = 0;
Phaser_Timer.SECOND = 0;
Phaser_Timer.next = 0;
Phaser_Timer.game = new Phaser_Game();
Phaser_Timer.paused = true;
Phaser_Timer.running = true;
Phaser_Timer.elapsed = 0;
Phaser_Timer.duration = 0;
Phaser_Timer.seconds = 0;
Phaser_Timer.expired = true;
Phaser_Timer.nextTick = 0;
Phaser_Timer.events = new Array();
Phaser_Timer.autoDestroy = true;
Phaser_Timer.ms = 0;
Phaser_Timer.onComplete = new Phaser_Signal();
Phaser_Timer.length = 0;
Phaser_Timer.timeCap = 0;
Phaser_Timer.update = function (time) { return new Boolean(); };
Phaser_Timer.remove = function (event) {};
Phaser_Timer.removeAll = function () {};
Phaser_Timer.loop = function (delay, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.repeat = function (delay, repeatCount, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.order = function () {};
Phaser_Timer.add = function (delay, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.resume = function () {};
Phaser_Timer.clearPendingEvents = function () {};
Phaser_Timer.start = function (delay) {};
Phaser_Timer.destroy = function () {};
Phaser_Timer.pause = function () {};
Phaser_Timer.adjustEvents = function () {};
Phaser_Timer.stop = function (clearEvents) {};

var Phaser_AnimationParser = function () {};
Phaser_AnimationParser.prototype = new Object();
Phaser_AnimationParser.JSONDataPyxel = function (game, json) { return new Phaser_FrameData(); };
Phaser_AnimationParser.JSONData = function (game, json) { return new Phaser_FrameData(); };
Phaser_AnimationParser.XMLData = function (game, xml) { return new Phaser_FrameData(); };
Phaser_AnimationParser.spriteSheet = function (game, key, frameWidth, frameHeight, frameMax, margin, spacing) { return new Phaser_FrameData(); };
Phaser_AnimationParser.JSONDataHash = function (game, json) { return new Phaser_FrameData(); };

var Phaser_Line = function (x1, y1, x2, y2) {};
Phaser_Line.prototype = new Object();
Phaser_Line.normalX = 0;
Phaser_Line.normalY = 0;
Phaser_Line.perpSlope = 0;
Phaser_Line.type = 0;
Phaser_Line.top = 0;
Phaser_Line.angle = 0;
Phaser_Line.end = new Phaser_Point();
Phaser_Line.height = 0;
Phaser_Line.bottom = 0;
Phaser_Line.start = new Phaser_Point();
Phaser_Line.length = 0;
Phaser_Line.normalAngle = 0;
Phaser_Line.right = 0;
Phaser_Line.slope = 0;
Phaser_Line.left = 0;
Phaser_Line.x = 0;
Phaser_Line.width = 0;
Phaser_Line.y = 0;
Phaser_Line.rotate = function (angle, asDegrees) { return new Phaser_Line(); };
Phaser_Line.intersects = function (line, asSegment, result) { return new Phaser_Point(); };
Phaser_Line.coordinatesOnLine = function (stepRate, results) { return new Array(); };
Phaser_Line.random = function (out) { return new Phaser_Point(); };
Phaser_Line.reflect = function (line) { return new Number(); };
Phaser_Line.pointOnSegment = function (x, y) { return new Boolean(); };
Phaser_Line.intersectsRectangle = function (line, rect) { return new Boolean(); };
Phaser_Line.centerOn = function (x, y) { return new Phaser_Line(); };
Phaser_Line.midPoint = function (out) { return new Phaser_Point(); };
Phaser_Line.fromSprite = function (startSprite, endSprite, useCenter) { return new Phaser_Line(); };
Phaser_Line.fromAngle = function (x, y, angle, length) { return new Phaser_Line(); };
Phaser_Line.intersectsPoints = function (a, b, e, f, asSegment, result) { return new Phaser_Point(); };
Phaser_Line.pointOnLine = function (x, y) { return new Boolean(); };
Phaser_Line.rotateAround = function (x, y, angle, asDegrees) { return new Phaser_Line(); };
Phaser_Line.clone = function (output) { return new Phaser_Line(); };
Phaser_Line.setTo = function (x1, y1, x2, y2) { return new Phaser_Line(); };

var Phaser_Physics_P2_FixtureList = function (list) {};
Phaser_Physics_P2_FixtureList.prototype = new Object();
Phaser_Physics_P2_FixtureList.setSensor = function (value, fixtureKey) {};
Phaser_Physics_P2_FixtureList.flatten = function (array) {};
Phaser_Physics_P2_FixtureList.init = function () {};
Phaser_Physics_P2_FixtureList.setMask = function (bit, fixtureKey) {};
Phaser_Physics_P2_FixtureList.setCategory = function (bit, fixtureKey) {};
Phaser_Physics_P2_FixtureList.getGroup = function (groupID) {};
Phaser_Physics_P2_FixtureList.parse = function () {};
Phaser_Physics_P2_FixtureList.setMaterial = function (material, fixtureKey) {};
Phaser_Physics_P2_FixtureList.getFixtures = function (keys) {};
Phaser_Physics_P2_FixtureList.getFixtureByKey = function (key) {};

var Phaser_Keyboard = function (game) {};
Phaser_Keyboard.prototype = new Object();
Phaser_Keyboard.game = new Phaser_Game();
Phaser_Keyboard.onPressCallback = new Function();
Phaser_Keyboard.pressEvent = new Object();
Phaser_Keyboard.onUpCallback = new Function();
Phaser_Keyboard.enabled = true;
Phaser_Keyboard.lastKey = new Phaser_Key();
Phaser_Keyboard.event = new Object();
Phaser_Keyboard.callbackContext = new Object();
Phaser_Keyboard.onDownCallback = new Function();
Phaser_Keyboard.lastChar = "";
Phaser_Keyboard.createCursorKeys = function () { return new Object(); };
Phaser_Keyboard.update = function () {};
Phaser_Keyboard.addKey = function (keycode) { return new Phaser_Key(); };
Phaser_Keyboard.isDown = function (keycode) { return new Boolean(); };
Phaser_Keyboard.upDuration = function (keycode, duration) { return new Boolean(); };
Phaser_Keyboard.addKeyCapture = function (keycode) {};
Phaser_Keyboard.clearCaptures = function () {};
Phaser_Keyboard.removeKey = function (keycode) {};
Phaser_Keyboard.processKeyUp = function (event) {};
Phaser_Keyboard.addCallbacks = function (context, onDown, onUp, onPress) {};
Phaser_Keyboard.start = function () {};
Phaser_Keyboard.destroy = function () {};
Phaser_Keyboard.processKeyPress = function (event) {};
Phaser_Keyboard.downDuration = function (keycode, duration) { return new Boolean(); };
Phaser_Keyboard.addKeys = function (keys) { return new Object(); };
Phaser_Keyboard.removeKeyCapture = function (keycode) {};
Phaser_Keyboard.stop = function () {};
Phaser_Keyboard.reset = function (hard) {};
Phaser_Keyboard.processKeyDown = function (event) {};

var Phaser_Physics_P2_InversePointProxy = function (world, destination) {};
Phaser_Physics_P2_InversePointProxy.prototype = new Object();
Phaser_Physics_P2_InversePointProxy.x = 0;
Phaser_Physics_P2_InversePointProxy.y = 0;
Phaser_Physics_P2_InversePointProxy.mx = 0;
Phaser_Physics_P2_InversePointProxy.my = 0;

var Phaser_Tileset = function (name, firstgid, width, height, margin, spacing, properties) {};
Phaser_Tileset.prototype = new Object();
Phaser_Tileset.image = new Object();
Phaser_Tileset.columns = 0;
Phaser_Tileset.tileSpacing = 0;
Phaser_Tileset.firstgid = 0;
Phaser_Tileset.tileWidth = 0;
Phaser_Tileset.rows = 0;
Phaser_Tileset.tileMarge = 0;
Phaser_Tileset.total = 0;
Phaser_Tileset.name = "";
Phaser_Tileset.properties = new Object();
Phaser_Tileset.tileHeight = 0;
Phaser_Tileset.draw = function (context, x, y, index) {};
Phaser_Tileset.setSpacing = function (margin, spacing) {};
Phaser_Tileset.containsTileIndex = function () { return new Boolean(); };
Phaser_Tileset.setImage = function (image) {};

var Phaser_Easing_Circular = function () {};
Phaser_Easing_Circular.prototype = new Object();
Phaser_Easing_Circular.In = function (k) { return new Number(); };
Phaser_Easing_Circular.InOut = function (k) { return new Number(); };
Phaser_Easing_Circular.Out = function (k) { return new Number(); };

var Phaser_AnimationManager = function (sprite) {};
Phaser_AnimationManager.prototype = new Object();
Phaser_AnimationManager.frameData = new Phaser_FrameData();
Phaser_AnimationManager.game = new Phaser_Game();
Phaser_AnimationManager.updateIfVisible = true;
Phaser_AnimationManager.paused = true;
Phaser_AnimationManager.frameName = "";
Phaser_AnimationManager.currentAnim = new Phaser_Animation();
Phaser_AnimationManager.isLoaded = true;
Phaser_AnimationManager.frameTotal = 0;
Phaser_AnimationManager.sprite = new Phaser_Sprite();
Phaser_AnimationManager.currentFrame = new Phaser_Frame();
Phaser_AnimationManager.name = "";
Phaser_AnimationManager.frame = 0;
Phaser_AnimationManager.add = function (name, frames, frameRate, loop, useNumericIndex) { return new Phaser_Animation(); };
Phaser_AnimationManager.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_AnimationManager.next = function (quantity) {};
Phaser_AnimationManager.previous = function (quantity) {};
Phaser_AnimationManager.update = function () { return new Boolean(); };
Phaser_AnimationManager.destroy = function () {};
Phaser_AnimationManager.refreshFrame = function () {};
Phaser_AnimationManager.stop = function (name, resetFrame) {};
Phaser_AnimationManager.getAnimation = function (name) { return new Phaser_Animation(); };
Phaser_AnimationManager.validateFrames = function (frames, useNumericIndex) { return new Boolean(); };

var Phaser_SinglePad = function (game, padParent) {};
Phaser_SinglePad.prototype = new Object();
Phaser_SinglePad.game = new Phaser_Game();
Phaser_SinglePad.onUpCallback = new Function();
Phaser_SinglePad.deadZone = 0;
Phaser_SinglePad.index = 0;
Phaser_SinglePad.onFloatCallback = new Function();
Phaser_SinglePad.callbackContext = new Object();
Phaser_SinglePad.connected = true;
Phaser_SinglePad.onDownCallback = new Function();
Phaser_SinglePad.onDisconnectCallback = new Function();
Phaser_SinglePad.onConnectCallback = new Function();
Phaser_SinglePad.onAxisCallback = new Function();
Phaser_SinglePad.disconnect = function () {};
Phaser_SinglePad.buttonValue = function (buttonCode) { return new Number(); };
Phaser_SinglePad.axis = function (axisCode) { return new Number(); };
Phaser_SinglePad.isDown = function (buttonCode) { return new Boolean(); };
Phaser_SinglePad.getButton = function (buttonCode) { return new Phaser_DeviceButton(); };
Phaser_SinglePad.processButtonDown = function (buttonCode, value) {};
Phaser_SinglePad.isUp = function (buttonCode) { return new Boolean(); };
Phaser_SinglePad.justReleased = function (buttonCode, duration) { return new Boolean(); };
Phaser_SinglePad.connect = function (rawPad) {};
Phaser_SinglePad.justPressed = function (buttonCode, duration) { return new Boolean(); };
Phaser_SinglePad.addCallbacks = function (context, callbacks) {};
Phaser_SinglePad.processAxisChange = function (axisState) {};
Phaser_SinglePad.destroy = function () {};
Phaser_SinglePad.pollStatus = function () {};
Phaser_SinglePad.processButtonUp = function (buttonCode, value) {};
Phaser_SinglePad.processButtonFloat = function (buttonCode, value) {};
Phaser_SinglePad.reset = function () {};

var Phaser_Component_ScaleMinMax = function () {};
Phaser_Component_ScaleMinMax.prototype = new Object();
Phaser_Component_ScaleMinMax.transformCallbackContext = new Object();
Phaser_Component_ScaleMinMax.transformCallback = new Function();
Phaser_Component_ScaleMinMax.scaleMax = new Phaser_Point();
Phaser_Component_ScaleMinMax.scaleMin = new Phaser_Point();
Phaser_Component_ScaleMinMax.setScaleMinMax = function (minX, minY, maxX, maxY) {};

var WebGLGraphicsData = function () {};
WebGLGraphicsData.prototype = new Object();

var Phaser_Physics = function (game, physicsConfig) {};
Phaser_Physics.prototype = new Object();
Phaser_Physics.NINJA = 0;
Phaser_Physics.MATTERJS = 0;
Phaser_Physics.P2JS = 0;
Phaser_Physics.ARCADE = 0;
Phaser_Physics.BOX2D = 0;
Phaser_Physics.CHIPMUNK = 0;
Phaser_Physics.game = new Phaser_Game();
Phaser_Physics.p2 = new Phaser_Physics_P2();
Phaser_Physics.matter = new Phaser_Physics_Matter();
Phaser_Physics.chipmunk = new Phaser_Physics_Chipmunk();
Phaser_Physics.box2d = new Phaser_Physics_Box2D();
Phaser_Physics.arcade = new Phaser_Physics_Arcade();
Phaser_Physics.ninja = new Phaser_Physics_Ninja();
Phaser_Physics.config = new Object();
Phaser_Physics.update = function () {};
Phaser_Physics.Ninja = function (game) {};
Phaser_Physics.enable = function (object, system, debug) {};
Phaser_Physics.P2 = function (game, config) {};
Phaser_Physics.clear = function () {};
Phaser_Physics.parseConfig = function () {};
Phaser_Physics.destroy = function () {};
Phaser_Physics.Arcade = function (game) {};
Phaser_Physics.setBoundsToWorld = function (left, right, top, bottom, setCollisionGroup) {};
Phaser_Physics.setWorldMaterial = function (material, left, right, top, bottom) {};
Phaser_Physics.reset = function () {};
Phaser_Physics.startSystem = function (system) {};
Phaser_Physics.preUpdate = function () {};

var Phaser_Component_Delta = function () {};
Phaser_Component_Delta.prototype = new Object();
Phaser_Component_Delta.deltaZ = 0;
Phaser_Component_Delta.deltaX = 0;
Phaser_Component_Delta.deltaY = 0;

var Phaser_Component_Destroy = function () {};
Phaser_Component_Destroy.prototype = new Object();
Phaser_Component_Destroy.destroyPhase = true;
Phaser_Component_Destroy.destroy = function (destroyChildren, destroyTexture) {};

var Phaser_Physics_P2_CollisionGroup = function (bitmask) {};
Phaser_Physics_P2_CollisionGroup.prototype = new Object();
Phaser_Physics_P2_CollisionGroup.mask = 0;

var Phaser_ImageCollection = function (name, firstgid, width, height, margin, spacing, properties) {};
Phaser_ImageCollection.prototype = new Object();
Phaser_ImageCollection.imageWidth = 0;
Phaser_ImageCollection.imageSpacing = 0;
Phaser_ImageCollection.images = new Array();
Phaser_ImageCollection.total = 0;
Phaser_ImageCollection.name = "";
Phaser_ImageCollection.firstgid = 0;
Phaser_ImageCollection.imageMarge = 0;
Phaser_ImageCollection.imageHeight = 0;
Phaser_ImageCollection.properties = new Object();
Phaser_ImageCollection.addImage = function (gid, image) {};
Phaser_ImageCollection.containsImageIndex = function (imageIndex) { return new Boolean(); };

var Phaser_ArraySet = function (list) {};
Phaser_ArraySet.prototype = new Object();
Phaser_ArraySet.next = new Object();
Phaser_ArraySet.list = new Array();
Phaser_ArraySet.total = 0;
Phaser_ArraySet.position = 0;
Phaser_ArraySet.first = new Object();
Phaser_ArraySet.add = function (item) { return new Object(); };
Phaser_ArraySet.getIndex = function (item) { return new Number(); };
Phaser_ArraySet.getByKey = function (property, value) { return new Object(); };
Phaser_ArraySet.remove = function (item) { return new Object(); };
Phaser_ArraySet.callAll = function (key, parameter) {};
Phaser_ArraySet.removeAll = function (destroy) {};
Phaser_ArraySet.exists = function (item) { return new Boolean(); };
Phaser_ArraySet.reset = function () {};
Phaser_ArraySet.setAll = function (key, value) {};

var Phaser_Physics_P2_PrismaticConstraint = function (world, bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce) {};
Phaser_Physics_P2_PrismaticConstraint.prototype = new Object();
Phaser_Physics_P2_PrismaticConstraint.game = new Phaser_Game();
Phaser_Physics_P2_PrismaticConstraint.world = new Phaser_Physics_P2();

var Phaser_Component_FixedToCamera = function () {};
Phaser_Component_FixedToCamera.prototype = new Object();
Phaser_Component_FixedToCamera.cameraOffset = new Phaser_Point();
Phaser_Component_FixedToCamera.fixedToCamera = true;
Phaser_Component_FixedToCamera.postUpdate = function () {};

var Phaser_Particles_Arcade = function () {};
Phaser_Particles_Arcade.prototype = new Object();
Phaser_Particles_Arcade.Emitter = function (game, x, y, maxParticles) {};

var Phaser_TilemapParser = function () {};
Phaser_TilemapParser.prototype = new Object();
Phaser_TilemapParser.INSERT_NULL = true;
Phaser_TilemapParser.FLIPPED_VERTICALLY_FLAG = 0;
Phaser_TilemapParser.FLIPPED_DIAGONALLY_FLAG = 0;
Phaser_TilemapParser.FLIPPED_HORIZONTALLY_FLAG = 0;
Phaser_TilemapParser.getEmptyData = function () { return new Object(); };
Phaser_TilemapParser.parseJSON = function (json) { return new Object(); };
Phaser_TilemapParser.parse = function (game, key, tileWidth, tileHeight, width, height) { return new Object(); };
Phaser_TilemapParser.parseCSV = function (key, data, tileWidth, tileHeight) { return new Object(); };

var Phaser_LoaderParser = function () {};
Phaser_LoaderParser.prototype = new Object();
Phaser_LoaderParser.jsonBitmapFont = function (json, baseTexture, xSpacing, ySpacing) { return new Object(); };
Phaser_LoaderParser.bitmapFont = function (xml, baseTexture, xSpacing, ySpacing) { return new Object(); };
Phaser_LoaderParser.xmlBitmapFont = function (xml, baseTexture, xSpacing, ySpacing) { return new Object(); };

var Phaser_Matrix = function (a, b, c, d, tx, ty) {};
Phaser_Matrix.prototype = new Object();
Phaser_Matrix.a = 0;
Phaser_Matrix.b = 0;
Phaser_Matrix.c = 0;
Phaser_Matrix.d = 0;
Phaser_Matrix.tx = 0;
Phaser_Matrix.ty = 0;
Phaser_Matrix.type = 0;
Phaser_Matrix.rotate = function (angle) { return new Phaser_Matrix(); };
Phaser_Matrix.apply = function (pos, newPos) { return new Phaser_Point(); };
Phaser_Matrix.fromArray = function (array) { return new Phaser_Matrix(); };
Phaser_Matrix.scale = function (x, y) { return new Phaser_Matrix(); };
Phaser_Matrix.copyFrom = function (matrix) { return new Phaser_Matrix(); };
Phaser_Matrix.translate = function (x, y) { return new Phaser_Matrix(); };
Phaser_Matrix.copyTo = function (matrix) { return new Phaser_Matrix(); };
Phaser_Matrix.applyInverse = function (pos, newPos) { return new Phaser_Point(); };
Phaser_Matrix.identity = function () { return new Phaser_Matrix(); };
Phaser_Matrix.clone = function (output) { return new Phaser_Matrix(); };
Phaser_Matrix.toArray = function (transpose, array) { return new PIXI_Float32Array(); };
Phaser_Matrix.setTo = function (a, b, c, d, tx, ty) { return new Phaser_Matrix(); };
Phaser_Matrix.append = function (matrix) { return new Phaser_Matrix(); };

var Phaser_Gamepad = function (game) {};
Phaser_Gamepad.prototype = new Object();
Phaser_Gamepad.game = new Phaser_Game();
Phaser_Gamepad.onUpCallback = new Function();
Phaser_Gamepad.pad1 = new Phaser_SinglePad();
Phaser_Gamepad.padsConnected = 0;
Phaser_Gamepad.pad2 = new Phaser_SinglePad();
Phaser_Gamepad.enabled = true;
Phaser_Gamepad.onFloatCallback = new Function();
Phaser_Gamepad.active = true;
Phaser_Gamepad.callbackContext = new Object();
Phaser_Gamepad.onDownCallback = new Function();
Phaser_Gamepad.pad3 = new Phaser_SinglePad();
Phaser_Gamepad.onDisconnectCallback = new Function();
Phaser_Gamepad.pad4 = new Phaser_SinglePad();
Phaser_Gamepad.onConnectCallback = new Function();
Phaser_Gamepad.onAxisCallback = new Function();
Phaser_Gamepad.supported = true;
Phaser_Gamepad.update = function () {};
Phaser_Gamepad.isDown = function (buttonCode) { return new Boolean(); };
Phaser_Gamepad.setDeadZones = function () {};
Phaser_Gamepad.justPressed = function (buttonCode, duration) { return new Boolean(); };
Phaser_Gamepad.addCallbacks = function (context, callbacks) {};
Phaser_Gamepad.start = function () {};
Phaser_Gamepad.destroy = function () {};
Phaser_Gamepad.stop = function () {};
Phaser_Gamepad.reset = function () {};

var Phaser_TweenManager = function (game) {};
Phaser_TweenManager.prototype = new Object();
Phaser_TweenManager.game = new Phaser_Game();
Phaser_TweenManager.frameBased = true;
Phaser_TweenManager.add = function (tween) { return new Phaser_Tween(); };
Phaser_TweenManager.isTweening = function (object) { return new Boolean(); };
Phaser_TweenManager.pauseAll = function () {};
Phaser_TweenManager.removeAll = function () {};
Phaser_TweenManager.getAll = function () { return new Array(); };
Phaser_TweenManager.resumeAll = function () {};
Phaser_TweenManager.create = function (object) { return new Phaser_Tween(); };
Phaser_TweenManager.update = function () { return new Boolean(); };
Phaser_TweenManager.removeFrom = function (obj, children) {};
Phaser_TweenManager.remove = function (tween) {};

var Phaser_BitmapData = function (game, key, width, height, skipPool) {};
Phaser_BitmapData.prototype = new Object();
Phaser_BitmapData.data = new Uint8ClampedArray();
Phaser_BitmapData.imageData = new ImageData();
Phaser_BitmapData.type = 0;
Phaser_BitmapData.textureFrame = new Phaser_Frame();
Phaser_BitmapData.context = new CanvasRenderingContext2D();
Phaser_BitmapData.height = 0;
Phaser_BitmapData.baseTexture = new PIXI_BaseTexture();
Phaser_BitmapData.canvas = new HTMLCanvasElement();
Phaser_BitmapData.ctx = new CanvasRenderingContext2D();
Phaser_BitmapData.pixels = new Uint32Array();
Phaser_BitmapData.disableTextureUpload = true;
Phaser_BitmapData.frameData = new Phaser_FrameData();
Phaser_BitmapData.game = new Phaser_Game();
Phaser_BitmapData.key = "";
Phaser_BitmapData.dirty = true;
Phaser_BitmapData.texture = new PIXI_Texture();
Phaser_BitmapData.width = 0;
Phaser_BitmapData.smoothProperty = "";
Phaser_BitmapData.generateTexture = function (key) { return new PIXI_Texture(); };
Phaser_BitmapData.blendSaturation = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.shadow = function (color, blur, x, y) { return new Phaser_BitmapData(); };
Phaser_BitmapData.textureLine = function (line, image, repeat) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendSourceOut = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendHue = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.getPixelRGB = function (x, y, out, hsl, hsv) { return new Object(); };
Phaser_BitmapData.getBounds = function (rect) { return new Phaser_Rectangle(); };
Phaser_BitmapData.addToWorld = function (x, y, anchorX, anchorY, scaleX, scaleY) { return new Phaser_Image(); };
Phaser_BitmapData.moveV = function (distance, wrap) { return new Phaser_BitmapData(); };
Phaser_BitmapData.getPixels = function (rect) { return new ImageData(); };
Phaser_BitmapData.blendLighten = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.text = function (text, x, y, font, color, shadow) { return new Phaser_BitmapData(); };
Phaser_BitmapData.getTransform = function (translateX, translateY, scaleX, scaleY, skewX, skewY) { return new Object(); };
Phaser_BitmapData.blendSourceIn = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendScreen = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendDarken = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.add = function (object) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendXor = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendSoftLight = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.moveH = function (distance, wrap) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendLuminosity = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendDestinationAtop = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.getPixel = function (x, y, out) { return new Object(); };
Phaser_BitmapData.destroy = function () {};
Phaser_BitmapData.cls = function () {};
Phaser_BitmapData.fill = function (r, g, b, a) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendDestinationOver = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendDifference = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.processPixel = function (callback, callbackContext, x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.copyRect = function (source, area, x, y, alpha, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.extract = function (destination, r, g, b, a, resize, r2, g2, b2) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendColorBurn = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendSourceAtop = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.circle = function (x, y, radius, fillStyle) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendSourceOver = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendOverlay = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.setPixel = function (x, y, red, green, blue, immediate) { return new Phaser_BitmapData(); };
Phaser_BitmapData.drawFull = function (parent, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.line = function (x1, y1, x2, y2, color, width) { return new Phaser_BitmapData(); };
Phaser_BitmapData.update = function (x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.setPixel32 = function (x, y, red, green, blue, alpha, immediate) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendDestinationOut = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendExclusion = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendHardLight = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.copyTransform = function (source, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.getPixel32 = function (x, y) { return new Number(); };
Phaser_BitmapData.rect = function (x, y, width, height, fillStyle) { return new Phaser_BitmapData(); };
Phaser_BitmapData.load = function (source) { return new Phaser_BitmapData(); };
Phaser_BitmapData.copy = function (source, x, y, width, height, tx, ty, newWidth, newHeight, rotate, anchorX, anchorY, scaleX, scaleY, alpha, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendColor = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.render = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendDestinationIn = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.move = function (x, y, wrap) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendMultiply = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendReset = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.clear = function (x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.draw = function (source, x, y, width, height, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.shiftHSL = function (h, s, l, region) { return new Phaser_BitmapData(); };
Phaser_BitmapData.alphaMask = function (source, mask, sourceRect, maskRect) { return new Phaser_BitmapData(); };
Phaser_BitmapData.drawGroup = function (group, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.processPixelRGB = function (callback, callbackContext, x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.replaceRGB = function (r1, g1, b1, a1, r2, g2, b2, a2, region) { return new Phaser_BitmapData(); };
Phaser_BitmapData.resize = function (width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendAdd = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.blendColorDodge = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.setHSL = function (h, s, l, region) { return new Phaser_BitmapData(); };
Phaser_BitmapData.getFirstPixel = function (direction) { return new Object(); };

var Phaser_Easing_Sinusoidal = function () {};
Phaser_Easing_Sinusoidal.prototype = new Object();
Phaser_Easing_Sinusoidal.In = function (k) { return new Number(); };
Phaser_Easing_Sinusoidal.InOut = function (k) { return new Number(); };
Phaser_Easing_Sinusoidal.Out = function (k) { return new Number(); };

var Phaser_Group = function (game, parent, name, addToStage, enableBody, physicsBodyType) {};
Phaser_Group.prototype = new PIXI.DisplayObjectContainer();
Phaser_Group.SORT_ASCENDING = 0;
Phaser_Group.SORT_DESCENDING = 0;
Phaser_Group.RETURN_NONE = 0;
Phaser_Group.RETURN_CHILD = 0;
Phaser_Group.RETURN_TOTAL = 0;
Phaser_Group.parent = new PIXI_DisplayObjectContainer();
Phaser_Group.centerY = 0;
Phaser_Group.centerX = 0;
Phaser_Group.type = 0;
Phaser_Group.enableBody = true;
Phaser_Group.children = [new PIXI_DisplayObject()];
Phaser_Group.enableBodyDebug = true;
Phaser_Group.pivot = new PIXI_Point();
Phaser_Group.physicsType = 0;
Phaser_Group.cursorIndex = 0;
Phaser_Group.physicsSortDirection = 0;
Phaser_Group.worldPosition = new PIXI_Point();
Phaser_Group.left = 0;
Phaser_Group.hash = new Array();
Phaser_Group.filterArea = new PIXI_Rectangle();
Phaser_Group.worldScale = new PIXI_Point();
Phaser_Group.alive = true;
Phaser_Group.onChildInputUp = new Phaser_Signal();
Phaser_Group.worldAlpha = 0;
Phaser_Group.top = 0;
Phaser_Group.angle = 0;
Phaser_Group.onDestroy = new Phaser_Signal();
Phaser_Group.right = 0;
Phaser_Group.ignoreChildInput = true;
Phaser_Group.onChildInputDown = new Phaser_Signal();
Phaser_Group.stage = new PIXI_Stage();
Phaser_Group.ignoreDestroy = true;
Phaser_Group.x = 0;
Phaser_Group.exists = true;
Phaser_Group.y = 0;
Phaser_Group.z = 0;
Phaser_Group.physicsBodyType = 0;
Phaser_Group.onChildInputOut = new Phaser_Signal();
Phaser_Group.worldTransform = new PIXI_Matrix();
Phaser_Group.fixedToCamera = true;
Phaser_Group.visible = true;
Phaser_Group.inputEnableChildren = true;
Phaser_Group.cameraOffset = new Phaser_Point();
Phaser_Group.bottom = 0;
Phaser_Group.name = "";
Phaser_Group.position = new PIXI_Point();
Phaser_Group.classType = new Object();
Phaser_Group.cursor = new PIXI_DisplayObject();
Phaser_Group.worldRotation = 0;
Phaser_Group.game = new Phaser_Game();
Phaser_Group.onChildInputOver = new Phaser_Signal();
Phaser_Group.renderable = true;
Phaser_Group.scale = new PIXI_Point();
Phaser_Group.worldVisible = true;
Phaser_Group.total = 0;
Phaser_Group.alpha = 0;
Phaser_Group.cacheAsBitmap = true;
Phaser_Group.mask = new PIXI_Graphics();
Phaser_Group.rotation = 0;
Phaser_Group.length = 0;
Phaser_Group.filters = new Array();
Phaser_Group.pendingDestroy = true;
Phaser_Group.hitArea = new Phaser_Rectangle();
Phaser_Group.xy = function (index, x, y) {};
Phaser_Group.descendingSortHandler = function (a, b) {};
Phaser_Group.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Group.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_Group.removeAll = function (destroy, silent, destroyTexture) {};
Phaser_Group.customSort = function (sortHandler, context) {};
Phaser_Group.bringToTop = function (child) { return new Object(); };
Phaser_Group.moveUp = function (child) { return new Object(); };
Phaser_Group.alignTo = function (parent, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_Group.postUpdate = function () {};
Phaser_Group.destroy = function (destroyChildren, soft) {};
Phaser_Group.getFirstDead = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Group.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_Group.forEachAlive = function (callback, callbackContext, args) {};
Phaser_Group.resetCursor = function (index) { return new Object(); };
Phaser_Group.addMultiple = function (children, silent) { return new Array(); };
Phaser_Group.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_Group.preUpdate = function () {};
Phaser_Group.addToHash = function (child) { return new Boolean(); };
Phaser_Group.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_Group.callbackFromArray = function (child, callback, length) {};
Phaser_Group.getClosestTo = function (object, callback, callbackContext) { return new Object(); };
Phaser_Group.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.getByName = function (name) { return new Object(); };
Phaser_Group.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_Group.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_Group.getFirstExists = function (exists, createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Group.reverse = function () {};
Phaser_Group.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_Group.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.alignIn = function (container, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_Group.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Group.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Group.getIndex = function (child) { return new Number(); };
Phaser_Group.getBottom = function () { return new Object(); };
Phaser_Group.replace = function (oldChild, newChild) { return new Object(); };
Phaser_Group.align = function (rows, columns, cellWidth, cellHeight, position, offset) {};
Phaser_Group.resetChild = function (child, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Group.getRandom = function (startIndex, length) { return new Object(); };
Phaser_Group.forEachExists = function (callback, callbackContext, args) {};
Phaser_Group.getTop = function () { return new Object(); };
Phaser_Group.create = function (x, y, key, frame, exists, index) { return new PIXI_DisplayObject(); };
Phaser_Group.countDead = function () { return new Number(); };
Phaser_Group.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.add = function (child, silent, index) { return new PIXI_DisplayObject(); };
Phaser_Group.swap = function (child1, child2) {};
Phaser_Group.getFurthestFrom = function (object, callback, callbackContext) { return new Object(); };
Phaser_Group.sort = function (key, order) {};
Phaser_Group.moveDown = function (child) { return new Object(); };
Phaser_Group.hasProperty = function (child, key) { return new Boolean(); };
Phaser_Group.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Group.updateZ = function () {};
Phaser_Group.ascendingSortHandler = function (a, b) {};
Phaser_Group.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_Group.removeFromHash = function (child) { return new Boolean(); };
Phaser_Group.next = function () { return new Object(); };
Phaser_Group.forEachDead = function (callback, callbackContext, args) {};
Phaser_Group.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Group.update = function () {};
Phaser_Group.countLiving = function () { return new Number(); };
Phaser_Group.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_Group.callAll = function (method, context, args) {};
Phaser_Group.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Group.createMultiple = function (quantity, key, frame, exists) { return new Array(); };
Phaser_Group.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Group.callAllExists = function (callback, existsValue, parameter) {};
Phaser_Group.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_Group.previous = function () { return new Object(); };
Phaser_Group.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_Group.sendToBack = function (child) { return new Object(); };
Phaser_Group.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_Group.getFirstAlive = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };

var Phaser_Physics_P2_ContactMaterial = function (materialA, materialB, options) {};
Phaser_Physics_P2_ContactMaterial.prototype = new Object();

var Phaser_Component_Angle = function () {};
Phaser_Component_Angle.prototype = new Object();
Phaser_Component_Angle.angle = 0;

var WebGLGraphics = function () {};
WebGLGraphics.prototype = new Object();

var Phaser_Physics_P2 = function (game, config) {};
Phaser_Physics_P2.prototype = new Object();
Phaser_Physics_P2.onConstraintAdded = new Phaser_Signal();
Phaser_Physics_P2.onSpringRemoved = new Phaser_Signal();
Phaser_Physics_P2.everythingCollisionGroup = new Phaser_Physics_P2_CollisionGroup();
Phaser_Physics_P2.applyDamping = true;
Phaser_Physics_P2.onSpringAdded = new Phaser_Signal();
Phaser_Physics_P2.sleepMode = 0;
Phaser_Physics_P2.boundsCollidesWith = new Array();
Phaser_Physics_P2.solveConstraints = true;
Phaser_Physics_P2.world = new p2_World();
Phaser_Physics_P2.walls = new Object();
Phaser_Physics_P2.onEndContact = new Phaser_Signal();
Phaser_Physics_P2.onContactMaterialRemoved = new Phaser_Signal();
Phaser_Physics_P2.onBodyAdded = new Phaser_Signal();
Phaser_Physics_P2.onBeginContact = new Phaser_Signal();
Phaser_Physics_P2.config = new Object();
Phaser_Physics_P2.paused = true;
Phaser_Physics_P2.onConstraintRemoved = new Phaser_Signal();
Phaser_Physics_P2.frameRate = 0;
Phaser_Physics_P2.onBodyRemoved = new Phaser_Signal();
Phaser_Physics_P2.applySpringForces = true;
Phaser_Physics_P2.callbackContext = new Object();
Phaser_Physics_P2.useElapsedTime = true;
Phaser_Physics_P2.boundsCollisionGroup = new Phaser_Physics_P2_CollisionGroup();
Phaser_Physics_P2.materials = new Array();
Phaser_Physics_P2.nothingCollisionGroup = new Phaser_Physics_P2_CollisionGroup();
Phaser_Physics_P2.applyGravity = true;
Phaser_Physics_P2.game = new Phaser_Game();
Phaser_Physics_P2.total = 0;
Phaser_Physics_P2.emitImpactEvent = true;
Phaser_Physics_P2.postBroadphaseCallback = new Function();
Phaser_Physics_P2.contactMaterial = new p2_ContactMaterial();
Phaser_Physics_P2.collisionGroups = new Array();
Phaser_Physics_P2.friction = 0;
Phaser_Physics_P2.onContactMaterialAdded = new Phaser_Signal();
Phaser_Physics_P2.restitution = 0;
Phaser_Physics_P2.gravity = new Phaser_Physics_P2_InversePointProxy();
Phaser_Physics_P2.time = true;
Phaser_Physics_P2.getSprings = function () { return new Array(); };
Phaser_Physics_P2.getConstraints = function () { return new Array(); };
Phaser_Physics_P2.convertTilemap = function (map, layer, addToWorld, optimize) { return new Array(); };
Phaser_Physics_P2.enableBody = function (object, debug) {};
Phaser_Physics_P2.enable = function (object, debug, children) {};
Phaser_Physics_P2.FixtureList = function (list) {};
Phaser_Physics_P2.removeBodyNextStep = function (body) {};
Phaser_Physics_P2.updateBoundsCollisionGroup = function (setCollisionGroup) {};
Phaser_Physics_P2.destroy = function () {};
Phaser_Physics_P2.createBody = function (x, y, mass, addToWorld, options, options_optimalDecomp, options_skipSimpleCheck, options_removeCollinearPoints, points) { return new Phaser_Physics_P2_Body(); };
Phaser_Physics_P2.getBodies = function () { return new Array(); };
Phaser_Physics_P2.Spring = function (world, bodyA, bodyB, restLength, stiffness, damping, worldA, worldB, localA, localB) {};
Phaser_Physics_P2.BodyDebug = function (game, body, settings) {};
Phaser_Physics_P2.removeBody = function (body) { return new Phaser_Physics_P2_Body(); };
Phaser_Physics_P2.mpx = function (v) { return new Number(); };
Phaser_Physics_P2.createGearConstraint = function (bodyA, bodyB, angle, ratio) { return new Phaser_Physics_P2_GearConstraint(); };
Phaser_Physics_P2.GearConstraint = function (world, bodyA, bodyB, angle, ratio) {};
Phaser_Physics_P2.reset = function () {};
Phaser_Physics_P2.addContactMaterial = function (material) { return new Phaser_Physics_P2_ContactMaterial(); };
Phaser_Physics_P2.preUpdate = function () {};
Phaser_Physics_P2.clearTilemapLayerBodies = function (map, layer) {};
Phaser_Physics_P2.RevoluteConstraint = function (world, bodyA, pivotA, bodyB, pivotB, maxForce, worldPivot) {};
Phaser_Physics_P2.removeSpring = function (spring) { return new Phaser_Physics_P2_Spring(); };
Phaser_Physics_P2.resume = function () {};
Phaser_Physics_P2.addBody = function (body) { return new Boolean(); };
Phaser_Physics_P2.pxm = function (v) { return new Number(); };
Phaser_Physics_P2.getBody = function (object) { return new p2_Body(); };
Phaser_Physics_P2.ContactMaterial = function (materialA, materialB, options) {};
Phaser_Physics_P2.convertCollisionObjects = function (map, layer, addToWorld) { return new Array(); };
Phaser_Physics_P2.setBounds = function (x, y, width, height, left, right, top, bottom, setCollisionGroup) {};
Phaser_Physics_P2.InversePointProxy = function (world, destination) {};
Phaser_Physics_P2.createSpring = function (bodyA, bodyB, restLength, stiffness, damping, worldA, worldB, localA, localB) { return new Phaser_Physics_P2_Spring(); };
Phaser_Physics_P2.createParticle = function (x, y, mass, addToWorld, options, options_optimalDecomp, options_skipSimpleCheck, options_removeCollinearPoints, points) {};
Phaser_Physics_P2.addConstraint = function (constraint) { return new Phaser_Physics_P2_Constraint(); };
Phaser_Physics_P2.pxmi = function (v) { return new Number(); };
Phaser_Physics_P2.createMaterial = function (name, body) { return new Phaser_Physics_P2_Material(); };
Phaser_Physics_P2.createContactMaterial = function (materialA, materialB, options) { return new Phaser_Physics_P2_ContactMaterial(); };
Phaser_Physics_P2.CollisionGroup = function (bitmask) {};
Phaser_Physics_P2.PrismaticConstraint = function (world, bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce) {};
Phaser_Physics_P2.PointProxy = function (world, destination) {};
Phaser_Physics_P2.setPostBroadphaseCallback = function (callback, context) {};
Phaser_Physics_P2.pause = function () {};
Phaser_Physics_P2.RotationalSpring = function (world, bodyA, bodyB, restAngle, stiffness, damping) {};
Phaser_Physics_P2.createCollisionGroup = function (object) {};
Phaser_Physics_P2.getContactMaterial = function (materialA, materialB) { return new Phaser_Physics_P2_ContactMaterial(); };
Phaser_Physics_P2.createRevoluteConstraint = function (bodyA, pivotA, bodyB, pivotB, maxForce, worldPivot) { return new Phaser_Physics_P2_RevoluteConstraint(); };
Phaser_Physics_P2.DistanceConstraint = function (world, bodyA, bodyB, distance, localAnchorA, localAnchorB, maxForce) {};
Phaser_Physics_P2.update = function () {};
Phaser_Physics_P2.setMaterial = function (material, bodies) {};
Phaser_Physics_P2.toJSON = function () { return new Object(); };
Phaser_Physics_P2.endContactHandler = function (event) {};
Phaser_Physics_P2.addSpring = function (spring) { return new Phaser_Physics_P2_Spring(); };
Phaser_Physics_P2.removeConstraint = function (constraint) { return new Phaser_Physics_P2_Constraint(); };
Phaser_Physics_P2.Body = function (game, sprite, x, y, mass) {};
Phaser_Physics_P2.setImpactEvents = function (state) {};
Phaser_Physics_P2.createDistanceConstraint = function (bodyA, bodyB, distance, localAnchorA, localAnchorB, maxForce) { return new Phaser_Physics_P2_DistanceConstraint(); };
Phaser_Physics_P2.LockConstraint = function (world, bodyA, bodyB, offset, angle, maxForce) {};
Phaser_Physics_P2.createPrismaticConstraint = function (bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce) { return new Phaser_Physics_P2_PrismaticConstraint(); };
Phaser_Physics_P2.mpxi = function (v) { return new Number(); };
Phaser_Physics_P2.clear = function () {};
Phaser_Physics_P2.Material = function (name) {};
Phaser_Physics_P2.createRotationalSpring = function (bodyA, bodyB, restAngle, stiffness, damping) { return new Phaser_Physics_P2_RotationalSpring(); };
Phaser_Physics_P2.createLockConstraint = function (bodyA, bodyB, offset, angle, maxForce) { return new Phaser_Physics_P2_LockConstraint(); };
Phaser_Physics_P2.beginContactHandler = function (event) {};
Phaser_Physics_P2.hitTest = function (worldPoint, bodies, precision, filterStatic) { return new Array(); };
Phaser_Physics_P2.removeContactMaterial = function (material) { return new Phaser_Physics_P2_ContactMaterial(); };

var Phaser_Component_InWorld = function () {};
Phaser_Component_InWorld.prototype = new Object();
Phaser_Component_InWorld.outOfBoundsKill = true;
Phaser_Component_InWorld.outOfCameraBoundsKill = true;
Phaser_Component_InWorld.checkWorldBounds = true;
Phaser_Component_InWorld.inWorld = true;
Phaser_Component_InWorld.preUpdate = function () {};

var Phaser_Input = function (game) {};
Phaser_Input.prototype = new Object();
Phaser_Input.TOUCH_OVERRIDES_MOUSE = 0;
Phaser_Input.MOUSE_TOUCH_COMBINE = 0;
Phaser_Input.MAX_POINTERS = 0;
Phaser_Input.MOUSE_OVERRIDES_TOUCH = 0;
Phaser_Input.pollRate = 0;
Phaser_Input.recordPointerHistory = true;
Phaser_Input.activePointer = new Phaser_Pointer();
Phaser_Input.tapRate = 0;
Phaser_Input.resetLocked = true;
Phaser_Input.onTap = new Phaser_Signal();
Phaser_Input.multiInputOverride = 0;
Phaser_Input.hitCanvas = new HTMLCanvasElement();
Phaser_Input.mouse = new Phaser_Mouse();
Phaser_Input.mousePointer = new Phaser_Pointer();
Phaser_Input.moveCallbacks = new Array();
Phaser_Input.recordRate = 0;
Phaser_Input.pointers = new Array();
Phaser_Input.recordLimit = 0;
Phaser_Input.onHold = new Phaser_Signal();
Phaser_Input.touch = new Phaser_Touch();
Phaser_Input.maxPointers = 0;
Phaser_Input.gamepad = new Phaser_Gamepad();
Phaser_Input.totalInactivePointers = 0;
Phaser_Input.onDown = new Phaser_Signal();
Phaser_Input.position = new Phaser_Point();
Phaser_Input.circle = new Phaser_Circle();
Phaser_Input.minPriorityID = 0;
Phaser_Input.mspointer = new Phaser_MSPointer();
Phaser_Input.pollLocked = true;
Phaser_Input.game = new Phaser_Game();
Phaser_Input.hitContext = new CanvasRenderingContext2D();
Phaser_Input.justReleasedRate = 0;
Phaser_Input.justPressedRate = 0;
Phaser_Input.scale = new Phaser_Point();
Phaser_Input.enabled = true;
Phaser_Input.speed = new Phaser_Point();
Phaser_Input.pointer5 = new Phaser_Pointer();
Phaser_Input.pointer6 = new Phaser_Pointer();
Phaser_Input.pointer7 = new Phaser_Pointer();
Phaser_Input.pointer8 = new Phaser_Pointer();
Phaser_Input.pointer9 = new Phaser_Pointer();
Phaser_Input.pointer10 = new Phaser_Pointer();
Phaser_Input.pointer1 = new Phaser_Pointer();
Phaser_Input.pointer2 = new Phaser_Pointer();
Phaser_Input.pointer3 = new Phaser_Pointer();
Phaser_Input.pointer4 = new Phaser_Pointer();
Phaser_Input.keyboard = new Phaser_Keyboard();
Phaser_Input.doubleTapRate = 0;
Phaser_Input.worldX = 0;
Phaser_Input.worldY = 0;
Phaser_Input.totalActivePointers = new integers();
Phaser_Input.onUp = new Phaser_Signal();
Phaser_Input.interactiveItems = new Phaser_ArraySet();
Phaser_Input.x = 0;
Phaser_Input.y = 0;
Phaser_Input.holdRate = 0;
Phaser_Input.addPointer = function () { return new Phaser_Pointer(); };
Phaser_Input.addMoveCallback = function (callback, context) {};
Phaser_Input.getPointerFromIdentifier = function (identifier) { return new Phaser_Pointer(); };
Phaser_Input.destroy = function () {};
Phaser_Input.getPointerFromId = function (pointerId) { return new Phaser_Pointer(); };
Phaser_Input.reset = function (hard) {};
Phaser_Input.updatePointer = function (event) { return new Phaser_Pointer(); };
Phaser_Input.getLocalPosition = function (displayObject, pointer) { return new Phaser_Point(); };
Phaser_Input.update = function () {};
Phaser_Input.resetSpeed = function (x, y) {};
Phaser_Input.stopPointer = function (event) { return new Phaser_Pointer(); };
Phaser_Input.deleteMoveCallback = function (callback, context) {};
Phaser_Input.setInteractiveCandidateHandler = function (callback, context) {};
Phaser_Input.boot = function () {};
Phaser_Input.startPointer = function (event) { return new Phaser_Pointer(); };
Phaser_Input.getPointer = function (isActive) { return new Phaser_Pointer(); };
Phaser_Input.hitTest = function (displayObject, pointer, localPoint) {};

var Phaser_TimerEvent = function (timer, delay, tick, repeatCount, loop, callback, callbackContext, arguments) {};
Phaser_TimerEvent.prototype = new Object();
Phaser_TimerEvent.timer = new Phaser_Timer();
Phaser_TimerEvent.delay = 0;
Phaser_TimerEvent.loop = true;
Phaser_TimerEvent.callback = new Function();
Phaser_TimerEvent.callbackContext = new Object();
Phaser_TimerEvent.arguments = new Array();
Phaser_TimerEvent.tick = 0;
Phaser_TimerEvent.pendingDelete = true;
Phaser_TimerEvent.repeatCount = 0;

var Phaser_Component_Smoothed = function () {};
Phaser_Component_Smoothed.prototype = new Object();
Phaser_Component_Smoothed.smoothed = true;

var Phaser_Events = function (sprite) {};
Phaser_Events.prototype = new Object();
Phaser_Events.parent = new Phaser_Sprite();
Phaser_Events.onDestroy = new Phaser_Signal();
Phaser_Events.onAnimationComplete = new Phaser_Signal();
Phaser_Events.onAddedToGroup = new Phaser_Signal();
Phaser_Events.onDragUpdate = new Phaser_Signal();
Phaser_Events.onRemovedFromWorld = new Phaser_Signal();
Phaser_Events.onRevived = new Phaser_Signal();
Phaser_Events.onEnterBounds = new Phaser_Signal();
Phaser_Events.onInputOut = new Phaser_Signal();
Phaser_Events.onInputDown = new Phaser_Signal();
Phaser_Events.onInputUp = new Phaser_Signal();
Phaser_Events.onOutOfBounds = new Phaser_Signal();
Phaser_Events.onAnimationLoop = new Phaser_Signal();
Phaser_Events.onRemovedFromGroup = new Phaser_Signal();
Phaser_Events.onKilled = new Phaser_Signal();
Phaser_Events.onInputOver = new Phaser_Signal();
Phaser_Events.onDragStop = new Phaser_Signal();
Phaser_Events.onDragStart = new Phaser_Signal();
Phaser_Events.onAnimationStart = new Phaser_Signal();
Phaser_Events.destroy = function () {};

var Phaser_Component_InputEnabled = function () {};
Phaser_Component_InputEnabled.prototype = new Object();
Phaser_Component_InputEnabled.input = new Phaser_InputHandler();
Phaser_Component_InputEnabled.inputEnabled = true;

var Phaser_Easing_Cubic = function () {};
Phaser_Easing_Cubic.prototype = new Object();
Phaser_Easing_Cubic.In = function (k) { return new Number(); };
Phaser_Easing_Cubic.InOut = function (k) { return new Number(); };
Phaser_Easing_Cubic.Out = function (k) { return new Number(); };

var Phaser_Tile = function (layer, index, x, y, width, height) {};
Phaser_Tile.prototype = new Object();
Phaser_Tile.flipped = true;
Phaser_Tile.collideUp = true;
Phaser_Tile.collideLeft = true;
Phaser_Tile.layer = new Object();
Phaser_Tile.faceRight = true;
Phaser_Tile.faceLeft = true;
Phaser_Tile.top = 0;
Phaser_Tile.scanned = true;
Phaser_Tile.alpha = 0;
Phaser_Tile.collisionCallback = new Function();
Phaser_Tile.faceTop = true;
Phaser_Tile.height = 0;
Phaser_Tile.collides = true;
Phaser_Tile.faceBottom = true;
Phaser_Tile.bottom = 0;
Phaser_Tile.rotation = 0;
Phaser_Tile.canCollide = true;
Phaser_Tile.index = 0;
Phaser_Tile.collideDown = true;
Phaser_Tile.right = 0;
Phaser_Tile.collisionCallbackContext = new Object();
Phaser_Tile.collideRight = true;
Phaser_Tile.left = 0;
Phaser_Tile.x = 0;
Phaser_Tile.width = 0;
Phaser_Tile.y = 0;
Phaser_Tile.properties = new Object();
Phaser_Tile.intersects = function (x, y, right, bottom) {};
Phaser_Tile.resetCollision = function () {};
Phaser_Tile.copy = function (tile) {};
Phaser_Tile.setCollisionCallback = function (callback, context) {};
Phaser_Tile.destroy = function () {};
Phaser_Tile.setCollision = function (left, right, up, down) {};
Phaser_Tile.isInteresting = function (collides, faces) { return new Boolean(); };
Phaser_Tile.containsPoint = function (x, y) { return new Boolean(); };

var Phaser_SignalBinding = function (signal, listener, isOnce, listenerContext, priority, args) {};
Phaser_SignalBinding.prototype = new Object();
Phaser_SignalBinding.context = new Object();
Phaser_SignalBinding.callCount = 0;
Phaser_SignalBinding.active = true;
Phaser_SignalBinding.params = new Array();
Phaser_SignalBinding.getSignal = function () { return new Phaser_Signal(); };
Phaser_SignalBinding.isBound = function () { return new Boolean(); };
Phaser_SignalBinding.detach = function () { return new Function(); };
Phaser_SignalBinding.toString = function () { return new String(); };
Phaser_SignalBinding.execute = function (paramsArr) { return new Object(); };
Phaser_SignalBinding.isOnce = function () { return new Boolean(); };
Phaser_SignalBinding.getListener = function () { return new Function(); };

var Phaser_Tilemap = function (game, key, tileWidth, tileHeight, width, height) {};
Phaser_Tilemap.prototype = new Object();
Phaser_Tilemap.WEST = 0;
Phaser_Tilemap.NORTH = 0;
Phaser_Tilemap.SOUTH = 0;
Phaser_Tilemap.TILED_JSON = 0;
Phaser_Tilemap.EAST = 0;
Phaser_Tilemap.CSV = 0;
Phaser_Tilemap.objects = new Array();
Phaser_Tilemap.tiles = new Array();
Phaser_Tilemap.layers = new Array();
Phaser_Tilemap.height = 0;
Phaser_Tilemap.currentLayer = 0;
Phaser_Tilemap.collideIndexes = new Array();
Phaser_Tilemap.images = new Array();
Phaser_Tilemap.format = 0;
Phaser_Tilemap.version = 0;
Phaser_Tilemap.debugMap = new Array();
Phaser_Tilemap.collision = new Array();
Phaser_Tilemap.tileHeight = 0;
Phaser_Tilemap.game = new Phaser_Game();
Phaser_Tilemap.widthInPixels = 0;
Phaser_Tilemap.imagecollections = new Array();
Phaser_Tilemap.layer = 0;
Phaser_Tilemap.heightInPixels = 0;
Phaser_Tilemap.key = "";
Phaser_Tilemap.orientation = "";
Phaser_Tilemap.tileWidth = 0;
Phaser_Tilemap.width = 0;
Phaser_Tilemap.tilesets = new Array();
Phaser_Tilemap.properties = new Object();
Phaser_Tilemap.createFromTiles = function (tiles, replacements, key, layer, group, properties) { return new Number(); };
Phaser_Tilemap.getIndex = function (location, name) { return new Number(); };
Phaser_Tilemap.getTileLeft = function (layer, x, y) {};
Phaser_Tilemap.createBlankLayer = function (name, width, height, tileWidth, tileHeight, group) { return new Phaser_TilemapLayer(); };
Phaser_Tilemap.replace = function (source, dest, x, y, width, height, layer) {};
Phaser_Tilemap.setTileLocationCallback = function (x, y, width, height, callback, callbackContext, layer) {};
Phaser_Tilemap.create = function (name, width, height, tileWidth, tileHeight, group) { return new Phaser_TilemapLayer(); };
Phaser_Tilemap.putTileWorldXY = function (tile, x, y, tileWidth, tileHeight, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.getTile = function (x, y, layer, nonNull) { return new Phaser_Tile(); };
Phaser_Tilemap.getTileRight = function (layer, x, y) {};
Phaser_Tilemap.getTileWorldXY = function (x, y, tileWidth, tileHeight, layer, nonNull) { return new Phaser_Tile(); };
Phaser_Tilemap.createFromObjects = function (name, gid, key, frame, exists, autoCull, group, CustomClass, adjustY) {};
Phaser_Tilemap.getImageIndex = function (name) { return new Number(); };
Phaser_Tilemap.removeTileWorldXY = function (x, y, tileWidth, tileHeight, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.swap = function (tileA, tileB, x, y, width, height, layer) {};
Phaser_Tilemap.addTilesetImage = function (tileset, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid) { return new Phaser_Tileset(); };
Phaser_Tilemap.getLayer = function (layer) { return new Number(); };
Phaser_Tilemap.removeTile = function (x, y, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.destroy = function () {};
Phaser_Tilemap.fill = function (index, x, y, width, height, layer) {};
Phaser_Tilemap.setPreventRecalculate = function (value) {};
Phaser_Tilemap.setTileIndexCallback = function (indexes, callback, callbackContext, layer) {};
Phaser_Tilemap.calculateFaces = function (layer) {};
Phaser_Tilemap.setCollision = function (indexes, collides, layer, recalculate) {};
Phaser_Tilemap.createLayer = function (layer, width, height, group, pixiTest) { return new Phaser_TilemapLayer(); };
Phaser_Tilemap.removeAllLayers = function () {};
Phaser_Tilemap.putTile = function (tile, x, y, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.setLayer = function (layer) {};
Phaser_Tilemap.setCollisionByIndex = function (index, collides, layer, recalculate) {};
Phaser_Tilemap.paste = function (x, y, tileblock, layer) {};
Phaser_Tilemap.random = function (x, y, width, height, layer) {};
Phaser_Tilemap.getTilesetIndex = function (name) { return new Number(); };
Phaser_Tilemap.setCollisionBetween = function (start, stop, collides, layer, recalculate) {};
Phaser_Tilemap.setCollisionByExclusion = function (indexes, collides, layer, recalculate) {};
Phaser_Tilemap.getLayerIndex = function (name) { return new Number(); };
Phaser_Tilemap.setTileSize = function (tileWidth, tileHeight) {};
Phaser_Tilemap.copy = function (x, y, width, height, layer) { return new Array(); };
Phaser_Tilemap.dump = function () {};
Phaser_Tilemap.getTileAbove = function (layer, x, y) {};
Phaser_Tilemap.hasTile = function (x, y, layer) { return new Boolean(); };
Phaser_Tilemap.forEach = function (callback, context, x, y, width, height, layer) {};
Phaser_Tilemap.searchTileIndex = function (index, skip, reverse, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.getTileBelow = function (layer, x, y) {};
Phaser_Tilemap.shuffle = function (x, y, width, height, layer) {};

var Phaser_Physics_P2_RevoluteConstraint = function (world, bodyA, pivotA, bodyB, pivotB, maxForce, worldPivot) {};
Phaser_Physics_P2_RevoluteConstraint.prototype = new Object();
Phaser_Physics_P2_RevoluteConstraint.game = new Phaser_Game();
Phaser_Physics_P2_RevoluteConstraint.world = new Phaser_Physics_P2();

var Phaser_Physics_Ninja_Circle = function (body, x, y, radius) {};
Phaser_Physics_Ninja_Circle.prototype = new Object();
Phaser_Physics_Ninja_Circle.oldpos = new Phaser_Point();
Phaser_Physics_Ninja_Circle.circleTileProjections = new Object();
Phaser_Physics_Ninja_Circle.pos = new Phaser_Point();
Phaser_Physics_Ninja_Circle.radius = 0;
Phaser_Physics_Ninja_Circle.height = 0;
Phaser_Physics_Ninja_Circle.velocity = new Phaser_Point();
Phaser_Physics_Ninja_Circle.system = new Phaser_Physics_Ninja_Body();
Phaser_Physics_Ninja_Circle.width = 0;
Phaser_Physics_Ninja_Circle.xw = 0;
Phaser_Physics_Ninja_Circle.resolveCircleTile = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.projCircle_Convex = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.projCircle_67DegB = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.collideWorldBounds = function () {};
Phaser_Physics_Ninja_Circle.projCircle_45Deg = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.render = function (context, xOffset, yOffset, color, filled) {};
Phaser_Physics_Ninja_Circle.projCircle_Full = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.projCircle_22DegS = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.projCircle_Concave = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.destroy = function () {};
Phaser_Physics_Ninja_Circle.collideCircleVsTile = function (t) { return new Boolean(); };
Phaser_Physics_Ninja_Circle.integrate = function () {};
Phaser_Physics_Ninja_Circle.reportCollisionVsWorld = function (px, py, dx, dy, obj) {};
Phaser_Physics_Ninja_Circle.projCircle_22DegB = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.projCircle_67DegS = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.projCircle_Half = function (x, y, oH, oV, obj, t) { return new Number(); };

var Phaser_SpriteBatch = function (game, parent, name, addToStage) {};
Phaser_SpriteBatch.prototype = new Phaser.Group();
Phaser_SpriteBatch.SORT_ASCENDING = 0;
Phaser_SpriteBatch.SORT_DESCENDING = 0;
Phaser_SpriteBatch.RETURN_NONE = 0;
Phaser_SpriteBatch.RETURN_CHILD = 0;
Phaser_SpriteBatch.RETURN_TOTAL = 0;
Phaser_SpriteBatch.parent = new PIXI_DisplayObjectContainer();
Phaser_SpriteBatch.centerY = 0;
Phaser_SpriteBatch.centerX = 0;
Phaser_SpriteBatch.type = 0;
Phaser_SpriteBatch.enableBody = true;
Phaser_SpriteBatch.children = [new PIXI_DisplayObject()];
Phaser_SpriteBatch.enableBodyDebug = true;
Phaser_SpriteBatch.pivot = new PIXI_Point();
Phaser_SpriteBatch.physicsType = 0;
Phaser_SpriteBatch.cursorIndex = 0;
Phaser_SpriteBatch.physicsSortDirection = 0;
Phaser_SpriteBatch.worldPosition = new PIXI_Point();
Phaser_SpriteBatch.left = 0;
Phaser_SpriteBatch.hash = new Array();
Phaser_SpriteBatch.filterArea = new PIXI_Rectangle();
Phaser_SpriteBatch.worldScale = new PIXI_Point();
Phaser_SpriteBatch.alive = true;
Phaser_SpriteBatch.onChildInputUp = new Phaser_Signal();
Phaser_SpriteBatch.worldAlpha = 0;
Phaser_SpriteBatch.top = 0;
Phaser_SpriteBatch.angle = 0;
Phaser_SpriteBatch.onDestroy = new Phaser_Signal();
Phaser_SpriteBatch.right = 0;
Phaser_SpriteBatch.ignoreChildInput = true;
Phaser_SpriteBatch.onChildInputDown = new Phaser_Signal();
Phaser_SpriteBatch.stage = new PIXI_Stage();
Phaser_SpriteBatch.ignoreDestroy = true;
Phaser_SpriteBatch.x = 0;
Phaser_SpriteBatch.exists = true;
Phaser_SpriteBatch.y = 0;
Phaser_SpriteBatch.z = 0;
Phaser_SpriteBatch.physicsBodyType = 0;
Phaser_SpriteBatch.onChildInputOut = new Phaser_Signal();
Phaser_SpriteBatch.worldTransform = new PIXI_Matrix();
Phaser_SpriteBatch.fixedToCamera = true;
Phaser_SpriteBatch.visible = true;
Phaser_SpriteBatch.inputEnableChildren = true;
Phaser_SpriteBatch.cameraOffset = new Phaser_Point();
Phaser_SpriteBatch.bottom = 0;
Phaser_SpriteBatch.name = "";
Phaser_SpriteBatch.position = new PIXI_Point();
Phaser_SpriteBatch.classType = new Object();
Phaser_SpriteBatch.cursor = new PIXI_DisplayObject();
Phaser_SpriteBatch.worldRotation = 0;
Phaser_SpriteBatch.game = new Phaser_Game();
Phaser_SpriteBatch.onChildInputOver = new Phaser_Signal();
Phaser_SpriteBatch.renderable = true;
Phaser_SpriteBatch.scale = new PIXI_Point();
Phaser_SpriteBatch.worldVisible = true;
Phaser_SpriteBatch.total = 0;
Phaser_SpriteBatch.alpha = 0;
Phaser_SpriteBatch.cacheAsBitmap = true;
Phaser_SpriteBatch.mask = new PIXI_Graphics();
Phaser_SpriteBatch.rotation = 0;
Phaser_SpriteBatch.length = 0;
Phaser_SpriteBatch.filters = new Array();
Phaser_SpriteBatch.pendingDestroy = true;
Phaser_SpriteBatch.hitArea = new Phaser_Rectangle();
Phaser_SpriteBatch.xy = function (index, x, y) {};
Phaser_SpriteBatch.descendingSortHandler = function (a, b) {};
Phaser_SpriteBatch.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_SpriteBatch.removeAll = function (destroy, silent, destroyTexture) {};
Phaser_SpriteBatch.customSort = function (sortHandler, context) {};
Phaser_SpriteBatch.bringToTop = function (child) { return new Object(); };
Phaser_SpriteBatch.moveUp = function (child) { return new Object(); };
Phaser_SpriteBatch.alignTo = function (parent, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_SpriteBatch.postUpdate = function () {};
Phaser_SpriteBatch.destroy = function (destroyChildren, soft) {};
Phaser_SpriteBatch.getFirstDead = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.forEachAlive = function (callback, callbackContext, args) {};
Phaser_SpriteBatch.resetCursor = function (index) { return new Object(); };
Phaser_SpriteBatch.addMultiple = function (children, silent) { return new Array(); };
Phaser_SpriteBatch.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_SpriteBatch.preUpdate = function () {};
Phaser_SpriteBatch.addToHash = function (child) { return new Boolean(); };
Phaser_SpriteBatch.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_SpriteBatch.callbackFromArray = function (child, callback, length) {};
Phaser_SpriteBatch.getClosestTo = function (object, callback, callbackContext) { return new Object(); };
Phaser_SpriteBatch.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.getByName = function (name) { return new Object(); };
Phaser_SpriteBatch.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_SpriteBatch.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_SpriteBatch.getFirstExists = function (exists, createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.reverse = function () {};
Phaser_SpriteBatch.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_SpriteBatch.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.alignIn = function (container, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_SpriteBatch.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_SpriteBatch.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_SpriteBatch.getIndex = function (child) { return new Number(); };
Phaser_SpriteBatch.getBottom = function () { return new Object(); };
Phaser_SpriteBatch.replace = function (oldChild, newChild) { return new Object(); };
Phaser_SpriteBatch.align = function (rows, columns, cellWidth, cellHeight, position, offset) {};
Phaser_SpriteBatch.resetChild = function (child, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.getRandom = function (startIndex, length) { return new Object(); };
Phaser_SpriteBatch.forEachExists = function (callback, callbackContext, args) {};
Phaser_SpriteBatch.getTop = function () { return new Object(); };
Phaser_SpriteBatch.create = function (x, y, key, frame, exists, index) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.countDead = function () { return new Number(); };
Phaser_SpriteBatch.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.add = function (child, silent, index) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.swap = function (child1, child2) {};
Phaser_SpriteBatch.getFurthestFrom = function (object, callback, callbackContext) { return new Object(); };
Phaser_SpriteBatch.sort = function (key, order) {};
Phaser_SpriteBatch.moveDown = function (child) { return new Object(); };
Phaser_SpriteBatch.hasProperty = function (child, key) { return new Boolean(); };
Phaser_SpriteBatch.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_SpriteBatch.updateZ = function () {};
Phaser_SpriteBatch.ascendingSortHandler = function (a, b) {};
Phaser_SpriteBatch.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_SpriteBatch.removeFromHash = function (child) { return new Boolean(); };
Phaser_SpriteBatch.next = function () { return new Object(); };
Phaser_SpriteBatch.forEachDead = function (callback, callbackContext, args) {};
Phaser_SpriteBatch.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.update = function () {};
Phaser_SpriteBatch.countLiving = function () { return new Number(); };
Phaser_SpriteBatch.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_SpriteBatch.callAll = function (method, context, args) {};
Phaser_SpriteBatch.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_SpriteBatch.createMultiple = function (quantity, key, frame, exists) { return new Array(); };
Phaser_SpriteBatch.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_SpriteBatch.callAllExists = function (callback, existsValue, parameter) {};
Phaser_SpriteBatch.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_SpriteBatch.previous = function () { return new Object(); };
Phaser_SpriteBatch.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_SpriteBatch.sendToBack = function (child) { return new Object(); };
Phaser_SpriteBatch.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.getFirstAlive = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };

var Phaser_Physics_P2_DistanceConstraint = function (world, bodyA, bodyB, distance, localAnchorA, localAnchorB, maxForce) {};
Phaser_Physics_P2_DistanceConstraint.prototype = new Object();
Phaser_Physics_P2_DistanceConstraint.game = new Phaser_Game();
Phaser_Physics_P2_DistanceConstraint.world = new Phaser_Physics_P2();

var Phaser_Physics_P2_LockConstraint = function (world, bodyA, bodyB, offset, angle, maxForce) {};
Phaser_Physics_P2_LockConstraint.prototype = new Object();
Phaser_Physics_P2_LockConstraint.game = new Phaser_Game();
Phaser_Physics_P2_LockConstraint.world = new Phaser_Physics_P2();

var Phaser_Physics_P2_Material = function (name) {};
Phaser_Physics_P2_Material.prototype = new Object();
Phaser_Physics_P2_Material.name = "";

var Phaser_Component_Health = function () {};
Phaser_Component_Health.prototype = new Object();
Phaser_Component_Health.health = 0;
Phaser_Component_Health.maxHealth = 0;
Phaser_Component_Health.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Component_Health.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Component_Health.setHealth = function (amount) { return new Phaser_Sprite(); };

var Phaser_Create = function (game) {};
Phaser_Create.prototype = new Object();
Phaser_Create.PALETTE_JMP = 0;
Phaser_Create.PALETTE_CGA = 0;
Phaser_Create.PALETTE_ARNE = 0;
Phaser_Create.PALETTE_C64 = 0;
Phaser_Create.PALETTE_JAPANESE_MACHINE = 0;
Phaser_Create.game = new Phaser_Game();
Phaser_Create.canvas = new HTMLCanvasElement();
Phaser_Create.bmd = new Phaser_BitmapData();
Phaser_Create.context = new CanvasRenderingContext2D();
Phaser_Create.palettes = new Array();
Phaser_Create.texture = function (key, data, pixelWidth, pixelHeight, palette) { return new PIXI_Texture(); };
Phaser_Create.grid = function (key, width, height, cellWidth, cellHeight, color) { return new PIXI_Texture(); };

var Phaser_Component_Bounds = function () {};
Phaser_Component_Bounds.prototype = new Object();
Phaser_Component_Bounds.offsetX = 0;
Phaser_Component_Bounds.centerY = 0;
Phaser_Component_Bounds.offsetY = 0;
Phaser_Component_Bounds.top = 0;
Phaser_Component_Bounds.centerX = 0;
Phaser_Component_Bounds.left = 0;
Phaser_Component_Bounds.bottom = 0;
Phaser_Component_Bounds.right = 0;
Phaser_Component_Bounds.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Component_Bounds.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };

var Phaser_DeviceButton = function (parent, buttonCode) {};
Phaser_DeviceButton.prototype = new Object();
Phaser_DeviceButton.parent = new Phaser_Pointer();
Phaser_DeviceButton.repeats = 0;
Phaser_DeviceButton.game = new Phaser_Game();
Phaser_DeviceButton.timeUp = 0;
Phaser_DeviceButton.ctrlKey = true;
Phaser_DeviceButton.buttonCode = 0;
Phaser_DeviceButton.onFloat = new Phaser_Signal();
Phaser_DeviceButton.timeDown = 0;
Phaser_DeviceButton.isDown = true;
Phaser_DeviceButton.onUp = new Phaser_Signal();
Phaser_DeviceButton.duration = 0;
Phaser_DeviceButton.shiftKey = true;
Phaser_DeviceButton.isUp = true;
Phaser_DeviceButton.onDown = new Phaser_Signal();
Phaser_DeviceButton.altKey = true;
Phaser_DeviceButton.event = new Object();
Phaser_DeviceButton.value = 0;
Phaser_DeviceButton.start = function (event, value) {};
Phaser_DeviceButton.destroy = function () {};
Phaser_DeviceButton.stop = function (event, value) {};
Phaser_DeviceButton.padFloat = function (value) {};
Phaser_DeviceButton.reset = function () {};
Phaser_DeviceButton.justReleased = function (duration) { return new Boolean(); };
Phaser_DeviceButton.justPressed = function (duration) { return new Boolean(); };

var Phaser_Physics_Arcade_Body = function (sprite) {};
Phaser_Physics_Arcade_Body.prototype = new Object();
Phaser_Physics_Arcade_Body.angularDrag = 0;
Phaser_Physics_Arcade_Body.isCircle = true;
Phaser_Physics_Arcade_Body.newVelocity = new Phaser_Point();
Phaser_Physics_Arcade_Body.bounce = new Phaser_Point();
Phaser_Physics_Arcade_Body.stopVelocityOnCollide = true;
Phaser_Physics_Arcade_Body.prev = new Phaser_Point();
Phaser_Physics_Arcade_Body.type = 0;
Phaser_Physics_Arcade_Body.acceleration = new Phaser_Point();
Phaser_Physics_Arcade_Body.angularAcceleration = 0;
Phaser_Physics_Arcade_Body.maxAngular = 0;
Phaser_Physics_Arcade_Body.sourceWidth = 0;
Phaser_Physics_Arcade_Body.enable = true;
Phaser_Physics_Arcade_Body.onWorldBounds = new Phaser_Signal();
Phaser_Physics_Arcade_Body.isMoving = true;
Phaser_Physics_Arcade_Body.halfWidth = 0;
Phaser_Physics_Arcade_Body.collideWorldBounds = true;
Phaser_Physics_Arcade_Body.drag = new Phaser_Point();
Phaser_Physics_Arcade_Body.radius = 0;
Phaser_Physics_Arcade_Body.tilePadding = new Phaser_Point();
Phaser_Physics_Arcade_Body.customSeparateY = true;
Phaser_Physics_Arcade_Body.height = 0;
Phaser_Physics_Arcade_Body.customSeparateX = true;
Phaser_Physics_Arcade_Body.onMoveComplete = new Phaser_Signal();
Phaser_Physics_Arcade_Body.syncBounds = true;
Phaser_Physics_Arcade_Body.offset = new Phaser_Point();
Phaser_Physics_Arcade_Body.checkCollision = new Object();
Phaser_Physics_Arcade_Body.movementCallback = new Function();
Phaser_Physics_Arcade_Body.halfHeight = 0;
Phaser_Physics_Arcade_Body.bottom = 0;
Phaser_Physics_Arcade_Body.sourceHeight = 0;
Phaser_Physics_Arcade_Body.deltaMax = new Phaser_Point();
Phaser_Physics_Arcade_Body.wasTouching = new Object();
Phaser_Physics_Arcade_Body.left = 0;
Phaser_Physics_Arcade_Body.maxVelocity = new Phaser_Point();
Phaser_Physics_Arcade_Body.position = new Phaser_Point();
Phaser_Physics_Arcade_Body.worldBounce = new Phaser_Point();
Phaser_Physics_Arcade_Body.skipQuadTree = true;
Phaser_Physics_Arcade_Body.game = new Phaser_Game();
Phaser_Physics_Arcade_Body.movementCallbackContext = new Object();
Phaser_Physics_Arcade_Body.immovable = true;
Phaser_Physics_Arcade_Body.mass = 0;
Phaser_Physics_Arcade_Body.facing = 0;
Phaser_Physics_Arcade_Body.allowRotation = true;
Phaser_Physics_Arcade_Body.allowGravity = true;
Phaser_Physics_Arcade_Body.speed = 0;
Phaser_Physics_Arcade_Body.blocked = new Object();
Phaser_Physics_Arcade_Body.top = 0;
Phaser_Physics_Arcade_Body.sprite = new Phaser_Sprite();
Phaser_Physics_Arcade_Body.angle = 0;
Phaser_Physics_Arcade_Body.embedded = true;
Phaser_Physics_Arcade_Body.dirty = true;
Phaser_Physics_Arcade_Body.onCollide = new Phaser_Signal();
Phaser_Physics_Arcade_Body.overlapX = 0;
Phaser_Physics_Arcade_Body.touching = new Object();
Phaser_Physics_Arcade_Body.overlapY = 0;
Phaser_Physics_Arcade_Body.rotation = 0;
Phaser_Physics_Arcade_Body.center = new Phaser_Point();
Phaser_Physics_Arcade_Body.velocity = new Phaser_Point();
Phaser_Physics_Arcade_Body.right = 0;
Phaser_Physics_Arcade_Body.friction = new Phaser_Point();
Phaser_Physics_Arcade_Body.angularVelocity = 0;
Phaser_Physics_Arcade_Body.onOverlap = new Phaser_Signal();
Phaser_Physics_Arcade_Body.preRotation = 0;
Phaser_Physics_Arcade_Body.gravity = new Phaser_Point();
Phaser_Physics_Arcade_Body.moves = true;
Phaser_Physics_Arcade_Body.width = 0;
Phaser_Physics_Arcade_Body.x = 0;
Phaser_Physics_Arcade_Body.y = 0;
Phaser_Physics_Arcade_Body.overlapR = 0;
Phaser_Physics_Arcade_Body.getBounds = function (obj) { return new Object(); };
Phaser_Physics_Arcade_Body.postUpdate = function () {};
Phaser_Physics_Arcade_Body.destroy = function () {};
Phaser_Physics_Arcade_Body.stopMovement = function (stopVelocity) {};
Phaser_Physics_Arcade_Body.updateMovement = function () {};
Phaser_Physics_Arcade_Body.reset = function (x, y) {};
Phaser_Physics_Arcade_Body.preUpdate = function () {};
Phaser_Physics_Arcade_Body.renderBodyInfo = function (body, x, y, color) {};
Phaser_Physics_Arcade_Body.deltaZ = function () { return new Number(); };
Phaser_Physics_Arcade_Body.deltaX = function () { return new Number(); };
Phaser_Physics_Arcade_Body.deltaY = function () { return new Number(); };
Phaser_Physics_Arcade_Body.setSize = function (width, height, offsetX, offsetY) {};
Phaser_Physics_Arcade_Body.moveFrom = function (duration, speed, direction) { return new Boolean(); };
Phaser_Physics_Arcade_Body.checkWorldBounds = function () { return new Boolean(); };
Phaser_Physics_Arcade_Body.onCeiling = function () { return new Boolean(); };
Phaser_Physics_Arcade_Body.render = function (context, body, color, filled) {};
Phaser_Physics_Arcade_Body.deltaAbsY = function () { return new Number(); };
Phaser_Physics_Arcade_Body.deltaAbsX = function () { return new Number(); };
Phaser_Physics_Arcade_Body.onWall = function () { return new Boolean(); };
Phaser_Physics_Arcade_Body.setCircle = function (radius, offsetX, offsetY) {};
Phaser_Physics_Arcade_Body.updateBounds = function () {};
Phaser_Physics_Arcade_Body.onFloor = function () { return new Boolean(); };
Phaser_Physics_Arcade_Body.hitTest = function (x, y) { return new Boolean(); };
Phaser_Physics_Arcade_Body.moveTo = function (duration, distance, direction) { return new Boolean(); };

var Phaser_Component_Overlap = function () {};
Phaser_Component_Overlap.prototype = new Object();
Phaser_Component_Overlap.overlap = function (displayObject) { return new Boolean(); };

var Phaser_LinkedList = function () {};
Phaser_LinkedList.prototype = new Object();
Phaser_LinkedList.next = new Object();
Phaser_LinkedList.total = 0;
Phaser_LinkedList.last = new Object();
Phaser_LinkedList.prev = new Object();
Phaser_LinkedList.first = new Object();
Phaser_LinkedList.add = function (item) { return new Object(); };
Phaser_LinkedList.callAll = function (callback) {};
Phaser_LinkedList.reset = function () {};
Phaser_LinkedList.remove = function (item) {};

var Phaser_Physics_Ninja_AABB = function (body, x, y, width, height) {};
Phaser_Physics_Ninja_AABB.prototype = new Object();
Phaser_Physics_Ninja_AABB.aabbTileProjections = new Object();
Phaser_Physics_Ninja_AABB.oldpos = new Phaser_Point();
Phaser_Physics_Ninja_AABB.pos = new Phaser_Point();
Phaser_Physics_Ninja_AABB.height = 0;
Phaser_Physics_Ninja_AABB.velocity = new Phaser_Point();
Phaser_Physics_Ninja_AABB.system = new Phaser_Physics_Ninja_Body();
Phaser_Physics_Ninja_AABB.width = 0;
Phaser_Physics_Ninja_AABB.xw = 0;
Phaser_Physics_Ninja_AABB.projAABB_22DegS = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.projAABB_Concave = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.collideAABBVsAABB = function (aabb) {};
Phaser_Physics_Ninja_AABB.reportCollisionVsBody = function (px, py, dx, dy, obj) {};
Phaser_Physics_Ninja_AABB.collideAABBVsTile = function (tile) {};
Phaser_Physics_Ninja_AABB.projAABB_Full = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.projAABB_Convex = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.projAABB_67DegB = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.projAABB_45Deg = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.collideWorldBounds = function () {};
Phaser_Physics_Ninja_AABB.render = function (context, xOffset, yOffset, color, filled) {};
Phaser_Physics_Ninja_AABB.resolveTile = function (x, y, body, tile) { return new Boolean(); };
Phaser_Physics_Ninja_AABB.destroy = function () {};
Phaser_Physics_Ninja_AABB.reverse = function () {};
Phaser_Physics_Ninja_AABB.integrate = function () {};
Phaser_Physics_Ninja_AABB.projAABB_Half = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.reportCollisionVsWorld = function (px, py, dx, dy) {};
Phaser_Physics_Ninja_AABB.projAABB_22DegB = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.projAABB_67DegS = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.reportCollision = function (px, py, dx, dy) {};

var Phaser_Component_Animation = function () {};
Phaser_Component_Animation.prototype = new Object();
Phaser_Component_Animation.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };

var Phaser_Stage = function (game) {};
Phaser_Stage.prototype = new PIXI.DisplayObjectContainer();
Phaser_Stage.worldRotation = 0;
Phaser_Stage.filterArea = new PIXI_Rectangle();
Phaser_Stage.parent = new PIXI_DisplayObjectContainer();
Phaser_Stage.game = new Phaser_Game();
Phaser_Stage.renderable = true;
Phaser_Stage.worldScale = new PIXI_Point();
Phaser_Stage.currentRenderOrderID = 0;
Phaser_Stage.scale = new PIXI_Point();
Phaser_Stage.worldAlpha = 0;
Phaser_Stage.worldVisible = true;
Phaser_Stage.children = [new PIXI_DisplayObject()];
Phaser_Stage.alpha = 0;
Phaser_Stage.pivot = new PIXI_Point();
Phaser_Stage.worldTransform = new PIXI_Matrix();
Phaser_Stage.cacheAsBitmap = true;
Phaser_Stage.mask = new PIXI_Graphics();
Phaser_Stage.backgroundColor = 0;
Phaser_Stage.visible = true;
Phaser_Stage.smoothed = true;
Phaser_Stage.rotation = 0;
Phaser_Stage.filters = new Array();
Phaser_Stage.ignoreChildInput = true;
Phaser_Stage.disableVisibilityChange = true;
Phaser_Stage.worldPosition = new PIXI_Point();
Phaser_Stage.stage = new PIXI_Stage();
Phaser_Stage.hitArea = new Phaser_Rectangle();
Phaser_Stage.name = "";
Phaser_Stage.x = 0;
Phaser_Stage.exists = true;
Phaser_Stage.y = 0;
Phaser_Stage.position = new PIXI_Point();
Phaser_Stage.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Stage.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Stage.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Stage.update = function () {};
Phaser_Stage.checkVisibility = function () {};
Phaser_Stage.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Stage.setBackgroundColor = function (color) {};
Phaser_Stage.postUpdate = function () {};
Phaser_Stage.parseConfig = function (config) {};
Phaser_Stage.destroy = function () {};
Phaser_Stage.visibilityChange = function (event) {};
Phaser_Stage.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Stage.updateTransform = function () {};
Phaser_Stage.preUpdate = function () {};

var Phaser_AudioSprite = function (game, key) {};
Phaser_AudioSprite.prototype = new Object();
Phaser_AudioSprite.game = new Phaser_Game();
Phaser_AudioSprite.sounds = new Object();
Phaser_AudioSprite.config = new Object();
Phaser_AudioSprite.autoplayKey = "";
Phaser_AudioSprite.key = "";
Phaser_AudioSprite.autoplay = true;
Phaser_AudioSprite.play = function (marker, volume) { return new Phaser_Sound(); };
Phaser_AudioSprite.stop = function (marker) {};
Phaser_AudioSprite.get = function (marker) { return new Phaser_Sound(); };

var Phaser_Component_Core = function () {};
Phaser_Component_Core.prototype = new Object();
Phaser_Component_Core.previousRotation = 0;
Phaser_Component_Core.game = new Phaser_Game();
Phaser_Component_Core.components = new Object();
Phaser_Component_Core.debug = true;
Phaser_Component_Core.data = new Object();
Phaser_Component_Core.previousPosition = new Phaser_Point();
Phaser_Component_Core.pendingDestroy = true;
Phaser_Component_Core.world = new Phaser_Point();
Phaser_Component_Core.animations = new Phaser_AnimationManager();
Phaser_Component_Core.name = "";
Phaser_Component_Core.exists = true;
Phaser_Component_Core.z = 0;
Phaser_Component_Core.renderOrderID = 0;
Phaser_Component_Core.fresh = true;
Phaser_Component_Core.events = new Phaser_Events();
Phaser_Component_Core.key = "";
Phaser_Component_Core.init = function () {};
Phaser_Component_Core.postUpdate = function () {};
Phaser_Component_Core.update = function () {};
Phaser_Component_Core.install = function () {};

var Phaser_Physics_Ninja_Body = function (system, sprite, type, id, radius, x, y, width, height) {};
Phaser_Physics_Ninja_Body.prototype = new Object();
Phaser_Physics_Ninja_Body.game = new Phaser_Game();
Phaser_Physics_Ninja_Body.gravityScale = 0;
Phaser_Physics_Ninja_Body.bounce = 0;
Phaser_Physics_Ninja_Body.immovable = true;
Phaser_Physics_Ninja_Body.facing = 0;
Phaser_Physics_Ninja_Body.type = 0;
Phaser_Physics_Ninja_Body.aabb = new Phaser_Physics_Ninja_AABB();
Phaser_Physics_Ninja_Body.speed = 0;
Phaser_Physics_Ninja_Body.sprite = new Phaser_Sprite();
Phaser_Physics_Ninja_Body.tile = new Phaser_Physics_Ninja_Tile();
Phaser_Physics_Ninja_Body.angle = 0;
Phaser_Physics_Ninja_Body.collideWorldBounds = true;
Phaser_Physics_Ninja_Body.drag = 0;
Phaser_Physics_Ninja_Body.height = 0;
Phaser_Physics_Ninja_Body.shape = new Object();
Phaser_Physics_Ninja_Body.checkCollision = new Object();
Phaser_Physics_Ninja_Body.touching = new Object();
Phaser_Physics_Ninja_Body.bottom = 0;
Phaser_Physics_Ninja_Body.velocity = new Phaser_Point();
Phaser_Physics_Ninja_Body.maxSpeed = 0;
Phaser_Physics_Ninja_Body.right = 0;
Phaser_Physics_Ninja_Body.friction = 0;
Phaser_Physics_Ninja_Body.wasTouching = new Object();
Phaser_Physics_Ninja_Body.system = new Phaser_Physics_Ninja();
Phaser_Physics_Ninja_Body.x = 0;
Phaser_Physics_Ninja_Body.width = 0;
Phaser_Physics_Ninja_Body.y = 0;
Phaser_Physics_Ninja_Body.circle = new Phaser_Physics_Ninja_Circle();
Phaser_Physics_Ninja_Body.deltaX = function () { return new Number(); };
Phaser_Physics_Ninja_Body.deltaY = function () { return new Number(); };
Phaser_Physics_Ninja_Body.render = function (context, body, color, filled) {};
Phaser_Physics_Ninja_Body.deltaAbsY = function () { return new Number(); };
Phaser_Physics_Ninja_Body.postUpdate = function () {};
Phaser_Physics_Ninja_Body.deltaAbsX = function () { return new Number(); };
Phaser_Physics_Ninja_Body.destroy = function () {};
Phaser_Physics_Ninja_Body.setZeroVelocity = function () {};
Phaser_Physics_Ninja_Body.reset = function () {};
Phaser_Physics_Ninja_Body.preUpdate = function () {};

var Phaser_Physics_P2_Body = function (game, sprite, x, y, mass) {};
Phaser_Physics_P2_Body.prototype = new Object();
Phaser_Physics_P2_Body.STATIC = 0;
Phaser_Physics_P2_Body.KINEMATIC = 0;
Phaser_Physics_P2_Body.DYNAMIC = 0;
Phaser_Physics_P2_Body.sleepSpeedLimit = 0;
Phaser_Physics_P2_Body.collidesWith = new Array();
Phaser_Physics_P2_Body.data = new p2_Body();
Phaser_Physics_P2_Body.type = 0;
Phaser_Physics_P2_Body.angularForce = 0;
Phaser_Physics_P2_Body.dynamic = true;
Phaser_Physics_P2_Body.collideWorldBounds = true;
Phaser_Physics_P2_Body.id = 0;
Phaser_Physics_P2_Body.motionState = 0;
Phaser_Physics_P2_Body.static = true;
Phaser_Physics_P2_Body.offset = new Phaser_Point();
Phaser_Physics_P2_Body.angularDamping = 0;
Phaser_Physics_P2_Body.damping = 0;
Phaser_Physics_P2_Body.debugBody = new Phaser_Physics_P2_BodyDebug();
Phaser_Physics_P2_Body.force = new Phaser_Physics_P2_InversePointProxy();
Phaser_Physics_P2_Body.game = new Phaser_Game();
Phaser_Physics_P2_Body.mass = 0;
Phaser_Physics_P2_Body.inertia = 0;
Phaser_Physics_P2_Body.world = new Phaser_Physics_P2();
Phaser_Physics_P2_Body.allowSleep = true;
Phaser_Physics_P2_Body.sprite = new Phaser_Sprite();
Phaser_Physics_P2_Body.angle = 0;
Phaser_Physics_P2_Body.removeNextStep = true;
Phaser_Physics_P2_Body.dirty = true;
Phaser_Physics_P2_Body.debug = true;
Phaser_Physics_P2_Body.onEndContact = new Phaser_Signal();
Phaser_Physics_P2_Body.rotation = 0;
Phaser_Physics_P2_Body.velocity = new Phaser_Physics_P2_InversePointProxy();
Phaser_Physics_P2_Body.angularVelocity = 0;
Phaser_Physics_P2_Body.kinematic = true;
Phaser_Physics_P2_Body.gravity = new Phaser_Point();
Phaser_Physics_P2_Body.x = 0;
Phaser_Physics_P2_Body.y = 0;
Phaser_Physics_P2_Body.onBeginContact = new Phaser_Signal();
Phaser_Physics_P2_Body.fixedRotation = true;
Phaser_Physics_P2_Body.setCollisionGroup = function (group, shape) {};
Phaser_Physics_P2_Body.createGroupCallback = function (group, callback, callbackContext) {};
Phaser_Physics_P2_Body.addParticle = function (offsetX, offsetY, rotation) { return new p2_Particle(); };
Phaser_Physics_P2_Body.addToWorld = function () {};
Phaser_Physics_P2_Body.removeCollisionGroup = function (group, clearCallback, shape) {};
Phaser_Physics_P2_Body.clearCollision = function (clearGroup, clearMask, shape) {};
Phaser_Physics_P2_Body.applyDamping = function (dt) {};
Phaser_Physics_P2_Body.getVelocityAtPoint = function (result, relativePoint) { return new Array(); };
Phaser_Physics_P2_Body.moveUp = function (speed) {};
Phaser_Physics_P2_Body.collides = function (group, callback, callbackContext, shape) {};
Phaser_Physics_P2_Body.postUpdate = function () {};
Phaser_Physics_P2_Body.setRectangleFromSprite = function (sprite) { return new p2_Rectangle(); };
Phaser_Physics_P2_Body.createBodyCallback = function (object, callback, callbackContext) {};
Phaser_Physics_P2_Body.moveBackward = function (speed) {};
Phaser_Physics_P2_Body.thrustLeft = function (speed) {};
Phaser_Physics_P2_Body.addShape = function (shape, offsetX, offsetY, rotation) { return new p2_Shape(); };
Phaser_Physics_P2_Body.destroy = function () {};
Phaser_Physics_P2_Body.moveDown = function (speed) {};
Phaser_Physics_P2_Body.removeShape = function (shape) { return new Boolean(); };
Phaser_Physics_P2_Body.toWorldFrame = function (out, localPoint) {};
Phaser_Physics_P2_Body.addLine = function (length, offsetX, offsetY, rotation) { return new p2_Line(); };
Phaser_Physics_P2_Body.setZeroVelocity = function () {};
Phaser_Physics_P2_Body.moveRight = function (speed) {};
Phaser_Physics_P2_Body.thrust = function (speed) {};
Phaser_Physics_P2_Body.reset = function (x, y, resetDamping, resetMass) {};
Phaser_Physics_P2_Body.setZeroRotation = function () {};
Phaser_Physics_P2_Body.moveLeft = function (speed) {};
Phaser_Physics_P2_Body.setRectangle = function (width, height, offsetX, offsetY, rotation) { return new p2_Rectangle(); };
Phaser_Physics_P2_Body.preUpdate = function () {};
Phaser_Physics_P2_Body.updateCollisionMask = function (shape) {};
Phaser_Physics_P2_Body.applyImpulseLocal = function (impulse, localX, localY) {};
Phaser_Physics_P2_Body.moveForward = function (speed) {};
Phaser_Physics_P2_Body.getCollisionMask = function () { return new Number(); };
Phaser_Physics_P2_Body.addPlane = function (offsetX, offsetY, rotation) { return new p2_Plane(); };
Phaser_Physics_P2_Body.shapeChanged = function () {};
Phaser_Physics_P2_Body.setZeroDamping = function () {};
Phaser_Physics_P2_Body.rotateLeft = function (speed) {};
Phaser_Physics_P2_Body.adjustCenterOfMass = function () {};
Phaser_Physics_P2_Body.thrustRight = function (speed) {};
Phaser_Physics_P2_Body.loadPolygon = function (key, object) { return new Boolean(); };
Phaser_Physics_P2_Body.setMaterial = function (material, shape) {};
Phaser_Physics_P2_Body.clearShapes = function () {};
Phaser_Physics_P2_Body.setZeroForce = function () {};
Phaser_Physics_P2_Body.addPolygon = function (options, options_optimalDecomp, options_skipSimpleCheck, options_removeCollinearPoints, points) { return new Boolean(); };
Phaser_Physics_P2_Body.toLocalFrame = function (out, worldPoint) {};
Phaser_Physics_P2_Body.addRectangle = function (width, height, offsetX, offsetY, rotation) { return new p2_Box(); };
Phaser_Physics_P2_Body.removeFromWorld = function () {};
Phaser_Physics_P2_Body.addFixture = function (fixtureData) { return new Array(); };
Phaser_Physics_P2_Body.addCapsule = function (length, radius, offsetX, offsetY, rotation) { return new p2_Capsule(); };
Phaser_Physics_P2_Body.rotateRight = function (speed) {};
Phaser_Physics_P2_Body.setCircle = function (radius, offsetX, offsetY, rotation) {};
Phaser_Physics_P2_Body.reverse = function (speed) {};
Phaser_Physics_P2_Body.addPhaserPolygon = function (key, object) { return new Array(); };
Phaser_Physics_P2_Body.applyForce = function (force, worldX, worldY) {};
Phaser_Physics_P2_Body.applyImpulse = function (impulse, worldX, worldY) {};
Phaser_Physics_P2_Body.addCircle = function (radius, offsetX, offsetY, rotation) { return new p2_Circle(); };

var Phaser_Component_PhysicsBody = function () {};
Phaser_Component_PhysicsBody.prototype = new Object();
Phaser_Component_PhysicsBody.x = 0;
Phaser_Component_PhysicsBody.y = 0;
Phaser_Component_PhysicsBody.body = new Phaser_Physics_Arcade_Body();
Phaser_Component_PhysicsBody.postUpdate = function () {};
Phaser_Component_PhysicsBody.preUpdate = function () {};

var Phaser_Easing_Quartic = function () {};
Phaser_Easing_Quartic.prototype = new Object();
Phaser_Easing_Quartic.In = function (k) { return new Number(); };
Phaser_Easing_Quartic.InOut = function (k) { return new Number(); };
Phaser_Easing_Quartic.Out = function (k) { return new Number(); };

var Phaser_MSPointer = function (game) {};
Phaser_MSPointer.prototype = new Object();
Phaser_MSPointer.pointerMoveCallback = new Function();
Phaser_MSPointer.game = new Phaser_Game();
Phaser_MSPointer.pointerDownCallback = new Function();
Phaser_MSPointer.capture = true;
Phaser_MSPointer.callbackContext = new Object();
Phaser_MSPointer.pointerUpCallback = new Function();
Phaser_MSPointer.enabled = true;
Phaser_MSPointer.button = 0;
Phaser_MSPointer.input = new Phaser_Input();
Phaser_MSPointer.event = new MSPointerEvent();
Phaser_MSPointer.start = function () {};
Phaser_MSPointer.onPointerUp = function (event) {};
Phaser_MSPointer.onPointerMove = function (event) {};
Phaser_MSPointer.stop = function () {};
Phaser_MSPointer.onPointerDown = function (event) {};
Phaser_MSPointer.onPointerOut = function (event) {};
Phaser_MSPointer.onPointerUpGlobal = function (event) {};

var Phaser_Sprite = function (game, x, y, key, frame) {};
Phaser_Sprite.prototype = new Object();
Phaser_Sprite.parent = new PIXI_DisplayObjectContainer();
Phaser_Sprite.centerY = 0;
Phaser_Sprite.centerX = 0;
Phaser_Sprite.lifespan = 0;
Phaser_Sprite.outOfBoundsKill = true;
Phaser_Sprite.type = 0;
Phaser_Sprite.children = [new PIXI_DisplayObject()];
Phaser_Sprite.pivot = new PIXI_Point();
Phaser_Sprite.maxHealth = 0;
Phaser_Sprite.events = new Phaser_Events();
Phaser_Sprite.physicsType = 0;
Phaser_Sprite.smoothed = true;
Phaser_Sprite.input = new Phaser_InputHandler();
Phaser_Sprite.worldPosition = new PIXI_Point();
Phaser_Sprite.left = 0;
Phaser_Sprite.filterArea = new PIXI_Rectangle();
Phaser_Sprite.components = new Object();
Phaser_Sprite.worldScale = new PIXI_Point();
Phaser_Sprite.alive = true;
Phaser_Sprite.transformCallback = new Function();
Phaser_Sprite.inWorld = true;
Phaser_Sprite.worldAlpha = 0;
Phaser_Sprite.world = new Phaser_Point();
Phaser_Sprite.top = 0;
Phaser_Sprite.angle = 0;
Phaser_Sprite.checkWorldBounds = true;
Phaser_Sprite.key = "";
Phaser_Sprite.texture = new Texture();
Phaser_Sprite.health = 0;
Phaser_Sprite.outOfCameraBoundsKill = true;
Phaser_Sprite.destroyPhase = true;
Phaser_Sprite.right = 0;
Phaser_Sprite.previousPosition = new Phaser_Point();
Phaser_Sprite.scaleMax = new Phaser_Point();
Phaser_Sprite.ignoreChildInput = true;
Phaser_Sprite.stage = new PIXI_Stage();
Phaser_Sprite.anchor = new Phaser_Point();
Phaser_Sprite.autoCull = true;
Phaser_Sprite.x = 0;
Phaser_Sprite.exists = true;
Phaser_Sprite.y = 0;
Phaser_Sprite.z = 0;
Phaser_Sprite.scaleMin = new Phaser_Point();
Phaser_Sprite.data = new Object();
Phaser_Sprite.body = new Phaser_Physics_Arcade_Body();
Phaser_Sprite.inCamera = true;
Phaser_Sprite.offsetX = 0;
Phaser_Sprite.tintedTexture = new Phaser_Canvas();
Phaser_Sprite.offsetY = 0;
Phaser_Sprite.worldTransform = new PIXI_Matrix();
Phaser_Sprite.fixedToCamera = true;
Phaser_Sprite.renderOrderID = 0;
Phaser_Sprite.previousRotation = 0;
Phaser_Sprite.visible = true;
Phaser_Sprite.bottom = 0;
Phaser_Sprite.cameraOffset = new Phaser_Point();
Phaser_Sprite.name = "";
Phaser_Sprite.position = new PIXI_Point();
Phaser_Sprite.frame = 0;
Phaser_Sprite.worldRotation = 0;
Phaser_Sprite.shader = new PIXI_AbstractFilter();
Phaser_Sprite.cropRect = new Phaser_Rectangle();
Phaser_Sprite.game = new Phaser_Game();
Phaser_Sprite.renderable = true;
Phaser_Sprite.deltaZ = 0;
Phaser_Sprite.transformCallbackContext = new Object();
Phaser_Sprite.deltaX = 0;
Phaser_Sprite.deltaY = 0;
Phaser_Sprite.scale = new PIXI_Point();
Phaser_Sprite.tint = 0;
Phaser_Sprite.inputEnabled = true;
Phaser_Sprite.worldVisible = true;
Phaser_Sprite.animations = new Phaser_AnimationManager();
Phaser_Sprite.alpha = 0;
Phaser_Sprite.cacheAsBitmap = true;
Phaser_Sprite.mask = new PIXI_Graphics();
Phaser_Sprite.debug = true;
Phaser_Sprite.frameName = "";
Phaser_Sprite.rotation = 0;
Phaser_Sprite.filters = new Array();
Phaser_Sprite.pendingDestroy = true;
Phaser_Sprite.blendMode = 0;
Phaser_Sprite.hitArea = new Phaser_Rectangle();
Phaser_Sprite.fresh = true;
Phaser_Sprite.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Sprite.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.resizeFrame = function (parent, width, height) {};
Phaser_Sprite.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Sprite.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Sprite.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.init = function () {};
Phaser_Sprite.postUpdate = function () {};
Phaser_Sprite.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Sprite.install = function () {};
Phaser_Sprite.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Sprite.preUpdate = function () { return new Boolean(); };
Phaser_Sprite.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Sprite.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Sprite.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Sprite.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Sprite.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.updateCrop = function () {};
Phaser_Sprite.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Sprite.overlap = function (displayObject) { return new Boolean(); };
Phaser_Sprite.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Sprite.crop = function (rect, copy) {};
Phaser_Sprite.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Sprite.update = function () {};
Phaser_Sprite.setFrame = function (frame) {};
Phaser_Sprite.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Sprite.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Sprite.setHealth = function (amount) { return new Phaser_Sprite(); };
Phaser_Sprite.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.resetFrame = function () {};

var Phaser_Image = function (game, x, y, key, frame) {};
Phaser_Image.prototype = new Object();
Phaser_Image.parent = new PIXI_DisplayObjectContainer();
Phaser_Image.centerY = 0;
Phaser_Image.centerX = 0;
Phaser_Image.lifespan = 0;
Phaser_Image.type = 0;
Phaser_Image.children = [new PIXI_DisplayObject()];
Phaser_Image.pivot = new PIXI_Point();
Phaser_Image.events = new Phaser_Events();
Phaser_Image.smoothed = true;
Phaser_Image.input = new Phaser_InputHandler();
Phaser_Image.worldPosition = new PIXI_Point();
Phaser_Image.left = 0;
Phaser_Image.filterArea = new PIXI_Rectangle();
Phaser_Image.components = new Object();
Phaser_Image.worldScale = new PIXI_Point();
Phaser_Image.alive = true;
Phaser_Image.worldAlpha = 0;
Phaser_Image.world = new Phaser_Point();
Phaser_Image.top = 0;
Phaser_Image.angle = 0;
Phaser_Image.key = "";
Phaser_Image.texture = new Texture();
Phaser_Image.destroyPhase = true;
Phaser_Image.right = 0;
Phaser_Image.previousPosition = new Phaser_Point();
Phaser_Image.ignoreChildInput = true;
Phaser_Image.stage = new PIXI_Stage();
Phaser_Image.anchor = new Phaser_Point();
Phaser_Image.autoCull = true;
Phaser_Image.x = 0;
Phaser_Image.exists = true;
Phaser_Image.y = 0;
Phaser_Image.z = 0;
Phaser_Image.data = new Object();
Phaser_Image.inCamera = true;
Phaser_Image.offsetX = 0;
Phaser_Image.tintedTexture = new Phaser_Canvas();
Phaser_Image.offsetY = 0;
Phaser_Image.worldTransform = new PIXI_Matrix();
Phaser_Image.fixedToCamera = true;
Phaser_Image.renderOrderID = 0;
Phaser_Image.previousRotation = 0;
Phaser_Image.visible = true;
Phaser_Image.bottom = 0;
Phaser_Image.cameraOffset = new Phaser_Point();
Phaser_Image.name = "";
Phaser_Image.position = new PIXI_Point();
Phaser_Image.frame = 0;
Phaser_Image.worldRotation = 0;
Phaser_Image.shader = new PIXI_AbstractFilter();
Phaser_Image.cropRect = new Phaser_Rectangle();
Phaser_Image.game = new Phaser_Game();
Phaser_Image.renderable = true;
Phaser_Image.scale = new PIXI_Point();
Phaser_Image.tint = 0;
Phaser_Image.inputEnabled = true;
Phaser_Image.worldVisible = true;
Phaser_Image.animations = new Phaser_AnimationManager();
Phaser_Image.alpha = 0;
Phaser_Image.cacheAsBitmap = true;
Phaser_Image.mask = new PIXI_Graphics();
Phaser_Image.debug = true;
Phaser_Image.frameName = "";
Phaser_Image.rotation = 0;
Phaser_Image.filters = new Array();
Phaser_Image.pendingDestroy = true;
Phaser_Image.blendMode = 0;
Phaser_Image.hitArea = new Phaser_Rectangle();
Phaser_Image.fresh = true;
Phaser_Image.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Image.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Image.resizeFrame = function (parent, width, height) {};
Phaser_Image.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Image.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Image.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Image.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Image.init = function () {};
Phaser_Image.postUpdate = function () {};
Phaser_Image.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Image.install = function () {};
Phaser_Image.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Image.preUpdate = function () {};
Phaser_Image.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Image.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Image.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Image.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Image.updateCrop = function () {};
Phaser_Image.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Image.overlap = function (displayObject) { return new Boolean(); };
Phaser_Image.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Image.crop = function (rect, copy) {};
Phaser_Image.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Image.update = function () {};
Phaser_Image.setFrame = function (frame) {};
Phaser_Image.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Image.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Image.resetFrame = function () {};

var Phaser_Color = function () {};
Phaser_Color.prototype = new Object();
Phaser_Color.webToColor = function (web, out) { return new Object(); };
Phaser_Color.getAlphaFloat = function (color) { return new Number(); };
Phaser_Color.RGBtoHSL = function (r, g, b, out) { return new Object(); };
Phaser_Color.valueToColor = function (value, out) { return new Object(); };
Phaser_Color.blendLinearBurn = function (a, b) { return new Number(); };
Phaser_Color.blendVividLight = function (a, b) { return new Number(); };
Phaser_Color.getAlpha = function (color) { return new Number(); };
Phaser_Color.fromRGBA = function (rgba, out) { return new Object(); };
Phaser_Color.blendReflect = function (a, b) { return new Number(); };
Phaser_Color.HSLtoRGB = function (h, s, l, out) { return new Object(); };
Phaser_Color.packPixel = function (r, g, b, a) { return new Number(); };
Phaser_Color.blendLighten = function (a, b) { return new Number(); };
Phaser_Color.toRGBA = function (r, g, b, a) { return new Number(); };
Phaser_Color.blendDarken = function (a, b) { return new Number(); };
Phaser_Color.blendScreen = function (a, b) { return new Number(); };
Phaser_Color.getRGB = function (color) { return new Object(); };
Phaser_Color.hexToRGB = function (hex) { return new Number(); };
Phaser_Color.blendGlow = function (a, b) { return new Number(); };
Phaser_Color.blendSoftLight = function (a, b) { return new Number(); };
Phaser_Color.interpolateColorWithRGB = function (color, r, g, b, steps, currentStep) { return new Number(); };
Phaser_Color.blendSubtract = function (a, b) { return new Number(); };
Phaser_Color.getColor32 = function (a, r, g, b) { return new Number(); };
Phaser_Color.HSLColorWheel = function (s, l) { return new Array(); };
Phaser_Color.getWebRGB = function (color) { return new String(); };
Phaser_Color.componentToHex = function (color) { return new String(); };
Phaser_Color.blendDifference = function (a, b) { return new Number(); };
Phaser_Color.getBlue = function (color) { return new Number(); };
Phaser_Color.hexToColor = function (hex, out) { return new Object(); };
Phaser_Color.blendLinearDodge = function (a, b) { return new Number(); };
Phaser_Color.getGreen = function (color) { return new Number(); };
Phaser_Color.blendColorBurn = function (a, b) { return new Number(); };
Phaser_Color.blendNegation = function (a, b) { return new Number(); };
Phaser_Color.blendNormal = function (a, b) { return new Number(); };
Phaser_Color.getRandomColor = function (min, max, alpha) { return new Number(); };
Phaser_Color.blendOverlay = function (a, b) { return new Number(); };
Phaser_Color.createColor = function (r, g, b, a, h, s, l, v) { return new Object(); };
Phaser_Color.HSVColorWheel = function (s, v) { return new Array(); };
Phaser_Color.RGBtoString = function (r, g, b, a, prefix) { return new String(); };
Phaser_Color.blendExclusion = function (a, b) { return new Number(); };
Phaser_Color.blendHardLight = function (a, b) { return new Number(); };
Phaser_Color.getRed = function (color) { return new Number(); };
Phaser_Color.HSVtoRGB = function (h, s, v, out) { return new Object(); };
Phaser_Color.hueToColor = function (p, q, t) { return new Number(); };
Phaser_Color.updateColor = function (out) { return new Number(); };
Phaser_Color.blendLinearLight = function (a, b) { return new Number(); };
Phaser_Color.blendMultiply = function (a, b) { return new Number(); };
Phaser_Color.blendAverage = function (a, b) { return new Number(); };
Phaser_Color.getColor = function (r, g, b) { return new Number(); };
Phaser_Color.toABGR = function (r, g, b, a) { return new Number(); };
Phaser_Color.interpolateColor = function (color1, color2, steps, currentStep, alpha) { return new Number(); };
Phaser_Color.blendHardMix = function (a, b) { return new Number(); };
Phaser_Color.interpolateRGB = function (r1, g1, b1, r2, g2, b2, steps, currentStep) { return new Number(); };
Phaser_Color.blendPinLight = function (a, b) { return new Number(); };
Phaser_Color.RGBtoHSV = function (r, g, b, out) { return new Object(); };
Phaser_Color.blendPhoenix = function (a, b) { return new Number(); };
Phaser_Color.blendAdd = function (a, b) { return new Number(); };
Phaser_Color.unpackPixel = function (rgba, out, hsl, hsv) { return new Object(); };
Phaser_Color.blendColorDodge = function (a, b) { return new Number(); };

var Phaser_Plugin = function (game, parent) {};
Phaser_Plugin.prototype = new Object();
Phaser_Plugin.hasPostRender = true;
Phaser_Plugin.parent = new Object();
Phaser_Plugin.hasPreUpdate = true;
Phaser_Plugin.game = new Phaser_Game();
Phaser_Plugin.visible = true;
Phaser_Plugin.hasPostUpdate = true;
Phaser_Plugin.active = true;
Phaser_Plugin.hasRender = true;
Phaser_Plugin.hasUpdate = true;
Phaser_Plugin.postRender = function () {};
Phaser_Plugin.update = function () {};
Phaser_Plugin.destroy = function () {};
Phaser_Plugin.preUpdate = function () {};
Phaser_Plugin.render = function () {};

var CanvasPool = function () {};
CanvasPool.prototype = new Object();

var Phaser_FlexGrid = function (manager, width, height) {};
Phaser_FlexGrid.prototype = new Object();
Phaser_FlexGrid.game = new Phaser_Game();
Phaser_FlexGrid.manager = new Phaser_ScaleManager();
Phaser_FlexGrid.scaleFactor = new Phaser_Point();
Phaser_FlexGrid.position = new Phaser_Point();
Phaser_FlexGrid.fitSprite = function (sprite) {};
Phaser_FlexGrid.debug = function () {};
Phaser_FlexGrid.createFullLayer = function (children) { return new Phaser_FlexLayer(); };
Phaser_FlexGrid.createFluidLayer = function (children) { return new Phaser_FlexLayer(); };
Phaser_FlexGrid.refresh = function () {};
Phaser_FlexGrid.onResize = function (width, height) {};
Phaser_FlexGrid.setSize = function (width, height) {};
Phaser_FlexGrid.createCustomLayer = function (width, height, children) { return new Phaser_FlexLayer(); };
Phaser_FlexGrid.reset = function () {};
Phaser_FlexGrid.createFixedLayer = function (children) { return new Phaser_FlexLayer(); };

var Phaser_Graphics = function (game, x, y) {};
Phaser_Graphics.prototype = new Object();
Phaser_Graphics.centerY = 0;
Phaser_Graphics.data = new Object();
Phaser_Graphics.centerX = 0;
Phaser_Graphics.lifespan = 0;
Phaser_Graphics.outOfBoundsKill = true;
Phaser_Graphics.type = 0;
Phaser_Graphics.body = new Phaser_Physics_Arcade_Body();
Phaser_Graphics.inCamera = true;
Phaser_Graphics.offsetX = 0;
Phaser_Graphics.offsetY = 0;
Phaser_Graphics.fixedToCamera = true;
Phaser_Graphics.renderOrderID = 0;
Phaser_Graphics.events = new Phaser_Events();
Phaser_Graphics.physicsType = 0;
Phaser_Graphics.previousRotation = 0;
Phaser_Graphics.bottom = 0;
Phaser_Graphics.cameraOffset = new Phaser_Point();
Phaser_Graphics.input = new Phaser_InputHandler();
Phaser_Graphics.left = 0;
Phaser_Graphics.name = "";
Phaser_Graphics.game = new Phaser_Game();
Phaser_Graphics.components = new Object();
Phaser_Graphics.alive = true;
Phaser_Graphics.inWorld = true;
Phaser_Graphics.inputEnabled = true;
Phaser_Graphics.world = new Phaser_Point();
Phaser_Graphics.top = 0;
Phaser_Graphics.animations = new Phaser_AnimationManager();
Phaser_Graphics.angle = 0;
Phaser_Graphics.checkWorldBounds = true;
Phaser_Graphics.key = "";
Phaser_Graphics.debug = true;
Phaser_Graphics.outOfCameraBoundsKill = true;
Phaser_Graphics.destroyPhase = true;
Phaser_Graphics.right = 0;
Phaser_Graphics.previousPosition = new Phaser_Point();
Phaser_Graphics.pendingDestroy = true;
Phaser_Graphics.autoCull = true;
Phaser_Graphics.x = 0;
Phaser_Graphics.exists = true;
Phaser_Graphics.y = 0;
Phaser_Graphics.z = 0;
Phaser_Graphics.fresh = true;
Phaser_Graphics.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Graphics.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Graphics.init = function () {};
Phaser_Graphics.postUpdate = function () {};
Phaser_Graphics.destroy = function (destroyChildren) {};
Phaser_Graphics.install = function () {};
Phaser_Graphics.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Graphics.preUpdate = function () {};
Phaser_Graphics.update = function () {};
Phaser_Graphics.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Graphics.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };

var Phaser_BitmapText = function (game, x, y, font, text, size, align) {};
Phaser_BitmapText.prototype = new Object();
Phaser_BitmapText.parent = new PIXI_DisplayObjectContainer();
Phaser_BitmapText.centerY = 0;
Phaser_BitmapText.data = new Object();
Phaser_BitmapText.centerX = 0;
Phaser_BitmapText.lifespan = 0;
Phaser_BitmapText.outOfBoundsKill = true;
Phaser_BitmapText.type = 0;
Phaser_BitmapText.align = "";
Phaser_BitmapText.body = new Phaser_Physics_Arcade_Body();
Phaser_BitmapText.inCamera = true;
Phaser_BitmapText.offsetX = 0;
Phaser_BitmapText.offsetY = 0;
Phaser_BitmapText.children = [new PIXI_DisplayObject()];
Phaser_BitmapText.pivot = new PIXI_Point();
Phaser_BitmapText.worldTransform = new PIXI_Matrix();
Phaser_BitmapText.text = "";
Phaser_BitmapText.fixedToCamera = true;
Phaser_BitmapText.renderOrderID = 0;
Phaser_BitmapText.events = new Phaser_Events();
Phaser_BitmapText.physicsType = 0;
Phaser_BitmapText.maxWidth = 0;
Phaser_BitmapText.previousRotation = 0;
Phaser_BitmapText.visible = true;
Phaser_BitmapText.bottom = 0;
Phaser_BitmapText.cameraOffset = new Phaser_Point();
Phaser_BitmapText.smoothed = true;
Phaser_BitmapText.textWidth = 0;
Phaser_BitmapText.input = new Phaser_InputHandler();
Phaser_BitmapText.worldPosition = new PIXI_Point();
Phaser_BitmapText.left = 0;
Phaser_BitmapText.name = "";
Phaser_BitmapText.fontSize = 0;
Phaser_BitmapText.position = new PIXI_Point();
Phaser_BitmapText.worldRotation = 0;
Phaser_BitmapText.filterArea = new PIXI_Rectangle();
Phaser_BitmapText.game = new Phaser_Game();
Phaser_BitmapText.components = new Object();
Phaser_BitmapText.renderable = true;
Phaser_BitmapText.worldScale = new PIXI_Point();
Phaser_BitmapText.alive = true;
Phaser_BitmapText.scale = new PIXI_Point();
Phaser_BitmapText.inWorld = true;
Phaser_BitmapText.tint = 0;
Phaser_BitmapText.inputEnabled = true;
Phaser_BitmapText.worldAlpha = 0;
Phaser_BitmapText.worldVisible = true;
Phaser_BitmapText.world = new Phaser_Point();
Phaser_BitmapText.top = 0;
Phaser_BitmapText.animations = new Phaser_AnimationManager();
Phaser_BitmapText.alpha = 0;
Phaser_BitmapText.angle = 0;
Phaser_BitmapText.cacheAsBitmap = true;
Phaser_BitmapText.checkWorldBounds = true;
Phaser_BitmapText.key = "";
Phaser_BitmapText.mask = new PIXI_Graphics();
Phaser_BitmapText.dirty = true;
Phaser_BitmapText.debug = true;
Phaser_BitmapText.rotation = 0;
Phaser_BitmapText.outOfCameraBoundsKill = true;
Phaser_BitmapText.destroyPhase = true;
Phaser_BitmapText.right = 0;
Phaser_BitmapText.filters = new Array();
Phaser_BitmapText.ignoreChildInput = true;
Phaser_BitmapText.previousPosition = new Phaser_Point();
Phaser_BitmapText.textHeight = 0;
Phaser_BitmapText.pendingDestroy = true;
Phaser_BitmapText.stage = new PIXI_Stage();
Phaser_BitmapText.hitArea = new Phaser_Rectangle();
Phaser_BitmapText.anchor = new Phaser_Point();
Phaser_BitmapText.autoCull = true;
Phaser_BitmapText.x = 0;
Phaser_BitmapText.exists = true;
Phaser_BitmapText.y = 0;
Phaser_BitmapText.z = 0;
Phaser_BitmapText.fresh = true;
Phaser_BitmapText.font = "";
Phaser_BitmapText.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_BitmapText.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_BitmapText.purgeGlyphs = function () { return new Number(); };
Phaser_BitmapText.cleanText = function (text, replace) { return new String(); };
Phaser_BitmapText.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_BitmapText.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_BitmapText.init = function () {};
Phaser_BitmapText.postUpdate = function () {};
Phaser_BitmapText.destroy = function (destroyChildren, destroyTexture) {};
Phaser_BitmapText.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_BitmapText.install = function () {};
Phaser_BitmapText.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_BitmapText.preUpdate = function () { return new Boolean(); };
Phaser_BitmapText.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_BitmapText.update = function () {};
Phaser_BitmapText.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_BitmapText.kill = function () { return new PIXI_DisplayObject(); };
Phaser_BitmapText.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_BitmapText.setText = function (text) {};

var Phaser_RoundedRectangle = function (x, y, width, height, radius) {};
Phaser_RoundedRectangle.prototype = new Object();
Phaser_RoundedRectangle.x = 0;
Phaser_RoundedRectangle.width = 0;
Phaser_RoundedRectangle.y = 0;
Phaser_RoundedRectangle.radius = 0;
Phaser_RoundedRectangle.type = 0;
Phaser_RoundedRectangle.height = 0;
Phaser_RoundedRectangle.contains = function (x, y) { return new Boolean(); };
Phaser_RoundedRectangle.clone = function () { return new Phaser_RoundedRectangle(); };

var Phaser_Button = function (game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame) {};
Phaser_Button.prototype = new Phaser.Image();
Phaser_Button.parent = new PIXI_DisplayObjectContainer();
Phaser_Button.centerY = 0;
Phaser_Button.centerX = 0;
Phaser_Button.lifespan = 0;
Phaser_Button.onInputOut = new Phaser_Signal();
Phaser_Button.type = 0;
Phaser_Button.onInputUp = new Phaser_Signal();
Phaser_Button.children = [new PIXI_DisplayObject()];
Phaser_Button.pivot = new PIXI_Point();
Phaser_Button.events = new Phaser_Events();
Phaser_Button.physicsType = 0;
Phaser_Button.justReleasedPreventsOver = new Phaser_PointerMode();
Phaser_Button.smoothed = true;
Phaser_Button.onOverSoundMarker = "";
Phaser_Button.input = new Phaser_InputHandler();
Phaser_Button.worldPosition = new PIXI_Point();
Phaser_Button.left = 0;
Phaser_Button.filterArea = new PIXI_Rectangle();
Phaser_Button.components = new Object();
Phaser_Button.worldScale = new PIXI_Point();
Phaser_Button.alive = true;
Phaser_Button.worldAlpha = 0;
Phaser_Button.world = new Phaser_Point();
Phaser_Button.top = 0;
Phaser_Button.angle = 0;
Phaser_Button.key = "";
Phaser_Button.onUpSoundMarker = "";
Phaser_Button.onDownSound = new Phaser_Sound();
Phaser_Button.texture = new Texture();
Phaser_Button.destroyPhase = true;
Phaser_Button.right = 0;
Phaser_Button.previousPosition = new Phaser_Point();
Phaser_Button.ignoreChildInput = true;
Phaser_Button.stage = new PIXI_Stage();
Phaser_Button.anchor = new Phaser_Point();
Phaser_Button.autoCull = true;
Phaser_Button.x = 0;
Phaser_Button.onInputOver = new Phaser_Signal();
Phaser_Button.exists = true;
Phaser_Button.y = 0;
Phaser_Button.z = 0;
Phaser_Button.data = new Object();
Phaser_Button.onOutSoundMarker = "";
Phaser_Button.onInputDown = new Phaser_Signal();
Phaser_Button.inCamera = true;
Phaser_Button.offsetX = 0;
Phaser_Button.tintedTexture = new Phaser_Canvas();
Phaser_Button.offsetY = 0;
Phaser_Button.onUpSound = new Phaser_Sound();
Phaser_Button.worldTransform = new PIXI_Matrix();
Phaser_Button.fixedToCamera = true;
Phaser_Button.renderOrderID = 0;
Phaser_Button.previousRotation = 0;
Phaser_Button.onDownSoundMarker = "";
Phaser_Button.visible = true;
Phaser_Button.bottom = 0;
Phaser_Button.cameraOffset = new Phaser_Point();
Phaser_Button.onOverSound = new Phaser_Sound();
Phaser_Button.freezeFrames = true;
Phaser_Button.name = "";
Phaser_Button.position = new PIXI_Point();
Phaser_Button.frame = 0;
Phaser_Button.worldRotation = 0;
Phaser_Button.shader = new PIXI_AbstractFilter();
Phaser_Button.cropRect = new Phaser_Rectangle();
Phaser_Button.game = new Phaser_Game();
Phaser_Button.renderable = true;
Phaser_Button.scale = new PIXI_Point();
Phaser_Button.onOverMouseOnly = true;
Phaser_Button.onOutSound = new Phaser_Sound();
Phaser_Button.tint = 0;
Phaser_Button.inputEnabled = true;
Phaser_Button.worldVisible = true;
Phaser_Button.forceOut = true;
Phaser_Button.animations = new Phaser_AnimationManager();
Phaser_Button.alpha = 0;
Phaser_Button.cacheAsBitmap = true;
Phaser_Button.mask = new PIXI_Graphics();
Phaser_Button.debug = true;
Phaser_Button.frameName = "";
Phaser_Button.rotation = 0;
Phaser_Button.filters = new Array();
Phaser_Button.pendingDestroy = true;
Phaser_Button.blendMode = 0;
Phaser_Button.hitArea = new Phaser_Rectangle();
Phaser_Button.fresh = true;
Phaser_Button.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Button.setOverSound = function (sound, marker) {};
Phaser_Button.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Button.resizeFrame = function (parent, width, height) {};
Phaser_Button.onInputUpHandler = function (sprite, pointer) {};
Phaser_Button.onInputOverHandler = function (sprite, pointer) {};
Phaser_Button.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Button.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Button.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Button.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Button.init = function () {};
Phaser_Button.postUpdate = function () {};
Phaser_Button.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Button.setUpSound = function (sound, marker) {};
Phaser_Button.onInputDownHandler = function (sprite, pointer) {};
Phaser_Button.install = function () {};
Phaser_Button.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Button.preUpdate = function () {};
Phaser_Button.setFrames = function (overFrame, outFrame, downFrame, upFrame) {};
Phaser_Button.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Button.onInputOutHandler = function (sprite, pointer) {};
Phaser_Button.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Button.clearFrames = function () {};
Phaser_Button.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Button.setSounds = function (overSound, overMarker, downSound, downMarker, outSound, outMarker, upSound, upMarker) {};
Phaser_Button.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Button.updateCrop = function () {};
Phaser_Button.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Button.overlap = function (displayObject) { return new Boolean(); };
Phaser_Button.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Button.crop = function (rect, copy) {};
Phaser_Button.setOutSound = function (sound, marker) {};
Phaser_Button.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Button.update = function () {};
Phaser_Button.setDownSound = function (sound, marker) {};
Phaser_Button.setFrame = function (frame) {};
Phaser_Button.removedFromWorld = function () {};
Phaser_Button.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Button.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Button.resetFrame = function () {};

var Phaser_Rope = function (game, x, y, key, frame, points) {};
Phaser_Rope.prototype = new Object();
Phaser_Rope.parent = new PIXI_DisplayObjectContainer();
Phaser_Rope.centerY = 0;
Phaser_Rope.centerX = 0;
Phaser_Rope.lifespan = 0;
Phaser_Rope.outOfBoundsKill = true;
Phaser_Rope.type = 0;
Phaser_Rope.children = [new PIXI_DisplayObject()];
Phaser_Rope.pivot = new PIXI_Point();
Phaser_Rope.DrawModes = new Object();
Phaser_Rope.events = new Phaser_Events();
Phaser_Rope.smoothed = true;
Phaser_Rope.worldPosition = new PIXI_Point();
Phaser_Rope.left = 0;
Phaser_Rope.updateAnimation = new Function();
Phaser_Rope.filterArea = new PIXI_Rectangle();
Phaser_Rope.components = new Object();
Phaser_Rope.worldScale = new PIXI_Point();
Phaser_Rope.alive = true;
Phaser_Rope.transformCallback = new Function();
Phaser_Rope.inWorld = true;
Phaser_Rope.worldAlpha = 0;
Phaser_Rope.world = new Phaser_Point();
Phaser_Rope.top = 0;
Phaser_Rope.angle = 0;
Phaser_Rope.checkWorldBounds = true;
Phaser_Rope.key = "";
Phaser_Rope.dirty = true;
Phaser_Rope.texture = new Texture();
Phaser_Rope.outOfCameraBoundsKill = true;
Phaser_Rope.destroyPhase = true;
Phaser_Rope.right = 0;
Phaser_Rope.previousPosition = new Phaser_Point();
Phaser_Rope.scaleMax = new Phaser_Point();
Phaser_Rope.ignoreChildInput = true;
Phaser_Rope.stage = new PIXI_Stage();
Phaser_Rope.autoCull = true;
Phaser_Rope.x = 0;
Phaser_Rope.exists = true;
Phaser_Rope.y = 0;
Phaser_Rope.z = 0;
Phaser_Rope.scaleMin = new Phaser_Point();
Phaser_Rope.data = new Object();
Phaser_Rope.body = new Phaser_Physics_Arcade_Body();
Phaser_Rope.inCamera = true;
Phaser_Rope.offsetX = 0;
Phaser_Rope.offsetY = 0;
Phaser_Rope.worldTransform = new PIXI_Matrix();
Phaser_Rope.fixedToCamera = true;
Phaser_Rope.renderOrderID = 0;
Phaser_Rope.previousRotation = 0;
Phaser_Rope.visible = true;
Phaser_Rope.bottom = 0;
Phaser_Rope.cameraOffset = new Phaser_Point();
Phaser_Rope.name = "";
Phaser_Rope.position = new PIXI_Point();
Phaser_Rope.frame = 0;
Phaser_Rope.worldRotation = 0;
Phaser_Rope.cropRect = new Phaser_Rectangle();
Phaser_Rope.canvasPadding = 0;
Phaser_Rope.game = new Phaser_Game();
Phaser_Rope.renderable = true;
Phaser_Rope.deltaZ = 0;
Phaser_Rope.transformCallbackContext = new Object();
Phaser_Rope.deltaX = 0;
Phaser_Rope.deltaY = 0;
Phaser_Rope.scale = new PIXI_Point();
Phaser_Rope.worldVisible = true;
Phaser_Rope.animations = new Phaser_AnimationManager();
Phaser_Rope.alpha = 0;
Phaser_Rope.cacheAsBitmap = true;
Phaser_Rope.mask = new PIXI_Graphics();
Phaser_Rope.debug = true;
Phaser_Rope.frameName = "";
Phaser_Rope.rotation = 0;
Phaser_Rope.filters = new Array();
Phaser_Rope.pendingDestroy = true;
Phaser_Rope.blendMode = 0;
Phaser_Rope.hitArea = new Phaser_Rectangle();
Phaser_Rope.fresh = true;
Phaser_Rope.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Rope.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.resizeFrame = function (parent, width, height) {};
Phaser_Rope.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Rope.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Rope.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.init = function () {};
Phaser_Rope.postUpdate = function () {};
Phaser_Rope.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Rope.install = function () {};
Phaser_Rope.reset = function (x, y) { return new Phaser_Rope(); };
Phaser_Rope.preUpdate = function () {};
Phaser_Rope.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Rope.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Rope.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Rope.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.updateCrop = function () {};
Phaser_Rope.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Rope.overlap = function (displayObject) { return new Boolean(); };
Phaser_Rope.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Rope.crop = function (rect, copy) {};
Phaser_Rope.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Rope.update = function () {};
Phaser_Rope.setFrame = function (frame) {};
Phaser_Rope.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Rope.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.resetFrame = function () {};

var Phaser_Physics_P2_BodyDebug = function (game, body, settings) {};
Phaser_Physics_P2_BodyDebug.prototype = new Phaser.Group();
Phaser_Physics_P2_BodyDebug.SORT_ASCENDING = 0;
Phaser_Physics_P2_BodyDebug.SORT_DESCENDING = 0;
Phaser_Physics_P2_BodyDebug.RETURN_NONE = 0;
Phaser_Physics_P2_BodyDebug.RETURN_CHILD = 0;
Phaser_Physics_P2_BodyDebug.RETURN_TOTAL = 0;
Phaser_Physics_P2_BodyDebug.parent = new PIXI_DisplayObjectContainer();
Phaser_Physics_P2_BodyDebug.centerY = 0;
Phaser_Physics_P2_BodyDebug.centerX = 0;
Phaser_Physics_P2_BodyDebug.type = 0;
Phaser_Physics_P2_BodyDebug.enableBody = true;
Phaser_Physics_P2_BodyDebug.children = [new PIXI_DisplayObject()];
Phaser_Physics_P2_BodyDebug.enableBodyDebug = true;
Phaser_Physics_P2_BodyDebug.pivot = new PIXI_Point();
Phaser_Physics_P2_BodyDebug.physicsType = 0;
Phaser_Physics_P2_BodyDebug.canvas = new Phaser_Graphics();
Phaser_Physics_P2_BodyDebug.cursorIndex = 0;
Phaser_Physics_P2_BodyDebug.physicsSortDirection = 0;
Phaser_Physics_P2_BodyDebug.worldPosition = new PIXI_Point();
Phaser_Physics_P2_BodyDebug.left = 0;
Phaser_Physics_P2_BodyDebug.hash = new Array();
Phaser_Physics_P2_BodyDebug.filterArea = new PIXI_Rectangle();
Phaser_Physics_P2_BodyDebug.worldScale = new PIXI_Point();
Phaser_Physics_P2_BodyDebug.alive = true;
Phaser_Physics_P2_BodyDebug.onChildInputUp = new Phaser_Signal();
Phaser_Physics_P2_BodyDebug.worldAlpha = 0;
Phaser_Physics_P2_BodyDebug.top = 0;
Phaser_Physics_P2_BodyDebug.angle = 0;
Phaser_Physics_P2_BodyDebug.onDestroy = new Phaser_Signal();
Phaser_Physics_P2_BodyDebug.right = 0;
Phaser_Physics_P2_BodyDebug.ignoreChildInput = true;
Phaser_Physics_P2_BodyDebug.onChildInputDown = new Phaser_Signal();
Phaser_Physics_P2_BodyDebug.ppu = 0;
Phaser_Physics_P2_BodyDebug.stage = new PIXI_Stage();
Phaser_Physics_P2_BodyDebug.ignoreDestroy = true;
Phaser_Physics_P2_BodyDebug.x = 0;
Phaser_Physics_P2_BodyDebug.exists = true;
Phaser_Physics_P2_BodyDebug.y = 0;
Phaser_Physics_P2_BodyDebug.z = 0;
Phaser_Physics_P2_BodyDebug.physicsBodyType = 0;
Phaser_Physics_P2_BodyDebug.body = new Phaser_Physics_P2_Body();
Phaser_Physics_P2_BodyDebug.onChildInputOut = new Phaser_Signal();
Phaser_Physics_P2_BodyDebug.worldTransform = new PIXI_Matrix();
Phaser_Physics_P2_BodyDebug.fixedToCamera = true;
Phaser_Physics_P2_BodyDebug.visible = true;
Phaser_Physics_P2_BodyDebug.inputEnableChildren = true;
Phaser_Physics_P2_BodyDebug.cameraOffset = new Phaser_Point();
Phaser_Physics_P2_BodyDebug.bottom = 0;
Phaser_Physics_P2_BodyDebug.name = "";
Phaser_Physics_P2_BodyDebug.position = new PIXI_Point();
Phaser_Physics_P2_BodyDebug.classType = new Object();
Phaser_Physics_P2_BodyDebug.cursor = new PIXI_DisplayObject();
Phaser_Physics_P2_BodyDebug.worldRotation = 0;
Phaser_Physics_P2_BodyDebug.game = new Phaser_Game();
Phaser_Physics_P2_BodyDebug.onChildInputOver = new Phaser_Signal();
Phaser_Physics_P2_BodyDebug.renderable = true;
Phaser_Physics_P2_BodyDebug.scale = new PIXI_Point();
Phaser_Physics_P2_BodyDebug.worldVisible = true;
Phaser_Physics_P2_BodyDebug.total = 0;
Phaser_Physics_P2_BodyDebug.alpha = 0;
Phaser_Physics_P2_BodyDebug.cacheAsBitmap = true;
Phaser_Physics_P2_BodyDebug.mask = new PIXI_Graphics();
Phaser_Physics_P2_BodyDebug.rotation = 0;
Phaser_Physics_P2_BodyDebug.length = 0;
Phaser_Physics_P2_BodyDebug.filters = new Array();
Phaser_Physics_P2_BodyDebug.pendingDestroy = true;
Phaser_Physics_P2_BodyDebug.hitArea = new Phaser_Rectangle();
Phaser_Physics_P2_BodyDebug.xy = function (index, x, y) {};
Phaser_Physics_P2_BodyDebug.descendingSortHandler = function (a, b) {};
Phaser_Physics_P2_BodyDebug.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_Physics_P2_BodyDebug.removeAll = function (destroy, silent, destroyTexture) {};
Phaser_Physics_P2_BodyDebug.customSort = function (sortHandler, context) {};
Phaser_Physics_P2_BodyDebug.bringToTop = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.moveUp = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.alignTo = function (parent, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_Physics_P2_BodyDebug.updateSpriteTransform = function () {};
Phaser_Physics_P2_BodyDebug.postUpdate = function () {};
Phaser_Physics_P2_BodyDebug.destroy = function (destroyChildren, soft) {};
Phaser_Physics_P2_BodyDebug.getFirstDead = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.forEachAlive = function (callback, callbackContext, args) {};
Phaser_Physics_P2_BodyDebug.resetCursor = function (index) { return new Object(); };
Phaser_Physics_P2_BodyDebug.addMultiple = function (children, silent) { return new Array(); };
Phaser_Physics_P2_BodyDebug.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.preUpdate = function () {};
Phaser_Physics_P2_BodyDebug.addToHash = function (child) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.callbackFromArray = function (child, callback, length) {};
Phaser_Physics_P2_BodyDebug.getClosestTo = function (object, callback, callbackContext) { return new Object(); };
Phaser_Physics_P2_BodyDebug.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.getByName = function (name) { return new Object(); };
Phaser_Physics_P2_BodyDebug.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_Physics_P2_BodyDebug.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.getFirstExists = function (exists, createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.draw = function () {};
Phaser_Physics_P2_BodyDebug.reverse = function () {};
Phaser_Physics_P2_BodyDebug.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_Physics_P2_BodyDebug.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.alignIn = function (container, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_Physics_P2_BodyDebug.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Physics_P2_BodyDebug.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Physics_P2_BodyDebug.getIndex = function (child) { return new Number(); };
Phaser_Physics_P2_BodyDebug.getBottom = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.replace = function (oldChild, newChild) { return new Object(); };
Phaser_Physics_P2_BodyDebug.align = function (rows, columns, cellWidth, cellHeight, position, offset) {};
Phaser_Physics_P2_BodyDebug.resetChild = function (child, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.getRandom = function (startIndex, length) { return new Object(); };
Phaser_Physics_P2_BodyDebug.forEachExists = function (callback, callbackContext, args) {};
Phaser_Physics_P2_BodyDebug.getTop = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.create = function (x, y, key, frame, exists, index) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.countDead = function () { return new Number(); };
Phaser_Physics_P2_BodyDebug.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.add = function (child, silent, index) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.swap = function (child1, child2) {};
Phaser_Physics_P2_BodyDebug.getFurthestFrom = function (object, callback, callbackContext) { return new Object(); };
Phaser_Physics_P2_BodyDebug.sort = function (key, order) {};
Phaser_Physics_P2_BodyDebug.moveDown = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.hasProperty = function (child, key) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Physics_P2_BodyDebug.updateZ = function () {};
Phaser_Physics_P2_BodyDebug.ascendingSortHandler = function (a, b) {};
Phaser_Physics_P2_BodyDebug.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_Physics_P2_BodyDebug.removeFromHash = function (child) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.next = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.forEachDead = function (callback, callbackContext, args) {};
Phaser_Physics_P2_BodyDebug.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.update = function () {};
Phaser_Physics_P2_BodyDebug.countLiving = function () { return new Number(); };
Phaser_Physics_P2_BodyDebug.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.callAll = function (method, context, args) {};
Phaser_Physics_P2_BodyDebug.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Physics_P2_BodyDebug.createMultiple = function (quantity, key, frame, exists) { return new Array(); };
Phaser_Physics_P2_BodyDebug.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Physics_P2_BodyDebug.callAllExists = function (callback, existsValue, parameter) {};
Phaser_Physics_P2_BodyDebug.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_Physics_P2_BodyDebug.previous = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_Physics_P2_BodyDebug.sendToBack = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.getFirstAlive = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };

var Phaser_Weapon = function (game, parent) {};
Phaser_Weapon.prototype = new Object();
Phaser_Weapon.KILL_NEVER = 0;
Phaser_Weapon.KILL_LIFESPAN = 0;
Phaser_Weapon.KILL_WEAPON_BOUNDS = 0;
Phaser_Weapon.KILL_WORLD_BOUNDS = 0;
Phaser_Weapon.KILL_DISTANCE = 0;
Phaser_Weapon.KILL_STATIC_BOUNDS = 0;
Phaser_Weapon.KILL_CAMERA_BOUNDS = 0;
Phaser_Weapon.fireRateVariance = 0;
Phaser_Weapon.onFireLimit = new Phaser_Signal();
Phaser_Weapon.bulletRotateToVelocity = true;
Phaser_Weapon.trackOffset = new Phaser_Point();
Phaser_Weapon.bulletAnimation = "";
Phaser_Weapon.bulletInheritSpriteSpeed = true;
Phaser_Weapon.bulletKillDistance = 0;
Phaser_Weapon.bulletAngleVariance = 0;
Phaser_Weapon.bulletKillType = 0;
Phaser_Weapon.bulletLifespan = 0;
Phaser_Weapon.bulletGravity = new Phaser_Point();
Phaser_Weapon.trackedPointer = new Phaser_Pointer();
Phaser_Weapon.autofire = true;
Phaser_Weapon.onFire = new Phaser_Signal();
Phaser_Weapon.bulletKey = "";
Phaser_Weapon.bulletCollideWorldBounds = true;
Phaser_Weapon.bulletClass = new Object();
Phaser_Weapon.bounds = new Phaser_Rectangle();
Phaser_Weapon.bulletFrames = new Array();
Phaser_Weapon.shots = 0;
Phaser_Weapon.onKill = new Phaser_Signal();
Phaser_Weapon.autoExpandBulletsGroup = true;
Phaser_Weapon.bulletFrameCycle = true;
Phaser_Weapon.fireRate = 0;
Phaser_Weapon.bulletFrame = "";
Phaser_Weapon.bulletSpeedVariance = 0;
Phaser_Weapon.bullets = new Phaser_Group();
Phaser_Weapon.fireFrom = new Phaser_Rectangle();
Phaser_Weapon.bulletWorldWrapPadding = 0;
Phaser_Weapon.trackedSprite = new Phaser_Sprite();
Phaser_Weapon.bulletWorldWrap = true;
Phaser_Weapon.bulletSpeed = 0;
Phaser_Weapon.bulletFrameRandom = true;
Phaser_Weapon.x = 0;
Phaser_Weapon.bulletAngleOffset = 0;
Phaser_Weapon.y = 0;
Phaser_Weapon.fireLimit = 0;
Phaser_Weapon.fireAngle = 0;
Phaser_Weapon.trackRotation = true;
Phaser_Weapon.fireAtXY = function (x, y) { return new Boolean(); };
Phaser_Weapon.fire = function (from, x, y) { return new Boolean(); };
Phaser_Weapon.pauseAll = function () { return new Phaser_Weapon(); };
Phaser_Weapon.addBulletAnimation = function (name, frames, frameRate, loop, useNumericIndex) { return new Phaser_Weapon(); };
Phaser_Weapon.resumeAll = function () { return new Phaser_Weapon(); };
Phaser_Weapon.destroy = function () {};
Phaser_Weapon.createBullets = function (quantity, key, frame, group) { return new Phaser_Weapon(); };
Phaser_Weapon.update = function () {};
Phaser_Weapon.resetShots = function (newLimit) { return new Phaser_Weapon(); };
Phaser_Weapon.fireAtPointer = function (pointer) { return new Boolean(); };
Phaser_Weapon.debug = function (x, y, debugBodies) {};
Phaser_Weapon.trackSprite = function (sprite, offsetX, offsetY, trackRotation) { return new Phaser_Weapon(); };
Phaser_Weapon.trackPointer = function (pointer, offsetX, offsetY) { return new Phaser_Weapon(); };
Phaser_Weapon.fireAtSprite = function (sprite) { return new Boolean(); };
Phaser_Weapon.setBulletFrames = function (min, max, cycle, random) { return new Phaser_Weapon(); };
Phaser_Weapon.forEach = function (callback, callbackContext, args) { return new Phaser_Weapon(); };
Phaser_Weapon.killAll = function () { return new Phaser_Weapon(); };
Phaser_Weapon.setBulletBodyOffset = function (width, height, offsetX, offsetY) { return new Phaser_Weapon(); };

var Phaser_World = function (game) {};
Phaser_World.prototype = new Phaser.Group();
Phaser_World.SORT_ASCENDING = 0;
Phaser_World.SORT_DESCENDING = 0;
Phaser_World.RETURN_NONE = 0;
Phaser_World.RETURN_CHILD = 0;
Phaser_World.RETURN_TOTAL = 0;
Phaser_World.parent = new PIXI_DisplayObjectContainer();
Phaser_World.centerY = 0;
Phaser_World.centerX = 0;
Phaser_World.type = 0;
Phaser_World.enableBody = true;
Phaser_World.children = [new PIXI_DisplayObject()];
Phaser_World.enableBodyDebug = true;
Phaser_World.pivot = new PIXI_Point();
Phaser_World.height = 0;
Phaser_World.physicsType = 0;
Phaser_World._definedSize = true;
Phaser_World.cursorIndex = 0;
Phaser_World.physicsSortDirection = 0;
Phaser_World.worldPosition = new PIXI_Point();
Phaser_World.left = 0;
Phaser_World.bounds = new Phaser_Rectangle();
Phaser_World.hash = new Array();
Phaser_World.filterArea = new PIXI_Rectangle();
Phaser_World.worldScale = new PIXI_Point();
Phaser_World.alive = true;
Phaser_World.onChildInputUp = new Phaser_Signal();
Phaser_World.worldAlpha = 0;
Phaser_World.top = 0;
Phaser_World.angle = 0;
Phaser_World.camera = new Phaser_Camera();
Phaser_World.onDestroy = new Phaser_Signal();
Phaser_World.right = 0;
Phaser_World.ignoreChildInput = true;
Phaser_World.onChildInputDown = new Phaser_Signal();
Phaser_World.stage = new PIXI_Stage();
Phaser_World.width = 0;
Phaser_World.ignoreDestroy = true;
Phaser_World.x = 0;
Phaser_World.exists = true;
Phaser_World.y = 0;
Phaser_World.z = 0;
Phaser_World.physicsBodyType = 0;
Phaser_World.onChildInputOut = new Phaser_Signal();
Phaser_World.worldTransform = new PIXI_Matrix();
Phaser_World.fixedToCamera = true;
Phaser_World.visible = true;
Phaser_World.inputEnableChildren = true;
Phaser_World.cameraOffset = new Phaser_Point();
Phaser_World.bottom = 0;
Phaser_World.name = "";
Phaser_World.position = new PIXI_Point();
Phaser_World.randomX = 0;
Phaser_World.classType = new Object();
Phaser_World.randomY = 0;
Phaser_World.cursor = new PIXI_DisplayObject();
Phaser_World.worldRotation = 0;
Phaser_World.game = new Phaser_Game();
Phaser_World.onChildInputOver = new Phaser_Signal();
Phaser_World.renderable = true;
Phaser_World.scale = new PIXI_Point();
Phaser_World.worldVisible = true;
Phaser_World.total = 0;
Phaser_World.alpha = 0;
Phaser_World.cacheAsBitmap = true;
Phaser_World.mask = new PIXI_Graphics();
Phaser_World.rotation = 0;
Phaser_World.length = 0;
Phaser_World.filters = new Array();
Phaser_World.pendingDestroy = true;
Phaser_World.hitArea = new Phaser_Rectangle();
Phaser_World.xy = function (index, x, y) {};
Phaser_World.descendingSortHandler = function (a, b) {};
Phaser_World.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_World.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_World.removeAll = function (destroy, silent, destroyTexture) {};
Phaser_World.customSort = function (sortHandler, context) {};
Phaser_World.bringToTop = function (child) { return new Object(); };
Phaser_World.moveUp = function (child) { return new Object(); };
Phaser_World.alignTo = function (parent, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_World.postUpdate = function () {};
Phaser_World.destroy = function (destroyChildren, soft) {};
Phaser_World.getFirstDead = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_World.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_World.forEachAlive = function (callback, callbackContext, args) {};
Phaser_World.resetCursor = function (index) { return new Object(); };
Phaser_World.addMultiple = function (children, silent) { return new Array(); };
Phaser_World.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_World.preUpdate = function () {};
Phaser_World.addToHash = function (child) { return new Boolean(); };
Phaser_World.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_World.callbackFromArray = function (child, callback, length) {};
Phaser_World.getClosestTo = function (object, callback, callbackContext) { return new Object(); };
Phaser_World.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.getByName = function (name) { return new Object(); };
Phaser_World.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_World.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_World.getFirstExists = function (exists, createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_World.reverse = function () {};
Phaser_World.setBounds = function (x, y, width, height) {};
Phaser_World.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_World.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.alignIn = function (container, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_World.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_World.wrap = function (sprite, padding, useBounds, horizontal, vertical) {};
Phaser_World.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_World.getIndex = function (child) { return new Number(); };
Phaser_World.getBottom = function () { return new Object(); };
Phaser_World.replace = function (oldChild, newChild) { return new Object(); };
Phaser_World.align = function (rows, columns, cellWidth, cellHeight, position, offset) {};
Phaser_World.resetChild = function (child, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_World.getRandom = function (startIndex, length) { return new Object(); };
Phaser_World.forEachExists = function (callback, callbackContext, args) {};
Phaser_World.getTop = function () { return new Object(); };
Phaser_World.create = function (x, y, key, frame, exists, index) { return new PIXI_DisplayObject(); };
Phaser_World.countDead = function () { return new Number(); };
Phaser_World.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.add = function (child, silent, index) { return new PIXI_DisplayObject(); };
Phaser_World.swap = function (child1, child2) {};
Phaser_World.getFurthestFrom = function (object, callback, callbackContext) { return new Object(); };
Phaser_World.stateChange = function () {};
Phaser_World.sort = function (key, order) {};
Phaser_World.moveDown = function (child) { return new Object(); };
Phaser_World.hasProperty = function (child, key) { return new Boolean(); };
Phaser_World.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_World.updateZ = function () {};
Phaser_World.ascendingSortHandler = function (a, b) {};
Phaser_World.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_World.removeFromHash = function (child) { return new Boolean(); };
Phaser_World.shutdown = function () {};
Phaser_World.next = function () { return new Object(); };
Phaser_World.forEachDead = function (callback, callbackContext, args) {};
Phaser_World.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_World.update = function () {};
Phaser_World.countLiving = function () { return new Number(); };
Phaser_World.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_World.callAll = function (method, context, args) {};
Phaser_World.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_World.createMultiple = function (quantity, key, frame, exists) { return new Array(); };
Phaser_World.boot = function () {};
Phaser_World.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_World.callAllExists = function (callback, existsValue, parameter) {};
Phaser_World.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_World.previous = function () { return new Object(); };
Phaser_World.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_World.sendToBack = function (child) { return new Object(); };
Phaser_World.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_World.getFirstAlive = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_World.resize = function (width, height) {};

var Phaser_RetroFont = function (game, key, characterWidth, characterHeight, chars, charsPerRow, xSpacing, ySpacing, xOffset, yOffset) {};
Phaser_RetroFont.prototype = new Phaser.RenderTexture();
Phaser_RetroFont.TEXT_SET2 = "";
Phaser_RetroFont.TEXT_SET3 = "";
Phaser_RetroFont.TEXT_SET1 = "";
Phaser_RetroFont.TEXT_SET10 = "";
Phaser_RetroFont.TEXT_SET6 = "";
Phaser_RetroFont.TEXT_SET7 = "";
Phaser_RetroFont.TEXT_SET4 = "";
Phaser_RetroFont.TEXT_SET5 = "";
Phaser_RetroFont.TEXT_SET8 = "";
Phaser_RetroFont.TEXT_SET9 = "";
Phaser_RetroFont.ALIGN_CENTER = "";
Phaser_RetroFont.ALIGN_RIGHT = "";
Phaser_RetroFont.TEXT_SET11 = "";
Phaser_RetroFont.ALIGN_LEFT = "";
Phaser_RetroFont.frameData = new Phaser_FrameData();
Phaser_RetroFont.game = new Phaser_Game();
Phaser_RetroFont.multiLine = true;
Phaser_RetroFont.autoUpperCase = true;
Phaser_RetroFont.stamp = new Phaser_Image();
Phaser_RetroFont.align = "";
Phaser_RetroFont.type = 0;
Phaser_RetroFont.characterWidth = 0;
Phaser_RetroFont.offsetX = 0;
Phaser_RetroFont.characterSpacingX = 0;
Phaser_RetroFont.characterSpacingY = 0;
Phaser_RetroFont.offsetY = 0;
Phaser_RetroFont.text = "";
Phaser_RetroFont.key = "";
Phaser_RetroFont.fixedWidth = 0;
Phaser_RetroFont.smoothed = true;
Phaser_RetroFont.characterPerRow = 0;
Phaser_RetroFont.characterHeight = 0;
Phaser_RetroFont.customSpacingX = 0;
Phaser_RetroFont.customSpacingY = 0;
Phaser_RetroFont.fontSet = new Phaser_Image();
Phaser_RetroFont.removeUnsupportedCharacters = function (stripCR) { return new String(); };
Phaser_RetroFont.renderRawXY = function (displayObject, x, y, clear) {};
Phaser_RetroFont.setFixedWidth = function (width, lineAlignment) {};
Phaser_RetroFont.renderXY = function (displayObject, x, y, clear) {};
Phaser_RetroFont.render = function (displayObject, matrix, clear) {};
Phaser_RetroFont.getLongestLine = function () { return new Number(); };
Phaser_RetroFont.updateOffset = function (xOffset, yOffset) {};
Phaser_RetroFont.pasteLine = function (line, x, y, customSpacingX) {};
Phaser_RetroFont.buildRetroFontText = function () {};
Phaser_RetroFont.setText = function (content, multiLine, characterSpacing, lineSpacing, lineAlignment, allowLowerCase) {};

var Phaser_TilemapLayer = function (game, tilemap, index, width, height) {};
Phaser_TilemapLayer.prototype = new Phaser.Sprite();
Phaser_TilemapLayer.parent = new PIXI_DisplayObjectContainer();
Phaser_TilemapLayer.centerY = 0;
Phaser_TilemapLayer.centerX = 0;
Phaser_TilemapLayer.lifespan = 0;
Phaser_TilemapLayer.outOfBoundsKill = true;
Phaser_TilemapLayer.type = 0;
Phaser_TilemapLayer.rayStepRate = 0;
Phaser_TilemapLayer.children = [new PIXI_DisplayObject()];
Phaser_TilemapLayer.pivot = new PIXI_Point();
Phaser_TilemapLayer.maxHealth = 0;
Phaser_TilemapLayer.scrollFactorX = 0;
Phaser_TilemapLayer.scrollFactorY = 0;
Phaser_TilemapLayer.events = new Phaser_Events();
Phaser_TilemapLayer.physicsType = 0;
Phaser_TilemapLayer.canvas = new HTMLCanvasElement();
Phaser_TilemapLayer.smoothed = true;
Phaser_TilemapLayer.index = 0;
Phaser_TilemapLayer.renderSettings = new Object();
Phaser_TilemapLayer.input = new Phaser_InputHandler();
Phaser_TilemapLayer.worldPosition = new PIXI_Point();
Phaser_TilemapLayer.left = 0;
Phaser_TilemapLayer.filterArea = new PIXI_Rectangle();
Phaser_TilemapLayer.components = new Object();
Phaser_TilemapLayer.worldScale = new PIXI_Point();
Phaser_TilemapLayer.alive = true;
Phaser_TilemapLayer.transformCallback = new Function();
Phaser_TilemapLayer.inWorld = true;
Phaser_TilemapLayer.layer = new Object();
Phaser_TilemapLayer.worldAlpha = 0;
Phaser_TilemapLayer.world = new Phaser_Point();
Phaser_TilemapLayer.top = 0;
Phaser_TilemapLayer.angle = 0;
Phaser_TilemapLayer.checkWorldBounds = true;
Phaser_TilemapLayer.map = new Phaser_Tilemap();
Phaser_TilemapLayer.key = "";
Phaser_TilemapLayer.dirty = true;
Phaser_TilemapLayer.texture = new Texture();
Phaser_TilemapLayer.health = 0;
Phaser_TilemapLayer.outOfCameraBoundsKill = true;
Phaser_TilemapLayer.destroyPhase = true;
Phaser_TilemapLayer.right = 0;
Phaser_TilemapLayer.previousPosition = new Phaser_Point();
Phaser_TilemapLayer.scaleMax = new Phaser_Point();
Phaser_TilemapLayer.ignoreChildInput = true;
Phaser_TilemapLayer.stage = new PIXI_Stage();
Phaser_TilemapLayer.anchor = new Phaser_Point();
Phaser_TilemapLayer.autoCull = true;
Phaser_TilemapLayer.x = 0;
Phaser_TilemapLayer.exists = true;
Phaser_TilemapLayer.y = 0;
Phaser_TilemapLayer.z = 0;
Phaser_TilemapLayer.scaleMin = new Phaser_Point();
Phaser_TilemapLayer.data = new Object();
Phaser_TilemapLayer.body = new Phaser_Physics_Arcade_Body();
Phaser_TilemapLayer.inCamera = true;
Phaser_TilemapLayer.offsetX = 0;
Phaser_TilemapLayer.tintedTexture = new Phaser_Canvas();
Phaser_TilemapLayer.offsetY = 0;
Phaser_TilemapLayer.worldTransform = new PIXI_Matrix();
Phaser_TilemapLayer.fixedToCamera = true;
Phaser_TilemapLayer.renderOrderID = 0;
Phaser_TilemapLayer.previousRotation = 0;
Phaser_TilemapLayer.visible = true;
Phaser_TilemapLayer.bottom = 0;
Phaser_TilemapLayer.cameraOffset = new Phaser_Point();
Phaser_TilemapLayer.name = "";
Phaser_TilemapLayer.position = new PIXI_Point();
Phaser_TilemapLayer.frame = 0;
Phaser_TilemapLayer.worldRotation = 0;
Phaser_TilemapLayer.shader = new PIXI_AbstractFilter();
Phaser_TilemapLayer.cropRect = new Phaser_Rectangle();
Phaser_TilemapLayer.game = new Phaser_Game();
Phaser_TilemapLayer.renderable = true;
Phaser_TilemapLayer.deltaZ = 0;
Phaser_TilemapLayer.transformCallbackContext = new Object();
Phaser_TilemapLayer.deltaX = 0;
Phaser_TilemapLayer.deltaY = 0;
Phaser_TilemapLayer.scale = new PIXI_Point();
Phaser_TilemapLayer.tint = 0;
Phaser_TilemapLayer.inputEnabled = true;
Phaser_TilemapLayer.worldVisible = true;
Phaser_TilemapLayer.debugSettings = new Object();
Phaser_TilemapLayer.animations = new Phaser_AnimationManager();
Phaser_TilemapLayer.alpha = 0;
Phaser_TilemapLayer.cacheAsBitmap = true;
Phaser_TilemapLayer.mask = new PIXI_Graphics();
Phaser_TilemapLayer.debug = true;
Phaser_TilemapLayer.frameName = "";
Phaser_TilemapLayer.rotation = 0;
Phaser_TilemapLayer.filters = new Array();
Phaser_TilemapLayer.pendingDestroy = true;
Phaser_TilemapLayer.blendMode = 0;
Phaser_TilemapLayer.hitArea = new Phaser_Rectangle();
Phaser_TilemapLayer.fresh = true;
Phaser_TilemapLayer.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_TilemapLayer.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.resizeFrame = function (parent, width, height) {};
Phaser_TilemapLayer.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_TilemapLayer.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.init = function () {};
Phaser_TilemapLayer.postUpdate = function () {};
Phaser_TilemapLayer.getRayCastTiles = function (line, stepRate, collides, interestingFace) { return new Array(); };
Phaser_TilemapLayer.getTileXY = function (x, y, point) { return new Phaser_Point(); };
Phaser_TilemapLayer.destroy = function () {};
Phaser_TilemapLayer.install = function () {};
Phaser_TilemapLayer.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.preUpdate = function () {};
Phaser_TilemapLayer.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_TilemapLayer.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_TilemapLayer.resetTilesetCache = function () {};
Phaser_TilemapLayer.kill = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_TilemapLayer.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_TilemapLayer.getTileY = function (y) { return new Number(); };
Phaser_TilemapLayer.getTileX = function (x) { return new Number(); };
Phaser_TilemapLayer.ensureSharedCopyCanvas = function () {};
Phaser_TilemapLayer.setScale = function (xScale, yScale) {};
Phaser_TilemapLayer.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.updateCrop = function () {};
Phaser_TilemapLayer.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_TilemapLayer.overlap = function (displayObject) { return new Boolean(); };
Phaser_TilemapLayer.loadTexture = function (key, frame, stopAnimation) {};
Phaser_TilemapLayer.crop = function (rect, copy) {};
Phaser_TilemapLayer.resizeWorld = function () {};
Phaser_TilemapLayer.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.update = function () {};
Phaser_TilemapLayer.setFrame = function (frame) {};
Phaser_TilemapLayer.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_TilemapLayer.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_TilemapLayer.render = function () {};
Phaser_TilemapLayer.setHealth = function (amount) { return new Phaser_Sprite(); };
Phaser_TilemapLayer.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.resetFrame = function () {};
Phaser_TilemapLayer.resize = function (width, height) {};
Phaser_TilemapLayer.getTiles = function (x, y, width, height, collides, interestingFace) { return new Array(); };

var Phaser_Utils_Debug = function (game) {};
Phaser_Utils_Debug.prototype = new Object();
Phaser_Utils_Debug.game = new Phaser_Game();
Phaser_Utils_Debug.currentAlpha = 0;
Phaser_Utils_Debug.currentY = 0;
Phaser_Utils_Debug.renderShadow = true;
Phaser_Utils_Debug.sprite = new Phaser_Image();
Phaser_Utils_Debug.context = new CanvasRenderingContext2D();
Phaser_Utils_Debug.columnWidth = 0;
Phaser_Utils_Debug.dirty = true;
Phaser_Utils_Debug.canvas = new HTMLCanvasElement();
Phaser_Utils_Debug.currentX = 0;
Phaser_Utils_Debug.bmd = new Phaser_BitmapData();
Phaser_Utils_Debug.lineHeight = 0;
Phaser_Utils_Debug.font = "";
Phaser_Utils_Debug.ropeSegments = function (rope, color, filled) {};
Phaser_Utils_Debug.line = function () {};
Phaser_Utils_Debug.spriteInputInfo = function (sprite, x, y, color) {};
Phaser_Utils_Debug.bodyInfo = function (sprite, x, y, color) {};
Phaser_Utils_Debug.quadTree = function (quadtree, color) {};
Phaser_Utils_Debug.geom = function (object, color, filled, forceType) {};
Phaser_Utils_Debug.body = function (sprite, color, filled) {};
Phaser_Utils_Debug.box2dBody = function (sprite, color) {};
Phaser_Utils_Debug.timer = function (timer, x, y, color) {};
Phaser_Utils_Debug.spriteInfo = function (sprite, x, y, color) {};
Phaser_Utils_Debug.lineInfo = function (line, x, y, color) {};
Phaser_Utils_Debug.text = function (text, x, y, color, font) {};
Phaser_Utils_Debug.boot = function () {};
Phaser_Utils_Debug.pixel = function (x, y, color, size) {};
Phaser_Utils_Debug.key = function (key, x, y, color) {};
Phaser_Utils_Debug.inputInfo = function (x, y, color) {};
Phaser_Utils_Debug.pointer = function (pointer, hideIfUp, downColor, upColor, color) {};
Phaser_Utils_Debug.box2dWorld = function () {};
Phaser_Utils_Debug.spriteCoords = function (sprite, x, y, color) {};
Phaser_Utils_Debug.start = function (x, y, color, columnWidth) {};
Phaser_Utils_Debug.destroy = function () {};
Phaser_Utils_Debug.spriteBounds = function (sprite, color, filled) {};
Phaser_Utils_Debug.soundInfo = function (sound, x, y, color) {};
Phaser_Utils_Debug.stop = function () {};
Phaser_Utils_Debug.resize = function (scaleManager, width, height) {};
Phaser_Utils_Debug.reset = function () {};
Phaser_Utils_Debug.preUpdate = function () {};
Phaser_Utils_Debug.cameraInfo = function (camera, x, y, color) {};

var Phaser_Easing_Back = function () {};
Phaser_Easing_Back.prototype = new Object();
Phaser_Easing_Back.In = function (k) { return new Number(); };
Phaser_Easing_Back.InOut = function (k) { return new Number(); };
Phaser_Easing_Back.Out = function (k) { return new Number(); };

var Phaser_ArrayUtils = function () {};
Phaser_ArrayUtils.prototype = new Object();
Phaser_ArrayUtils.rotate = function (array) { return new Object(); };
Phaser_ArrayUtils.numberArray = function (start, end) { return new Array(); };
Phaser_ArrayUtils.rotateRight = function (array) { return new Object(); };
Phaser_ArrayUtils.rotateMatrix = function (matrix, direction) { return new Array(); };
Phaser_ArrayUtils.removeRandomItem = function (objects, startIndex, length) { return new Object(); };
Phaser_ArrayUtils.rotateLeft = function (array) { return new Object(); };
Phaser_ArrayUtils.transposeMatrix = function (array) { return new Array(); };
Phaser_ArrayUtils.findClosest = function (value, arr) { return new Number(); };
Phaser_ArrayUtils.getRandomItem = function (objects, startIndex, length) { return new Object(); };
Phaser_ArrayUtils.shuffle = function (array) { return new Array(); };
Phaser_ArrayUtils.numberArrayStep = function (start, end, step) { return new Array(); };

var Phaser_ScaleManager = function (game, width, height) {};
Phaser_ScaleManager.prototype = new Object();
Phaser_ScaleManager.SHOW_ALL = 0;
Phaser_ScaleManager.RESIZE = 0;
Phaser_ScaleManager.NO_SCALE = 0;
Phaser_ScaleManager.USER_SCALE = 0;
Phaser_ScaleManager.EXACT_FIT = 0;
Phaser_ScaleManager.scaleMode = 0;
Phaser_ScaleManager.onOrientationChange = new Phaser_Signal();
Phaser_ScaleManager.isGameLandscape = true;
Phaser_ScaleManager.aspectRatio = 0;
Phaser_ScaleManager.boundingParent = new DOMElement();
Phaser_ScaleManager.minHeight = 0;
Phaser_ScaleManager.enterIncorrectOrientation = new Phaser_Signal();
Phaser_ScaleManager.fullScreenScaleMode = 0;
Phaser_ScaleManager.scaleFactorInversed = new Phaser_Point();
Phaser_ScaleManager.onFullScreenChange = new Phaser_Signal();
Phaser_ScaleManager.windowConstraints = new Object();
Phaser_ScaleManager.height = 0;
Phaser_ScaleManager.maxWidth = 0;
Phaser_ScaleManager.isGamePortrait = true;
Phaser_ScaleManager.margin = new Bounds_like();
Phaser_ScaleManager.parentIsWindow = true;
Phaser_ScaleManager.offset = new Phaser_Point();
Phaser_ScaleManager.sourceAspectRatio = 0;
Phaser_ScaleManager.parentNode = new DOMElement();
Phaser_ScaleManager.onFullScreenInit = new Phaser_Signal();
Phaser_ScaleManager.isLandscape = true;
Phaser_ScaleManager.bounds = new Phaser_Rectangle();
Phaser_ScaleManager.compatibility = new Object();
Phaser_ScaleManager.game = new Phaser_Game();
Phaser_ScaleManager.dom = new Phaser_DOM();
Phaser_ScaleManager.isPortrait = true;
Phaser_ScaleManager.pageAlignVertically = true;
Phaser_ScaleManager.screenOrientation = "";
Phaser_ScaleManager.maxHeight = 0;
Phaser_ScaleManager.onFullScreenError = new Phaser_Signal();
Phaser_ScaleManager.onSizeChange = new Phaser_Signal();
Phaser_ScaleManager.pageAlignHorizontally = true;
Phaser_ScaleManager.trackParentInterval = 0;
Phaser_ScaleManager.leaveIncorrectOrientation = new Phaser_Signal();
Phaser_ScaleManager.scaleFactor = new Phaser_Point();
Phaser_ScaleManager.minWidth = 0;
Phaser_ScaleManager.forcePortrait = true;
Phaser_ScaleManager.fullScreenTarget = new DOMElement();
Phaser_ScaleManager.parentScaleFactor = new Phaser_Point();
Phaser_ScaleManager.incorrectOrientation = true;
Phaser_ScaleManager.grid = new Phaser_FlexGrid();
Phaser_ScaleManager.width = 0;
Phaser_ScaleManager.isFullScreen = true;
Phaser_ScaleManager.currentScaleMode = 0;
Phaser_ScaleManager.forceLandscape = true;
Phaser_ScaleManager.forceOrientation = function (forceLandscape, forcePortrait) {};
Phaser_ScaleManager.setGameSize = function (width, height) {};
Phaser_ScaleManager.stopFullScreen = function () { return new Boolean(); };
Phaser_ScaleManager.parseConfig = function (config) {};
Phaser_ScaleManager.destroy = function () {};
Phaser_ScaleManager.createFullScreenTarget = function () {};
Phaser_ScaleManager.setResizeCallback = function (callback, context) {};
Phaser_ScaleManager.setUserScale = function (hScale, vScale, hTrim, vTrim) {};
Phaser_ScaleManager.preUpdate = function () {};
Phaser_ScaleManager.scaleSprite = function (sprite, width, height, letterBox) { return new Phaser_Sprite(); };
Phaser_ScaleManager.setupScale = function (width, height) {};
Phaser_ScaleManager.boot = function () {};
Phaser_ScaleManager.startFullScreen = function (antialias, allowTrampoline) { return new Boolean(); };
Phaser_ScaleManager.refresh = function () {};
Phaser_ScaleManager.setMinMax = function (minWidth, minHeight, maxWidth, maxHeight) {};
Phaser_ScaleManager.getParentBounds = function (target) { return new Phaser_Rectangle(); };

var CanvasTinter = function () {};
CanvasTinter.prototype = new Object();

var Phaser_Physics_Ninja_Tile = function (body, x, y, width, height, type) {};
Phaser_Physics_Ninja_Tile.prototype = new Object();
Phaser_Physics_Ninja_Tile.bottom = 0;
Phaser_Physics_Ninja_Tile.oldpos = new Phaser_Point();
Phaser_Physics_Ninja_Tile.velocity = new Phaser_Point();
Phaser_Physics_Ninja_Tile.right = 0;
Phaser_Physics_Ninja_Tile.type = 0;
Phaser_Physics_Ninja_Tile.system = new Phaser_Physics_Ninja_Body();
Phaser_Physics_Ninja_Tile.pos = new Phaser_Point();
Phaser_Physics_Ninja_Tile.width = 0;
Phaser_Physics_Ninja_Tile.x = 0;
Phaser_Physics_Ninja_Tile.y = 0;
Phaser_Physics_Ninja_Tile.id = 0;
Phaser_Physics_Ninja_Tile.xw = 0;
Phaser_Physics_Ninja_Tile.height = 0;
Phaser_Physics_Ninja_Tile.clear = function () {};
Phaser_Physics_Ninja_Tile.destroy = function () {};
Phaser_Physics_Ninja_Tile.setType = function (id) {};
Phaser_Physics_Ninja_Tile.integrate = function () {};
Phaser_Physics_Ninja_Tile.reportCollisionVsWorld = function (px, py, dx, dy, obj) {};
Phaser_Physics_Ninja_Tile.collideWorldBounds = function () {};

var Phaser_Bullet = function (game, x, y, key, frame) {};
Phaser_Bullet.prototype = new Phaser.Sprite();
Phaser_Bullet.parent = new PIXI_DisplayObjectContainer();
Phaser_Bullet.centerY = 0;
Phaser_Bullet.centerX = 0;
Phaser_Bullet.lifespan = 0;
Phaser_Bullet.outOfBoundsKill = true;
Phaser_Bullet.type = 0;
Phaser_Bullet.children = [new PIXI_DisplayObject()];
Phaser_Bullet.pivot = new PIXI_Point();
Phaser_Bullet.maxHealth = 0;
Phaser_Bullet.events = new Phaser_Events();
Phaser_Bullet.physicsType = 0;
Phaser_Bullet.smoothed = true;
Phaser_Bullet.input = new Phaser_InputHandler();
Phaser_Bullet.worldPosition = new PIXI_Point();
Phaser_Bullet.left = 0;
Phaser_Bullet.filterArea = new PIXI_Rectangle();
Phaser_Bullet.components = new Object();
Phaser_Bullet.worldScale = new PIXI_Point();
Phaser_Bullet.alive = true;
Phaser_Bullet.transformCallback = new Function();
Phaser_Bullet.inWorld = true;
Phaser_Bullet.worldAlpha = 0;
Phaser_Bullet.world = new Phaser_Point();
Phaser_Bullet.top = 0;
Phaser_Bullet.angle = 0;
Phaser_Bullet.checkWorldBounds = true;
Phaser_Bullet.key = "";
Phaser_Bullet.texture = new Texture();
Phaser_Bullet.health = 0;
Phaser_Bullet.outOfCameraBoundsKill = true;
Phaser_Bullet.destroyPhase = true;
Phaser_Bullet.right = 0;
Phaser_Bullet.previousPosition = new Phaser_Point();
Phaser_Bullet.scaleMax = new Phaser_Point();
Phaser_Bullet.ignoreChildInput = true;
Phaser_Bullet.stage = new PIXI_Stage();
Phaser_Bullet.anchor = new Phaser_Point();
Phaser_Bullet.autoCull = true;
Phaser_Bullet.x = 0;
Phaser_Bullet.exists = true;
Phaser_Bullet.y = 0;
Phaser_Bullet.z = 0;
Phaser_Bullet.scaleMin = new Phaser_Point();
Phaser_Bullet.data = new Object();
Phaser_Bullet.body = new Phaser_Physics_Arcade_Body();
Phaser_Bullet.inCamera = true;
Phaser_Bullet.offsetX = 0;
Phaser_Bullet.tintedTexture = new Phaser_Canvas();
Phaser_Bullet.offsetY = 0;
Phaser_Bullet.worldTransform = new PIXI_Matrix();
Phaser_Bullet.fixedToCamera = true;
Phaser_Bullet.renderOrderID = 0;
Phaser_Bullet.previousRotation = 0;
Phaser_Bullet.visible = true;
Phaser_Bullet.bottom = 0;
Phaser_Bullet.cameraOffset = new Phaser_Point();
Phaser_Bullet.name = "";
Phaser_Bullet.position = new PIXI_Point();
Phaser_Bullet.frame = 0;
Phaser_Bullet.worldRotation = 0;
Phaser_Bullet.shader = new PIXI_AbstractFilter();
Phaser_Bullet.cropRect = new Phaser_Rectangle();
Phaser_Bullet.game = new Phaser_Game();
Phaser_Bullet.renderable = true;
Phaser_Bullet.deltaZ = 0;
Phaser_Bullet.transformCallbackContext = new Object();
Phaser_Bullet.deltaX = 0;
Phaser_Bullet.deltaY = 0;
Phaser_Bullet.scale = new PIXI_Point();
Phaser_Bullet.tint = 0;
Phaser_Bullet.inputEnabled = true;
Phaser_Bullet.worldVisible = true;
Phaser_Bullet.animations = new Phaser_AnimationManager();
Phaser_Bullet.alpha = 0;
Phaser_Bullet.cacheAsBitmap = true;
Phaser_Bullet.mask = new PIXI_Graphics();
Phaser_Bullet.debug = true;
Phaser_Bullet.frameName = "";
Phaser_Bullet.rotation = 0;
Phaser_Bullet.filters = new Array();
Phaser_Bullet.pendingDestroy = true;
Phaser_Bullet.blendMode = 0;
Phaser_Bullet.hitArea = new Phaser_Rectangle();
Phaser_Bullet.fresh = true;
Phaser_Bullet.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Bullet.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Bullet.resizeFrame = function (parent, width, height) {};
Phaser_Bullet.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Bullet.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Bullet.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Bullet.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Bullet.init = function () {};
Phaser_Bullet.postUpdate = function () {};
Phaser_Bullet.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Bullet.install = function () {};
Phaser_Bullet.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Bullet.preUpdate = function () { return new Boolean(); };
Phaser_Bullet.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Bullet.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Bullet.kill = function () {};
Phaser_Bullet.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Bullet.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Bullet.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Bullet.updateCrop = function () {};
Phaser_Bullet.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Bullet.overlap = function (displayObject) { return new Boolean(); };
Phaser_Bullet.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Bullet.crop = function (rect, copy) {};
Phaser_Bullet.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Bullet.update = function () {};
Phaser_Bullet.setFrame = function (frame) {};
Phaser_Bullet.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Bullet.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Bullet.setHealth = function (amount) { return new Phaser_Sprite(); };
Phaser_Bullet.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Bullet.resetFrame = function () {};

var Phaser_Camera = function (game, id, x, y, width, height) {};
Phaser_Camera.prototype = new Object();
Phaser_Camera.FOLLOW_LOCKON = 0;
Phaser_Camera.SHAKE_HORIZONTAL = 0;
Phaser_Camera.FOLLOW_TOPDOWN = 0;
Phaser_Camera.SHAKE_VERTICAL = 0;
Phaser_Camera.FOLLOW_PLATFORMER = 0;
Phaser_Camera.FOLLOW_TOPDOWN_TIGHT = 0;
Phaser_Camera.SHAKE_BOTH = 0;
Phaser_Camera.ENABLE_FX = true;
Phaser_Camera.game = new Phaser_Game();
Phaser_Camera.lerp = new Phaser_Point();
Phaser_Camera.atLimit = true;
Phaser_Camera.scale = new Phaser_Point();
Phaser_Camera.onShakeComplete = new Phaser_Signal();
Phaser_Camera.view = new Phaser_Rectangle();
Phaser_Camera.fx = new Phaser_Graphics();
Phaser_Camera.world = new Phaser_World();
Phaser_Camera.onFadeComplete = new Phaser_Signal();
Phaser_Camera.id = 0;
Phaser_Camera.deadzone = new Phaser_Rectangle();
Phaser_Camera.height = 0;
Phaser_Camera.roundPx = true;
Phaser_Camera.visible = true;
Phaser_Camera.onFlashComplete = new Phaser_Signal();
Phaser_Camera.target = new Phaser_Sprite();
Phaser_Camera.displayObject = new PIXI_DisplayObject();
Phaser_Camera.bounds = new Phaser_Rectangle();
Phaser_Camera.totalInView = 0;
Phaser_Camera.x = 0;
Phaser_Camera.width = 0;
Phaser_Camera.y = 0;
Phaser_Camera.position = new Phaser_Point();
Phaser_Camera.shakeIntensity = 0;
Phaser_Camera.shake = function (intensity, duration, force, direction, shakeBounds) { return new Boolean(); };
Phaser_Camera.resetFX = function () {};
Phaser_Camera.focusOnXY = function (x, y) {};
Phaser_Camera.update = function () {};
Phaser_Camera.setPosition = function (x, y) {};
Phaser_Camera.fade = function (color, duration, force) { return new Boolean(); };
Phaser_Camera.setSize = function (width, height) {};
Phaser_Camera.checkBounds = function () {};
Phaser_Camera.focusOn = function (displayObject) {};
Phaser_Camera.follow = function (target, style, lerpX, lerpY) {};
Phaser_Camera.setBoundsToWorld = function () {};
Phaser_Camera.reset = function () {};
Phaser_Camera.preUpdate = function () {};
Phaser_Camera.unfollow = function () {};
Phaser_Camera.flash = function (color, duration, force) { return new Boolean(); };

var Phaser_Text = function (game, x, y, text, style, style_font, style_fontStyle, style_fontVariant, style_fontWeight, style_fontSize, style_backgroundColor, style_fill, style_align, style_boundsAlignH, style_boundsAlignV, style_stroke, style_strokeThickness, style_wordWrap, style_wordWrapWidth, style_maxLines, style_tabs) {};
Phaser_Text.prototype = new Phaser.Sprite();
Phaser_Text.parent = new PIXI_DisplayObjectContainer();
Phaser_Text.centerY = 0;
Phaser_Text.centerX = 0;
Phaser_Text.lifespan = 0;
Phaser_Text.outOfBoundsKill = true;
Phaser_Text.type = 0;
Phaser_Text.resolution = 0;
Phaser_Text.useAdvancedWrap = true;
Phaser_Text.children = [new PIXI_DisplayObject()];
Phaser_Text.context = new HTMLCanvasElement();
Phaser_Text.pivot = new PIXI_Point();
Phaser_Text.maxHealth = 0;
Phaser_Text.text = "";
Phaser_Text.shadowColor = "";
Phaser_Text.events = new Phaser_Events();
Phaser_Text.physicsType = 0;
Phaser_Text.height = 0;
Phaser_Text.canvas = new HTMLCanvasElement();
Phaser_Text.smoothed = true;
Phaser_Text.fontStyle = "";
Phaser_Text.input = new Phaser_InputHandler();
Phaser_Text.worldPosition = new PIXI_Point();
Phaser_Text.left = 0;
Phaser_Text.fontSize = 0;
Phaser_Text.filterArea = new PIXI_Rectangle();
Phaser_Text.shadowOffsetX = 0;
Phaser_Text.shadowOffsetY = 0;
Phaser_Text.components = new Object();
Phaser_Text.worldScale = new PIXI_Point();
Phaser_Text.alive = true;
Phaser_Text.tabs = 0;
Phaser_Text.transformCallback = new Function();
Phaser_Text.inWorld = true;
Phaser_Text.colors = new Array();
Phaser_Text.cssFont = "";
Phaser_Text.worldAlpha = 0;
Phaser_Text.fontStyles = new Array();
Phaser_Text.autoRound = true;
Phaser_Text.world = new Phaser_Point();
Phaser_Text.top = 0;
Phaser_Text.angle = 0;
Phaser_Text.fontWeights = new Array();
Phaser_Text.textBounds = new Phaser_Rectangle();
Phaser_Text.checkWorldBounds = true;
Phaser_Text.key = "";
Phaser_Text.shadowStroke = true;
Phaser_Text.texture = new Texture();
Phaser_Text.health = 0;
Phaser_Text.outOfCameraBoundsKill = true;
Phaser_Text.destroyPhase = true;
Phaser_Text.boundsAlignH = "";
Phaser_Text.right = 0;
Phaser_Text.previousPosition = new Phaser_Point();
Phaser_Text.scaleMax = new Phaser_Point();
Phaser_Text.ignoreChildInput = true;
Phaser_Text.stage = new PIXI_Stage();
Phaser_Text.anchor = new Phaser_Point();
Phaser_Text.strokeThickness = 0;
Phaser_Text.width = 0;
Phaser_Text.autoCull = true;
Phaser_Text.x = 0;
Phaser_Text.exists = true;
Phaser_Text.y = 0;
Phaser_Text.z = 0;
Phaser_Text.font = "";
Phaser_Text.scaleMin = new Phaser_Point();
Phaser_Text.data = new Object();
Phaser_Text.shadowBlur = 0;
Phaser_Text.fontVariant = "";
Phaser_Text.align = "";
Phaser_Text.body = new Phaser_Physics_Arcade_Body();
Phaser_Text.lineSpacing = 0;
Phaser_Text.inCamera = true;
Phaser_Text.offsetX = 0;
Phaser_Text.tintedTexture = new Phaser_Canvas();
Phaser_Text.offsetY = 0;
Phaser_Text.boundsAlignV = "";
Phaser_Text.worldTransform = new PIXI_Matrix();
Phaser_Text.fixedToCamera = true;
Phaser_Text.renderOrderID = 0;
Phaser_Text.fontWeight = "";
Phaser_Text.previousRotation = 0;
Phaser_Text.visible = true;
Phaser_Text.bottom = 0;
Phaser_Text.cameraOffset = new Phaser_Point();
Phaser_Text.fill = new Object();
Phaser_Text.strokeColors = new Array();
Phaser_Text.name = "";
Phaser_Text.position = new PIXI_Point();
Phaser_Text.frame = 0;
Phaser_Text.worldRotation = 0;
Phaser_Text.shader = new PIXI_AbstractFilter();
Phaser_Text.cropRect = new Phaser_Rectangle();
Phaser_Text.game = new Phaser_Game();
Phaser_Text.renderable = true;
Phaser_Text.deltaZ = 0;
Phaser_Text.transformCallbackContext = new Object();
Phaser_Text.wordWrap = true;
Phaser_Text.deltaX = 0;
Phaser_Text.deltaY = 0;
Phaser_Text.scale = new PIXI_Point();
Phaser_Text.tint = 0;
Phaser_Text.inputEnabled = true;
Phaser_Text.worldVisible = true;
Phaser_Text.animations = new Phaser_AnimationManager();
Phaser_Text.alpha = 0;
Phaser_Text.cacheAsBitmap = true;
Phaser_Text.mask = new PIXI_Graphics();
Phaser_Text.padding = new Phaser_Point();
Phaser_Text.debug = true;
Phaser_Text.frameName = "";
Phaser_Text.wordWrapWidth = 0;
Phaser_Text.shadowFill = true;
Phaser_Text.rotation = 0;
Phaser_Text.filters = new Array();
Phaser_Text.stroke = "";
Phaser_Text.pendingDestroy = true;
Phaser_Text.blendMode = 0;
Phaser_Text.hitArea = new Phaser_Rectangle();
Phaser_Text.fresh = true;
Phaser_Text.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Text.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Text.updateShadow = function (state) {};
Phaser_Text.getBounds = function (matrix) { return new Phaser_Rectangle(); };
Phaser_Text.resizeFrame = function (parent, width, height) {};
Phaser_Text.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Text.clearFontValues = function () { return new Phaser_Text(); };
Phaser_Text.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Text.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Text.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Text.init = function () {};
Phaser_Text.postUpdate = function () {};
Phaser_Text.destroy = function (destroyChildren) {};
Phaser_Text.addStrokeColor = function (color, position) { return new Phaser_Text(); };
Phaser_Text.install = function () {};
Phaser_Text.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Text.setTextBounds = function (x, y, width, height) { return new Phaser_Text(); };
Phaser_Text.preUpdate = function () {};
Phaser_Text.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Text.addFontWeight = function (style, position) { return new Phaser_Text(); };
Phaser_Text.parseList = function (list) { return new Phaser_Text(); };
Phaser_Text.setShadow = function (x, y, color, blur, shadowStroke, shadowFill) { return new Phaser_Text(); };
Phaser_Text.addFontStyle = function (style, position) { return new Phaser_Text(); };
Phaser_Text.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Text.precalculateWordWrap = function (text) { return new Array(); };
Phaser_Text.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Text.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Text.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Text.addColor = function (color, position) { return new Phaser_Text(); };
Phaser_Text.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Text.updateCrop = function () {};
Phaser_Text.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Text.overlap = function (displayObject) { return new Boolean(); };
Phaser_Text.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Text.crop = function (rect, copy) {};
Phaser_Text.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Text.update = function () {};
Phaser_Text.setFrame = function (frame) {};
Phaser_Text.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Text.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Text.setStyle = function (style, style_font, style_fontStyle, style_fontVariant, style_fontWeight, style_fontSize, style_backgroundColor, style_fill, style_align, style_boundsAlignH, style_boundsAlignV, style_stroke, style_strokeThickness, style_wordWrap, style_wordWrapWidth, style_maxLines, style_tabs, update) { return new Phaser_Text(); };
Phaser_Text.setHealth = function (amount) { return new Phaser_Sprite(); };
Phaser_Text.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Text.resetFrame = function () {};
Phaser_Text.clearColors = function () { return new Phaser_Text(); };
Phaser_Text.setText = function (text, immediate) { return new Phaser_Text(); };

var Phaser_Cache = function (game) {};
Phaser_Cache.prototype = new Object();
Phaser_Cache.TEXT = 0;
Phaser_Cache.IMAGE = 0;
Phaser_Cache.SHADER = 0;
Phaser_Cache.CANVAS = 0;
Phaser_Cache.SOUND = 0;
Phaser_Cache.BITMAPDATA = 0;
Phaser_Cache.VIDEO = 0;
Phaser_Cache.RENDER_TEXTURE = 0;
Phaser_Cache.TILEMAP = 0;
Phaser_Cache.TEXTURE = 0;
Phaser_Cache.BINARY = 0;
Phaser_Cache.JSON = 0;
Phaser_Cache.MISSING = new PIXI_Texture();
Phaser_Cache.BITMAPFONT = 0;
Phaser_Cache.XML = 0;
Phaser_Cache.PHYSICS = 0;
Phaser_Cache.DEFAULT = new PIXI_Texture();
Phaser_Cache.onSoundUnlock = new Phaser_Signal();
Phaser_Cache.game = new Phaser_Game();
Phaser_Cache.autoResolveURL = true;
Phaser_Cache.removeBitmapFont = function (key) {};
Phaser_Cache.getItem = function (key, cache, method, property) { return new Object(); };
Phaser_Cache.addPhysicsData = function (key, url, JSONData, format) {};
Phaser_Cache.getFrameCount = function (key, cache) { return new Number(); };
Phaser_Cache.addTextureAtlas = function (key, url, data, atlasData, format) {};
Phaser_Cache.reloadSound = function (key) {};
Phaser_Cache.checkTextKey = function (key) { return new Boolean(); };
Phaser_Cache.addRenderTexture = function (key, texture) {};
Phaser_Cache.removeJSON = function (key) {};
Phaser_Cache.checkBitmapFontKey = function (key) { return new Boolean(); };
Phaser_Cache.addSpriteSheet = function (key, url, data, frameWidth, frameHeight, frameMax, margin, spacing) {};
Phaser_Cache.addDefaultImage = function () {};
Phaser_Cache.getBitmapData = function (key) { return new Phaser_BitmapData(); };
Phaser_Cache.removeRenderTexture = function (key) {};
Phaser_Cache.getText = function (key) { return new Object(); };
Phaser_Cache.addImage = function (key, url, data) { return new Object(); };
Phaser_Cache.removeBinary = function (key) {};
Phaser_Cache.removeTilemap = function (key) {};
Phaser_Cache.destroy = function () {};
Phaser_Cache.getRenderTexture = function (key) { return new Object(); };
Phaser_Cache.checkSoundKey = function (key) { return new Boolean(); };
Phaser_Cache.removeCanvas = function (key) {};
Phaser_Cache.getImage = function (key, full) { return new Phaser_Image(); };
Phaser_Cache.checkBitmapDataKey = function (key) { return new Boolean(); };
Phaser_Cache.removeSound = function (key) {};
Phaser_Cache.getBitmapFont = function (key) { return new Phaser_BitmapFont(); };
Phaser_Cache.addSound = function (key, url, data, webAudio, audioTag) {};
Phaser_Cache.addTilemap = function (key, url, mapData, format) {};
Phaser_Cache.getBaseTexture = function (key, cache) { return new PIXI_BaseTexture(); };
Phaser_Cache.getPhysicsData = function (key, object, fixtureKey) { return new Object(); };
Phaser_Cache.checkBinaryKey = function (key) { return new Boolean(); };
Phaser_Cache.checkTextureKey = function (key) { return new Boolean(); };
Phaser_Cache.getXML = function (key) { return new Object(); };
Phaser_Cache.getFrameByIndex = function (key, index, cache) { return new Phaser_Frame(); };
Phaser_Cache.addBinary = function (key, binaryData) {};
Phaser_Cache.removeImage = function (key, destroyBaseTexture) {};
Phaser_Cache.removePhysics = function (key) {};
Phaser_Cache.removeTextureAtlas = function (key) {};
Phaser_Cache.getTextureFrame = function (key) { return new Phaser_Frame(); };
Phaser_Cache.getSound = function (key) { return new Phaser_Sound(); };
Phaser_Cache.addXML = function (key, url, data) {};
Phaser_Cache.checkVideoKey = function (key) { return new Boolean(); };
Phaser_Cache.checkImageKey = function (key) { return new Boolean(); };
Phaser_Cache.hasFrameData = function (key, cache) { return new Boolean(); };
Phaser_Cache.addVideo = function (key, url, data, isBlob) {};
Phaser_Cache.getVideo = function (key) { return new Phaser_Video(); };
Phaser_Cache.addJSON = function (key, url, data) {};
Phaser_Cache.checkJSONKey = function (key) { return new Boolean(); };
Phaser_Cache.checkShaderKey = function (key) { return new Boolean(); };
Phaser_Cache.removeXML = function (key) {};
Phaser_Cache.decodedSound = function (key, data) {};
Phaser_Cache.checkPhysicsKey = function (key) { return new Boolean(); };
Phaser_Cache.getFrameByName = function (key, name, cache) { return new Phaser_Frame(); };
Phaser_Cache.getTilemapData = function (key) { return new Object(); };
Phaser_Cache.removeText = function (key) {};
Phaser_Cache.removeVideo = function (key) {};
Phaser_Cache.checkKey = function (cache, key) { return new Boolean(); };
Phaser_Cache.getURL = function (url) { return new Object(); };
Phaser_Cache.removeSpriteSheet = function (key) {};
Phaser_Cache.addBitmapData = function (key, bitmapData, frameData) { return new Phaser_BitmapData(); };
Phaser_Cache.addShader = function (key, url, data) {};
Phaser_Cache.getBinary = function (key) { return new Object(); };
Phaser_Cache.getJSON = function (key, clone) { return new Object(); };
Phaser_Cache.updateFrameData = function (key, frameData, cache) {};
Phaser_Cache.checkTilemapKey = function (key) { return new Boolean(); };
Phaser_Cache.clearGLTextures = function () {};
Phaser_Cache.reloadSoundComplete = function (key) {};
Phaser_Cache.getFrame = function (key, cache) { return new Phaser_Frame(); };
Phaser_Cache.checkXMLKey = function (key) { return new Boolean(); };
Phaser_Cache.isSoundDecoded = function (key) { return new Boolean(); };
Phaser_Cache.addBitmapFont = function (key, url, data, atlasData, atlasType, xSpacing, ySpacing) {};
Phaser_Cache.isSoundReady = function (key) { return new Boolean(); };
Phaser_Cache.checkURL = function (url) { return new Boolean(); };
Phaser_Cache.getCanvas = function (key) { return new Object(); };
Phaser_Cache.removeBitmapData = function (key) {};
Phaser_Cache.updateSound = function (key) {};
Phaser_Cache.getShader = function (key) { return new String(); };
Phaser_Cache.getFrameData = function (key, cache) { return new Phaser_FrameData(); };
Phaser_Cache.addMissingImage = function () {};
Phaser_Cache.addText = function (key, url, data) {};
Phaser_Cache.addCanvas = function (key, canvas, context) {};
Phaser_Cache.getKeys = function (cache) { return new Array(); };
Phaser_Cache.checkRenderTextureKey = function (key) { return new Boolean(); };
Phaser_Cache.checkCanvasKey = function (key) { return new Boolean(); };
Phaser_Cache.removeShader = function (key) {};
Phaser_Cache.getSoundData = function (key) { return new Object(); };

var Phaser_Easing_Quadratic = function () {};
Phaser_Easing_Quadratic.prototype = new Object();
Phaser_Easing_Quadratic.In = function (k) { return new Number(); };
Phaser_Easing_Quadratic.InOut = function (k) { return new Number(); };
Phaser_Easing_Quadratic.Out = function (k) { return new Number(); };

var Phaser_FlexLayer = function (manager, position, bounds, scale) {};
Phaser_FlexLayer.prototype = new Phaser.Group();
Phaser_FlexLayer.SORT_ASCENDING = 0;
Phaser_FlexLayer.SORT_DESCENDING = 0;
Phaser_FlexLayer.RETURN_NONE = 0;
Phaser_FlexLayer.RETURN_CHILD = 0;
Phaser_FlexLayer.RETURN_TOTAL = 0;
Phaser_FlexLayer.parent = new PIXI_DisplayObjectContainer();
Phaser_FlexLayer.centerY = 0;
Phaser_FlexLayer.centerX = 0;
Phaser_FlexLayer.type = 0;
Phaser_FlexLayer.enableBody = true;
Phaser_FlexLayer.children = [new PIXI_DisplayObject()];
Phaser_FlexLayer.enableBodyDebug = true;
Phaser_FlexLayer.pivot = new PIXI_Point();
Phaser_FlexLayer.physicsType = 0;
Phaser_FlexLayer.cursorIndex = 0;
Phaser_FlexLayer.physicsSortDirection = 0;
Phaser_FlexLayer.worldPosition = new PIXI_Point();
Phaser_FlexLayer.left = 0;
Phaser_FlexLayer.bounds = new Phaser_Rectangle();
Phaser_FlexLayer.hash = new Array();
Phaser_FlexLayer.filterArea = new PIXI_Rectangle();
Phaser_FlexLayer.worldScale = new PIXI_Point();
Phaser_FlexLayer.alive = true;
Phaser_FlexLayer.bottomRight = new Phaser_Point();
Phaser_FlexLayer.onChildInputUp = new Phaser_Signal();
Phaser_FlexLayer.worldAlpha = 0;
Phaser_FlexLayer.top = 0;
Phaser_FlexLayer.angle = 0;
Phaser_FlexLayer.persist = true;
Phaser_FlexLayer.bottomLeft = new Phaser_Point();
Phaser_FlexLayer.onDestroy = new Phaser_Signal();
Phaser_FlexLayer.topRight = new Phaser_Point();
Phaser_FlexLayer.right = 0;
Phaser_FlexLayer.ignoreChildInput = true;
Phaser_FlexLayer.onChildInputDown = new Phaser_Signal();
Phaser_FlexLayer.stage = new PIXI_Stage();
Phaser_FlexLayer.grid = new Phaser_FlexGrid();
Phaser_FlexLayer.ignoreDestroy = true;
Phaser_FlexLayer.x = 0;
Phaser_FlexLayer.exists = true;
Phaser_FlexLayer.y = 0;
Phaser_FlexLayer.z = 0;
Phaser_FlexLayer.physicsBodyType = 0;
Phaser_FlexLayer.onChildInputOut = new Phaser_Signal();
Phaser_FlexLayer.worldTransform = new PIXI_Matrix();
Phaser_FlexLayer.fixedToCamera = true;
Phaser_FlexLayer.visible = true;
Phaser_FlexLayer.inputEnableChildren = true;
Phaser_FlexLayer.cameraOffset = new Phaser_Point();
Phaser_FlexLayer.bottom = 0;
Phaser_FlexLayer.name = "";
Phaser_FlexLayer.position = new Phaser_Point();
Phaser_FlexLayer.classType = new Object();
Phaser_FlexLayer.cursor = new PIXI_DisplayObject();
Phaser_FlexLayer.worldRotation = 0;
Phaser_FlexLayer.game = new Phaser_Game();
Phaser_FlexLayer.onChildInputOver = new Phaser_Signal();
Phaser_FlexLayer.renderable = true;
Phaser_FlexLayer.scale = new Phaser_ScaleManager();
Phaser_FlexLayer.worldVisible = true;
Phaser_FlexLayer.total = 0;
Phaser_FlexLayer.alpha = 0;
Phaser_FlexLayer.bottomMiddle = new Phaser_Point();
Phaser_FlexLayer.cacheAsBitmap = true;
Phaser_FlexLayer.mask = new PIXI_Graphics();
Phaser_FlexLayer.rotation = 0;
Phaser_FlexLayer.length = 0;
Phaser_FlexLayer.filters = new Array();
Phaser_FlexLayer.topMiddle = new Phaser_Point();
Phaser_FlexLayer.pendingDestroy = true;
Phaser_FlexLayer.hitArea = new Phaser_Rectangle();
Phaser_FlexLayer.topLeft = new Phaser_Point();
Phaser_FlexLayer.xy = function (index, x, y) {};
Phaser_FlexLayer.descendingSortHandler = function (a, b) {};
Phaser_FlexLayer.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_FlexLayer.removeAll = function (destroy, silent, destroyTexture) {};
Phaser_FlexLayer.customSort = function (sortHandler, context) {};
Phaser_FlexLayer.bringToTop = function (child) { return new Object(); };
Phaser_FlexLayer.moveUp = function (child) { return new Object(); };
Phaser_FlexLayer.alignTo = function (parent, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_FlexLayer.postUpdate = function () {};
Phaser_FlexLayer.destroy = function (destroyChildren, soft) {};
Phaser_FlexLayer.getFirstDead = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.forEachAlive = function (callback, callbackContext, args) {};
Phaser_FlexLayer.resetCursor = function (index) { return new Object(); };
Phaser_FlexLayer.addMultiple = function (children, silent) { return new Array(); };
Phaser_FlexLayer.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_FlexLayer.preUpdate = function () {};
Phaser_FlexLayer.addToHash = function (child) { return new Boolean(); };
Phaser_FlexLayer.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_FlexLayer.callbackFromArray = function (child, callback, length) {};
Phaser_FlexLayer.getClosestTo = function (object, callback, callbackContext) { return new Object(); };
Phaser_FlexLayer.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.getByName = function (name) { return new Object(); };
Phaser_FlexLayer.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_FlexLayer.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_FlexLayer.getFirstExists = function (exists, createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.reverse = function () {};
Phaser_FlexLayer.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_FlexLayer.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.alignIn = function (container, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_FlexLayer.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_FlexLayer.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_FlexLayer.getIndex = function (child) { return new Number(); };
Phaser_FlexLayer.getBottom = function () { return new Object(); };
Phaser_FlexLayer.replace = function (oldChild, newChild) { return new Object(); };
Phaser_FlexLayer.align = function (rows, columns, cellWidth, cellHeight, position, offset) {};
Phaser_FlexLayer.resetChild = function (child, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.getRandom = function (startIndex, length) { return new Object(); };
Phaser_FlexLayer.forEachExists = function (callback, callbackContext, args) {};
Phaser_FlexLayer.getTop = function () { return new Object(); };
Phaser_FlexLayer.create = function (x, y, key, frame, exists, index) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.countDead = function () { return new Number(); };
Phaser_FlexLayer.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.add = function (child, silent, index) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.swap = function (child1, child2) {};
Phaser_FlexLayer.getFurthestFrom = function (object, callback, callbackContext) { return new Object(); };
Phaser_FlexLayer.sort = function (key, order) {};
Phaser_FlexLayer.moveDown = function (child) { return new Object(); };
Phaser_FlexLayer.hasProperty = function (child, key) { return new Boolean(); };
Phaser_FlexLayer.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_FlexLayer.updateZ = function () {};
Phaser_FlexLayer.ascendingSortHandler = function (a, b) {};
Phaser_FlexLayer.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_FlexLayer.removeFromHash = function (child) { return new Boolean(); };
Phaser_FlexLayer.next = function () { return new Object(); };
Phaser_FlexLayer.forEachDead = function (callback, callbackContext, args) {};
Phaser_FlexLayer.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.update = function () {};
Phaser_FlexLayer.countLiving = function () { return new Number(); };
Phaser_FlexLayer.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_FlexLayer.callAll = function (method, context, args) {};
Phaser_FlexLayer.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_FlexLayer.createMultiple = function (quantity, key, frame, exists) { return new Array(); };
Phaser_FlexLayer.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_FlexLayer.callAllExists = function (callback, existsValue, parameter) {};
Phaser_FlexLayer.debug = function () {};
Phaser_FlexLayer.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_FlexLayer.previous = function () { return new Object(); };
Phaser_FlexLayer.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_FlexLayer.sendToBack = function (child) { return new Object(); };
Phaser_FlexLayer.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.getFirstAlive = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.resize = function () {};

var Phaser_SoundManager = function (game) {};
Phaser_SoundManager.prototype = new Object();
Phaser_SoundManager.game = new Phaser_Game();
Phaser_SoundManager.onMute = new Phaser_Signal();
Phaser_SoundManager.usingAudioTag = true;
Phaser_SoundManager.context = new AudioContext();
Phaser_SoundManager.muteOnPause = true;
Phaser_SoundManager.onSoundDecode = new Phaser_Signal();
Phaser_SoundManager.onUnMute = new Phaser_Signal();
Phaser_SoundManager.mute = true;
Phaser_SoundManager.onVolumeChange = new Phaser_Signal();
Phaser_SoundManager.volume = 0;
Phaser_SoundManager.usingWebAudio = true;
Phaser_SoundManager.channels = 0;
Phaser_SoundManager.connectToMaster = true;
Phaser_SoundManager.noAudio = true;
Phaser_SoundManager.touchLocked = true;
Phaser_SoundManager.play = function (key, volume, loop) { return new Phaser_Sound(); };
Phaser_SoundManager.update = function () {};
Phaser_SoundManager.decode = function (key, sound) {};
Phaser_SoundManager.removeByKey = function (key) { return new Number(); };
Phaser_SoundManager.remove = function (sound) { return new Boolean(); };
Phaser_SoundManager.stopAll = function () {};
Phaser_SoundManager.addSprite = function (key) { return new Phaser_AudioSprite(); };
Phaser_SoundManager.setDecodedCallback = function (files, callback, callbackContext) {};
Phaser_SoundManager.boot = function () {};
Phaser_SoundManager.add = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_SoundManager.pauseAll = function () {};
Phaser_SoundManager.unlock = function () { return new Boolean(); };
Phaser_SoundManager.setTouchLock = function () {};
Phaser_SoundManager.resumeAll = function () {};
Phaser_SoundManager.destroy = function () {};

var Phaser_Loader = function (game) {};
Phaser_Loader.prototype = new Object();
Phaser_Loader.TEXTURE_ATLAS_JSON_HASH = 0;
Phaser_Loader.TEXTURE_ATLAS_JSON_ARRAY = 0;
Phaser_Loader.PHYSICS_LIME_CORONA_JSON = 0;
Phaser_Loader.PHYSICS_PHASER_JSON = 0;
Phaser_Loader.TEXTURE_ATLAS_XML_STARLING = 0;
Phaser_Loader.TEXTURE_ATLAS_JSON_PYXEL = 0;
Phaser_Loader.progressFloat = 0;
Phaser_Loader._withSyncPointDepth_ = 0;
Phaser_Loader.resetLocked = true;
Phaser_Loader.onFileError = new Phaser_Signal();
Phaser_Loader.path = "";
Phaser_Loader.useXDomainRequest = true;
Phaser_Loader.cache = new Phaser_Cache();
Phaser_Loader.onFileComplete = new Phaser_Signal();
Phaser_Loader.onLoadStart = new Phaser_Signal();
Phaser_Loader.crossOrigin = true;
Phaser_Loader.onFileStart = new Phaser_Signal();
Phaser_Loader.isLoading = true;
Phaser_Loader.maxParallelDownloads = 0;
Phaser_Loader.onLoadComplete = new Phaser_Signal();
Phaser_Loader.onPackComplete = new Phaser_Signal();
Phaser_Loader.hasLoaded = true;
Phaser_Loader.preloadSprite = new Object();
Phaser_Loader.game = new Phaser_Game();
Phaser_Loader.headers = new Object();
Phaser_Loader.baseURL = "";
Phaser_Loader.progress = 0;
Phaser_Loader.enableParallel = true;
Phaser_Loader.atlas = function (key, textureURL, atlasURL, atlasData, format) { return new Phaser_Loader(); };
Phaser_Loader.atlasJSONHash = function (key, textureURL, atlasURL, atlasData) { return new Phaser_Loader(); };
Phaser_Loader.checkKeyExists = function (type, key) { return new Boolean(); };
Phaser_Loader.bitmapFont = function (key, textureURL, atlasURL, atlasData, xSpacing, ySpacing) { return new Phaser_Loader(); };
Phaser_Loader.getAsset = function (type, key) { return new Object(); };
Phaser_Loader.totalLoadedPacks = function () { return new Number(); };
Phaser_Loader.removeAll = function () {};
Phaser_Loader.xml = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.text = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.audioSprite = function (key, urls, jsonURL, jsonData, autoDecode) { return new Phaser_Loader(); };
Phaser_Loader.atlasJSONArray = function (key, textureURL, atlasURL, atlasData) { return new Phaser_Loader(); };
Phaser_Loader.image = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.images = function (keys, urls) { return new Phaser_Loader(); };
Phaser_Loader.audiosprite = function (key, urls, jsonURL, jsonData, autoDecode) { return new Phaser_Loader(); };
Phaser_Loader.setPreloadSprite = function (sprite, direction) {};
Phaser_Loader.pack = function (key, url, data, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.script = function (key, url, callback, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.binary = function (key, url, callback, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.reset = function (hard, clearEvents) {};
Phaser_Loader.transformUrl = function (url, file) { return new String(); };
Phaser_Loader.getAssetIndex = function (type, key) { return new Number(); };
Phaser_Loader.shader = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.withSyncPoints = function (callback, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.video = function (key, urls, loadEvent, asBlob) { return new Phaser_Loader(); };
Phaser_Loader.totalQueuedFiles = function () { return new Number(); };
Phaser_Loader.tilemap = function (key, url, data, format) { return new Phaser_Loader(); };
Phaser_Loader.removeFile = function (type, key) {};
Phaser_Loader.totalQueuedPacks = function () { return new Number(); };
Phaser_Loader.physics = function (key, url, data, format) { return new Phaser_Loader(); };
Phaser_Loader.json = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.audio = function (key, urls, autoDecode) { return new Phaser_Loader(); };
Phaser_Loader.spritesheet = function (key, url, frameWidth, frameHeight, frameMax, margin, spacing) { return new Phaser_Loader(); };
Phaser_Loader.start = function () {};
Phaser_Loader.atlasXML = function (key, textureURL, atlasURL, atlasData) { return new Phaser_Loader(); };
Phaser_Loader.addToFileList = function (type, key, url, properties, overwrite, extension) { return new Phaser_Loader(); };
Phaser_Loader.totalLoadedFiles = function () { return new Number(); };
Phaser_Loader.addSyncPoint = function (type, key) { return new Phaser_Loader(); };
Phaser_Loader.resize = function () {};
Phaser_Loader.replaceInFileList = function (type, key, url, properties) {};

var Phaser_Physics_P2_GearConstraint = function (world, bodyA, bodyB, angle, ratio) {};
Phaser_Physics_P2_GearConstraint.prototype = new Object();
Phaser_Physics_P2_GearConstraint.game = new Phaser_Game();
Phaser_Physics_P2_GearConstraint.world = new Phaser_Physics_P2();

var Phaser_PluginManager = function (game) {};
Phaser_PluginManager.prototype = new Object();
Phaser_PluginManager.game = new Phaser_Game();
Phaser_PluginManager.plugins = new Array();
Phaser_PluginManager.add = function (plugin, parameter) { return new Phaser_Plugin(); };
Phaser_PluginManager.postRender = function () {};
Phaser_PluginManager.removeAll = function () {};
Phaser_PluginManager.postUpdate = function () {};
Phaser_PluginManager.update = function () {};
Phaser_PluginManager.destroy = function () {};
Phaser_PluginManager.preUpdate = function () {};
Phaser_PluginManager.render = function () {};
Phaser_PluginManager.remove = function (plugin, destroy) {};

var Phaser_TweenData = function (parent) {};
Phaser_TweenData.prototype = new Object();
Phaser_TweenData.COMPLETE = 0;
Phaser_TweenData.RUNNING = 0;
Phaser_TweenData.PENDING = 0;
Phaser_TweenData.LOOPED = 0;
Phaser_TweenData.parent = new Phaser_Tween();
Phaser_TweenData.game = new Phaser_Game();
Phaser_TweenData.percent = 0;
Phaser_TweenData.duration = 0;
Phaser_TweenData.dt = 0;
Phaser_TweenData.interpolationFunction = new Function();
Phaser_TweenData.yoyoDelay = 0;
Phaser_TweenData.yoyo = true;
Phaser_TweenData.isRunning = true;
Phaser_TweenData.isFrom = true;
Phaser_TweenData.startTime = 0;
Phaser_TweenData.repeatCounter = 0;
Phaser_TweenData.repeatDelay = 0;
Phaser_TweenData.value = 0;
Phaser_TweenData.easingFunction = new Function();
Phaser_TweenData.inReverse = true;
Phaser_TweenData.interpolate = true;
Phaser_TweenData.interpolationContext = new Object();
Phaser_TweenData.repeatTotal = 0;
Phaser_TweenData.delay = 0;
Phaser_TweenData.update = function (time) { return new Number(); };
Phaser_TweenData.generateData = function (frameRate) { return new Array(); };
Phaser_TweenData.from = function (properties, duration, ease, delay, repeat, yoyo) { return new Phaser_TweenData(); };
Phaser_TweenData.start = function () { return new Phaser_TweenData(); };
Phaser_TweenData.to = function (properties, duration, ease, delay, repeat, yoyo) { return new Phaser_TweenData(); };

var Phaser_TileSprite = function (game, x, y, width, height, key, frame) {};
Phaser_TileSprite.prototype = new Object();
Phaser_TileSprite.parent = new PIXI_DisplayObjectContainer();
Phaser_TileSprite.centerY = 0;
Phaser_TileSprite.centerX = 0;
Phaser_TileSprite.lifespan = 0;
Phaser_TileSprite.outOfBoundsKill = true;
Phaser_TileSprite.type = 0;
Phaser_TileSprite.children = [new PIXI_DisplayObject()];
Phaser_TileSprite.pivot = new PIXI_Point();
Phaser_TileSprite.maxHealth = 0;
Phaser_TileSprite.events = new Phaser_Events();
Phaser_TileSprite.physicsType = 0;
Phaser_TileSprite.height = 0;
Phaser_TileSprite.textureDebug = true;
Phaser_TileSprite.smoothed = true;
Phaser_TileSprite.input = new Phaser_InputHandler();
Phaser_TileSprite.worldPosition = new PIXI_Point();
Phaser_TileSprite.left = 0;
Phaser_TileSprite.refreshTexture = true;
Phaser_TileSprite.tilingTexture = new PIXI_Texture();
Phaser_TileSprite.filterArea = new PIXI_Rectangle();
Phaser_TileSprite.components = new Object();
Phaser_TileSprite.tileScaleOffset = new Phaser_Point();
Phaser_TileSprite.tilePosition = new Phaser_Point();
Phaser_TileSprite.worldScale = new PIXI_Point();
Phaser_TileSprite.alive = true;
Phaser_TileSprite.inWorld = true;
Phaser_TileSprite.worldAlpha = 0;
Phaser_TileSprite.world = new Phaser_Point();
Phaser_TileSprite.top = 0;
Phaser_TileSprite.angle = 0;
Phaser_TileSprite.checkWorldBounds = true;
Phaser_TileSprite.key = "";
Phaser_TileSprite.texture = new Texture();
Phaser_TileSprite.health = 0;
Phaser_TileSprite.outOfCameraBoundsKill = true;
Phaser_TileSprite.destroyPhase = true;
Phaser_TileSprite.right = 0;
Phaser_TileSprite.previousPosition = new Phaser_Point();
Phaser_TileSprite.ignoreChildInput = true;
Phaser_TileSprite.stage = new PIXI_Stage();
Phaser_TileSprite.anchor = new Phaser_Point();
Phaser_TileSprite.width = 0;
Phaser_TileSprite.autoCull = true;
Phaser_TileSprite.x = 0;
Phaser_TileSprite.exists = true;
Phaser_TileSprite.y = 0;
Phaser_TileSprite.z = 0;
Phaser_TileSprite.data = new Object();
Phaser_TileSprite.tilePattern = new PIXI_Texture();
Phaser_TileSprite.body = new Phaser_Physics_Arcade_Body();
Phaser_TileSprite.inCamera = true;
Phaser_TileSprite.offsetX = 0;
Phaser_TileSprite.tintedTexture = new Phaser_Canvas();
Phaser_TileSprite.offsetY = 0;
Phaser_TileSprite.worldTransform = new PIXI_Matrix();
Phaser_TileSprite.fixedToCamera = true;
Phaser_TileSprite.renderOrderID = 0;
Phaser_TileSprite.previousRotation = 0;
Phaser_TileSprite.visible = true;
Phaser_TileSprite.tileScale = new Phaser_Point();
Phaser_TileSprite.bottom = 0;
Phaser_TileSprite.cameraOffset = new Phaser_Point();
Phaser_TileSprite.name = "";
Phaser_TileSprite.position = new PIXI_Point();
Phaser_TileSprite.frame = 0;
Phaser_TileSprite.worldRotation = 0;
Phaser_TileSprite.shader = new PIXI_AbstractFilter();
Phaser_TileSprite.renderable = true;
Phaser_TileSprite.game = new Phaser_Game();
Phaser_TileSprite.scale = new PIXI_Point();
Phaser_TileSprite.canvasBuffer = new PIXI_CanvasBuffer();
Phaser_TileSprite.tint = 0;
Phaser_TileSprite.inputEnabled = true;
Phaser_TileSprite.worldVisible = true;
Phaser_TileSprite.animations = new Phaser_AnimationManager();
Phaser_TileSprite.alpha = 0;
Phaser_TileSprite.cacheAsBitmap = true;
Phaser_TileSprite.mask = new PIXI_Graphics();
Phaser_TileSprite.debug = true;
Phaser_TileSprite.frameName = "";
Phaser_TileSprite.rotation = 0;
Phaser_TileSprite.filters = new Array();
Phaser_TileSprite.pendingDestroy = true;
Phaser_TileSprite.blendMode = 0;
Phaser_TileSprite.hitArea = new Phaser_Rectangle();
Phaser_TileSprite.fresh = true;
Phaser_TileSprite.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_TileSprite.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.resizeFrame = function (parent, width, height) {};
Phaser_TileSprite.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_TileSprite.autoScroll = function (x, y) {};
Phaser_TileSprite.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_TileSprite.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.init = function () {};
Phaser_TileSprite.postUpdate = function () {};
Phaser_TileSprite.destroy = function (destroyChildren) {};
Phaser_TileSprite.install = function () {};
Phaser_TileSprite.reset = function (x, y) { return new Phaser_TileSprite(); };
Phaser_TileSprite.preUpdate = function () {};
Phaser_TileSprite.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_TileSprite.kill = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_TileSprite.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_TileSprite.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_TileSprite.overlap = function (displayObject) { return new Boolean(); };
Phaser_TileSprite.loadTexture = function (key, frame, stopAnimation) {};
Phaser_TileSprite.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_TileSprite.stopScroll = function () {};
Phaser_TileSprite.update = function () {};
Phaser_TileSprite.setFrame = function (frame) {};
Phaser_TileSprite.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_TileSprite.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_TileSprite.setHealth = function (amount) { return new Phaser_Sprite(); };
Phaser_TileSprite.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.resetFrame = function () {};

var Phaser_Particle = function (game, x, y, key, frame) {};
Phaser_Particle.prototype = new Phaser.Sprite();
Phaser_Particle.parent = new PIXI_DisplayObjectContainer();
Phaser_Particle.centerY = 0;
Phaser_Particle.centerX = 0;
Phaser_Particle.lifespan = 0;
Phaser_Particle.outOfBoundsKill = true;
Phaser_Particle.type = 0;
Phaser_Particle.children = [new PIXI_DisplayObject()];
Phaser_Particle.pivot = new PIXI_Point();
Phaser_Particle.maxHealth = 0;
Phaser_Particle.scaleData = new Array();
Phaser_Particle.events = new Phaser_Events();
Phaser_Particle.physicsType = 0;
Phaser_Particle.smoothed = true;
Phaser_Particle.input = new Phaser_InputHandler();
Phaser_Particle.worldPosition = new PIXI_Point();
Phaser_Particle.left = 0;
Phaser_Particle.filterArea = new PIXI_Rectangle();
Phaser_Particle.components = new Object();
Phaser_Particle.worldScale = new PIXI_Point();
Phaser_Particle.alive = true;
Phaser_Particle.transformCallback = new Function();
Phaser_Particle.inWorld = true;
Phaser_Particle.worldAlpha = 0;
Phaser_Particle.world = new Phaser_Point();
Phaser_Particle.top = 0;
Phaser_Particle.angle = 0;
Phaser_Particle.checkWorldBounds = true;
Phaser_Particle.key = "";
Phaser_Particle.texture = new Texture();
Phaser_Particle.health = 0;
Phaser_Particle.outOfCameraBoundsKill = true;
Phaser_Particle.destroyPhase = true;
Phaser_Particle.right = 0;
Phaser_Particle.previousPosition = new Phaser_Point();
Phaser_Particle.scaleMax = new Phaser_Point();
Phaser_Particle.ignoreChildInput = true;
Phaser_Particle.stage = new PIXI_Stage();
Phaser_Particle.anchor = new Phaser_Point();
Phaser_Particle.autoCull = true;
Phaser_Particle.x = 0;
Phaser_Particle.exists = true;
Phaser_Particle.y = 0;
Phaser_Particle.z = 0;
Phaser_Particle.scaleMin = new Phaser_Point();
Phaser_Particle.data = new Object();
Phaser_Particle.body = new Phaser_Physics_Arcade_Body();
Phaser_Particle.inCamera = true;
Phaser_Particle.autoScale = true;
Phaser_Particle.offsetX = 0;
Phaser_Particle.tintedTexture = new Phaser_Canvas();
Phaser_Particle.offsetY = 0;
Phaser_Particle.worldTransform = new PIXI_Matrix();
Phaser_Particle.fixedToCamera = true;
Phaser_Particle.renderOrderID = 0;
Phaser_Particle.previousRotation = 0;
Phaser_Particle.visible = true;
Phaser_Particle.bottom = 0;
Phaser_Particle.cameraOffset = new Phaser_Point();
Phaser_Particle.autoAlpha = true;
Phaser_Particle.name = "";
Phaser_Particle.position = new PIXI_Point();
Phaser_Particle.alphaData = new Array();
Phaser_Particle.frame = 0;
Phaser_Particle.worldRotation = 0;
Phaser_Particle.shader = new PIXI_AbstractFilter();
Phaser_Particle.cropRect = new Phaser_Rectangle();
Phaser_Particle.game = new Phaser_Game();
Phaser_Particle.renderable = true;
Phaser_Particle.deltaZ = 0;
Phaser_Particle.transformCallbackContext = new Object();
Phaser_Particle.deltaX = 0;
Phaser_Particle.deltaY = 0;
Phaser_Particle.scale = new PIXI_Point();
Phaser_Particle.tint = 0;
Phaser_Particle.inputEnabled = true;
Phaser_Particle.worldVisible = true;
Phaser_Particle.animations = new Phaser_AnimationManager();
Phaser_Particle.alpha = 0;
Phaser_Particle.cacheAsBitmap = true;
Phaser_Particle.mask = new PIXI_Graphics();
Phaser_Particle.debug = true;
Phaser_Particle.frameName = "";
Phaser_Particle.rotation = 0;
Phaser_Particle.filters = new Array();
Phaser_Particle.pendingDestroy = true;
Phaser_Particle.blendMode = 0;
Phaser_Particle.hitArea = new Phaser_Rectangle();
Phaser_Particle.fresh = true;
Phaser_Particle.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Particle.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.resizeFrame = function (parent, width, height) {};
Phaser_Particle.setScaleData = function () {};
Phaser_Particle.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Particle.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.alignTo = function (parent, position, offsetX, offsetY) { return new Object(); };
Phaser_Particle.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.init = function () {};
Phaser_Particle.postUpdate = function () {};
Phaser_Particle.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Particle.install = function () {};
Phaser_Particle.reset = function (x, y, health) { return new Phaser_Particle(); };
Phaser_Particle.preUpdate = function () { return new Boolean(); };
Phaser_Particle.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Particle.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Particle.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.alignIn = function (container, position, offsetX, offsetY) { return new Object(); };
Phaser_Particle.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Particle.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.updateCrop = function () {};
Phaser_Particle.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Particle.setAlphaData = function () {};
Phaser_Particle.overlap = function (displayObject) { return new Boolean(); };
Phaser_Particle.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Particle.crop = function (rect, copy) {};
Phaser_Particle.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Particle.update = function () {};
Phaser_Particle.onEmit = function () {};
Phaser_Particle.setFrame = function (frame) {};
Phaser_Particle.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Particle.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Particle.setHealth = function (amount) { return new Phaser_Sprite(); };
Phaser_Particle.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.resetFrame = function () {};

var Phaser_Physics_P2_Spring = function (world, bodyA, bodyB, restLength, stiffness, damping, worldA, worldB, localA, localB) {};
Phaser_Physics_P2_Spring.prototype = new Object();
Phaser_Physics_P2_Spring.game = new Phaser_Game();
Phaser_Physics_P2_Spring.world = new Phaser_Physics_P2();
Phaser_Physics_P2_Spring.data = new p2_LinearSpring();

var Phaser_Easing_Elastic = function () {};
Phaser_Easing_Elastic.prototype = new Object();
Phaser_Easing_Elastic.In = function (k) { return new Number(); };
Phaser_Easing_Elastic.InOut = function (k) { return new Number(); };
Phaser_Easing_Elastic.Out = function (k) { return new Number(); };

var Phaser_Physics_Arcade_TilemapCollision = function () {};
Phaser_Physics_Arcade_TilemapCollision.prototype = new Object();
Phaser_Physics_Arcade_TilemapCollision.TILE_BIAS = 0;

var Phaser_Particles_Arcade_Emitter = function (game, x, y, maxParticles) {};
Phaser_Particles_Arcade_Emitter.prototype = new Phaser.Group();
Phaser_Particles_Arcade_Emitter.SORT_ASCENDING = 0;
Phaser_Particles_Arcade_Emitter.SORT_DESCENDING = 0;
Phaser_Particles_Arcade_Emitter.RETURN_NONE = 0;
Phaser_Particles_Arcade_Emitter.RETURN_CHILD = 0;
Phaser_Particles_Arcade_Emitter.RETURN_TOTAL = 0;
Phaser_Particles_Arcade_Emitter.parent = new PIXI_DisplayObjectContainer();
Phaser_Particles_Arcade_Emitter.minParticleSpeed = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.centerY = 0;
Phaser_Particles_Arcade_Emitter.bounce = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.centerX = 0;
Phaser_Particles_Arcade_Emitter.lifespan = 0;
Phaser_Particles_Arcade_Emitter.type = 0;
Phaser_Particles_Arcade_Emitter.minParticleScale = 0;
Phaser_Particles_Arcade_Emitter.enableBody = true;
Phaser_Particles_Arcade_Emitter.children = [new PIXI_DisplayObject()];
Phaser_Particles_Arcade_Emitter.enableBodyDebug = true;
Phaser_Particles_Arcade_Emitter.pivot = new PIXI_Point();
Phaser_Particles_Arcade_Emitter.scaleData = new Array();
Phaser_Particles_Arcade_Emitter.physicsType = 0;
Phaser_Particles_Arcade_Emitter.height = 0;
Phaser_Particles_Arcade_Emitter.emitY = 0;
Phaser_Particles_Arcade_Emitter.particleBringToTop = true;
Phaser_Particles_Arcade_Emitter.particleAnchor = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.emitX = 0;
Phaser_Particles_Arcade_Emitter.cursorIndex = 0;
Phaser_Particles_Arcade_Emitter.physicsSortDirection = 0;
Phaser_Particles_Arcade_Emitter.worldPosition = new PIXI_Point();
Phaser_Particles_Arcade_Emitter.left = 0;
Phaser_Particles_Arcade_Emitter.hash = new Array();
Phaser_Particles_Arcade_Emitter.filterArea = new PIXI_Rectangle();
Phaser_Particles_Arcade_Emitter.worldScale = new PIXI_Point();
Phaser_Particles_Arcade_Emitter.alive = true;
Phaser_Particles_Arcade_Emitter.onChildInputUp = new Phaser_Signal();
Phaser_Particles_Arcade_Emitter.worldAlpha = 0;
Phaser_Particles_Arcade_Emitter.top = 0;
Phaser_Particles_Arcade_Emitter.angle = 0;
Phaser_Particles_Arcade_Emitter.onDestroy = new Phaser_Signal();
Phaser_Particles_Arcade_Emitter.minParticleAlpha = 0;
Phaser_Particles_Arcade_Emitter.right = 0;
Phaser_Particles_Arcade_Emitter.ignoreChildInput = true;
Phaser_Particles_Arcade_Emitter.onChildInputDown = new Phaser_Signal();
Phaser_Particles_Arcade_Emitter.maxParticles = 0;
Phaser_Particles_Arcade_Emitter.stage = new PIXI_Stage();
Phaser_Particles_Arcade_Emitter.width = 0;
Phaser_Particles_Arcade_Emitter.x = 0;
Phaser_Particles_Arcade_Emitter.ignoreDestroy = true;
Phaser_Particles_Arcade_Emitter.y = 0;
Phaser_Particles_Arcade_Emitter.exists = true;
Phaser_Particles_Arcade_Emitter.z = 0;
Phaser_Particles_Arcade_Emitter.physicsBodyType = 0;
Phaser_Particles_Arcade_Emitter.angularDrag = 0;
Phaser_Particles_Arcade_Emitter.maxParticleAlpha = 0;
Phaser_Particles_Arcade_Emitter.frequency = 0;
Phaser_Particles_Arcade_Emitter.autoScale = true;
Phaser_Particles_Arcade_Emitter.onChildInputOut = new Phaser_Signal();
Phaser_Particles_Arcade_Emitter.maxParticleScale = 0;
Phaser_Particles_Arcade_Emitter.worldTransform = new PIXI_Matrix();
Phaser_Particles_Arcade_Emitter.fixedToCamera = true;
Phaser_Particles_Arcade_Emitter.area = new Phaser_Rectangle();
Phaser_Particles_Arcade_Emitter.maxParticleSpeed = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.particleSendToBack = true;
Phaser_Particles_Arcade_Emitter.visible = true;
Phaser_Particles_Arcade_Emitter.inputEnableChildren = true;
Phaser_Particles_Arcade_Emitter.bottom = 0;
Phaser_Particles_Arcade_Emitter.cameraOffset = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.minRotation = 0;
Phaser_Particles_Arcade_Emitter.particleDrag = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.autoAlpha = true;
Phaser_Particles_Arcade_Emitter.name = "";
Phaser_Particles_Arcade_Emitter.maxRotation = 0;
Phaser_Particles_Arcade_Emitter.position = new PIXI_Point();
Phaser_Particles_Arcade_Emitter.alphaData = new Array();
Phaser_Particles_Arcade_Emitter.classType = new Object();
Phaser_Particles_Arcade_Emitter.cursor = new PIXI_DisplayObject();
Phaser_Particles_Arcade_Emitter.worldRotation = 0;
Phaser_Particles_Arcade_Emitter.game = new Phaser_Game();
Phaser_Particles_Arcade_Emitter.onChildInputOver = new Phaser_Signal();
Phaser_Particles_Arcade_Emitter.renderable = true;
Phaser_Particles_Arcade_Emitter.scale = new PIXI_Point();
Phaser_Particles_Arcade_Emitter.worldVisible = true;
Phaser_Particles_Arcade_Emitter.total = 0;
Phaser_Particles_Arcade_Emitter.particleClass = new Object();
Phaser_Particles_Arcade_Emitter.alpha = 0;
Phaser_Particles_Arcade_Emitter.cacheAsBitmap = true;
Phaser_Particles_Arcade_Emitter.on = true;
Phaser_Particles_Arcade_Emitter.mask = new PIXI_Graphics();
Phaser_Particles_Arcade_Emitter.rotation = 0;
Phaser_Particles_Arcade_Emitter.length = 0;
Phaser_Particles_Arcade_Emitter.filters = new Array();
Phaser_Particles_Arcade_Emitter.pendingDestroy = true;
Phaser_Particles_Arcade_Emitter.blendMode = 0;
Phaser_Particles_Arcade_Emitter.gravity = 0;
Phaser_Particles_Arcade_Emitter.hitArea = new Phaser_Rectangle();
Phaser_Particles_Arcade_Emitter.xy = function (index, x, y) {};
Phaser_Particles_Arcade_Emitter.descendingSortHandler = function (a, b) {};
Phaser_Particles_Arcade_Emitter.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_Particles_Arcade_Emitter.removeAll = function (destroy, silent, destroyTexture) {};
Phaser_Particles_Arcade_Emitter.explode = function (lifespan, quantity) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.customSort = function (sortHandler, context) {};
Phaser_Particles_Arcade_Emitter.revive = function () { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.flow = function (lifespan, frequency, quantity, total, immediate) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.bringToTop = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.moveUp = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.alignTo = function (parent, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_Particles_Arcade_Emitter.postUpdate = function () {};
Phaser_Particles_Arcade_Emitter.destroy = function () {};
Phaser_Particles_Arcade_Emitter.setRotation = function (min, max) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.getFirstDead = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.forEachAlive = function (callback, callbackContext, args) {};
Phaser_Particles_Arcade_Emitter.at = function (object) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.resetCursor = function (index) { return new Object(); };
Phaser_Particles_Arcade_Emitter.emitParticle = function (x, y, key, frame) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.addMultiple = function (children, silent) { return new Array(); };
Phaser_Particles_Arcade_Emitter.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.preUpdate = function () {};
Phaser_Particles_Arcade_Emitter.addToHash = function (child) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.callbackFromArray = function (child, callback, length) {};
Phaser_Particles_Arcade_Emitter.getClosestTo = function (object, callback, callbackContext) { return new Object(); };
Phaser_Particles_Arcade_Emitter.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.getByName = function (name) { return new Object(); };
Phaser_Particles_Arcade_Emitter.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_Particles_Arcade_Emitter.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.getFirstExists = function (exists, createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.setXSpeed = function (min, max) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.kill = function () { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.reverse = function () {};
Phaser_Particles_Arcade_Emitter.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_Particles_Arcade_Emitter.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.alignIn = function (container, position, offsetX, offsetY) { return new Phaser_Group(); };
Phaser_Particles_Arcade_Emitter.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Particles_Arcade_Emitter.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Particles_Arcade_Emitter.getIndex = function (child) { return new Number(); };
Phaser_Particles_Arcade_Emitter.getBottom = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.replace = function (oldChild, newChild) { return new Object(); };
Phaser_Particles_Arcade_Emitter.align = function (rows, columns, cellWidth, cellHeight, position, offset) {};
Phaser_Particles_Arcade_Emitter.resetChild = function (child, x, y, key, frame) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.makeParticles = function (keys, frames, quantity, collide, collideWorldBounds) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.getRandom = function (startIndex, length) { return new Object(); };
Phaser_Particles_Arcade_Emitter.forEachExists = function (callback, callbackContext, args) {};
Phaser_Particles_Arcade_Emitter.getTop = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.create = function (x, y, key, frame, exists, index) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.countDead = function () { return new Number(); };
Phaser_Particles_Arcade_Emitter.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.add = function (child, silent, index) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.swap = function (child1, child2) {};
Phaser_Particles_Arcade_Emitter.setScale = function (minX, maxX, minY, maxY, rate, ease, yoyo) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.getFurthestFrom = function (object, callback, callbackContext) { return new Object(); };
Phaser_Particles_Arcade_Emitter.setAlpha = function (min, max, rate, ease, yoyo) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.sort = function (key, order) {};
Phaser_Particles_Arcade_Emitter.moveDown = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.hasProperty = function (child, key) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Particles_Arcade_Emitter.updateZ = function () {};
Phaser_Particles_Arcade_Emitter.ascendingSortHandler = function (a, b) {};
Phaser_Particles_Arcade_Emitter.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_Particles_Arcade_Emitter.removeFromHash = function (child) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.next = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.forEachDead = function (callback, callbackContext, args) {};
Phaser_Particles_Arcade_Emitter.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.update = function () {};
Phaser_Particles_Arcade_Emitter.countLiving = function () { return new Number(); };
Phaser_Particles_Arcade_Emitter.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.callAll = function (method, context, args) {};
Phaser_Particles_Arcade_Emitter.setSize = function (width, height) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Particles_Arcade_Emitter.createMultiple = function (quantity, key, frame, exists) { return new Array(); };
Phaser_Particles_Arcade_Emitter.setYSpeed = function (min, max) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Particles_Arcade_Emitter.callAllExists = function (callback, existsValue, parameter) {};
Phaser_Particles_Arcade_Emitter.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_Particles_Arcade_Emitter.previous = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_Particles_Arcade_Emitter.start = function (explode, lifespan, frequency, quantity, forceQuantity) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.sendToBack = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.getFirstAlive = function (createIfNull, x, y, key, frame) { return new PIXI_DisplayObject(); };

var Phaser_Filter = function (game, uniforms, fragmentSrc) {};
Phaser_Filter.prototype = new Object();
Phaser_Filter.dirty = true;
Phaser_Filter.padding = 0;
Phaser_Filter.game = new Phaser_Game();
Phaser_Filter.uniforms = new Object();
Phaser_Filter.fragmentSrc = new Array();
Phaser_Filter.type = 0;
Phaser_Filter.width = 0;
Phaser_Filter.prevPoint = new Phaser_Point();
Phaser_Filter.height = 0;
Phaser_Filter.init = function () {};
Phaser_Filter.setResolution = function (width, height) {};
Phaser_Filter.update = function (pointer) {};
Phaser_Filter.destroy = function () {};
Phaser_Filter.addToWorld = function (x, y, width, height, anchorX, anchorY) { return new Phaser_Image(); };

var Phaser_Physics_P2_RotationalSpring = function (world, bodyA, bodyB, restAngle, stiffness, damping) {};
Phaser_Physics_P2_RotationalSpring.prototype = new Object();
Phaser_Physics_P2_RotationalSpring.game = new Phaser_Game();
Phaser_Physics_P2_RotationalSpring.world = new Phaser_Physics_P2();
Phaser_Physics_P2_RotationalSpring.data = new p2_RotationalSpring();

var Phaser_Creature = function (game, x, y, key, mesh, animation) {};
Phaser_Creature.prototype = new Object();
Phaser_Creature.parent = new PIXI_DisplayObjectContainer();
Phaser_Creature.data = new Object();
Phaser_Creature.lifespan = 0;
Phaser_Creature.type = 0;
Phaser_Creature.inCamera = true;
Phaser_Creature.children = [new PIXI_DisplayObject()];
Phaser_Creature.loop = true;
Phaser_Creature.pivot = new PIXI_Point();
Phaser_Creature.worldTransform = new PIXI_Matrix();
Phaser_Creature.fixedToCamera = true;
Phaser_Creature.renderOrderID = 0;
Phaser_Creature.events = new Phaser_Events();
Phaser_Creature.previousRotation = 0;
Phaser_Creature.isPlaying = true;
Phaser_Creature.visible = true;
Phaser_Creature.cameraOffset = new Phaser_Point();
Phaser_Creature.animation = new CreatureAnimation();
Phaser_Creature.worldPosition = new PIXI_Point();
Phaser_Creature.name = "";
Phaser_Creature.position = new PIXI_Point();
Phaser_Creature.worldRotation = 0;
Phaser_Creature.filterArea = new PIXI_Rectangle();
Phaser_Creature.game = new Phaser_Game();
Phaser_Creature.components = new Object();
Phaser_Creature.renderable = true;
Phaser_Creature.worldScale = new PIXI_Point();
Phaser_Creature.alive = true;
Phaser_Creature.vertices = new PIXI_Float32Array();
Phaser_Creature.timeDelta = 0;
Phaser_Creature.scale = new PIXI_Point();
Phaser_Creature.colors = new PIXI_Uint16Array();
Phaser_Creature.worldAlpha = 0;
Phaser_Creature.worldVisible = true;
Phaser_Creature.creatureBoundsMin = new Phaser_Point();
Phaser_Creature.world = new Phaser_Point();
Phaser_Creature.animations = new Phaser_AnimationManager();
Phaser_Creature.alpha = 0;
Phaser_Creature.angle = 0;
Phaser_Creature.cacheAsBitmap = true;
Phaser_Creature.key = "";
Phaser_Creature.mask = new PIXI_Graphics();
Phaser_Creature.debug = true;
Phaser_Creature.manager = new CreatureManager();
Phaser_Creature.texture = new PIXI_Texture();
Phaser_Creature.rotation = 0;
Phaser_Creature.destroyPhase = true;
Phaser_Creature.filters = new Array();
Phaser_Creature.ignoreChildInput = true;
Phaser_Creature.previousPosition = new Phaser_Point();
Phaser_Creature.indices = new PIXI_Uint16Array();
Phaser_Creature.pendingDestroy = true;
Phaser_Creature.uvs = new PIXI_Float32Array();
Phaser_Creature.stage = new PIXI_Stage();
Phaser_Creature.hitArea = new Phaser_Rectangle();
Phaser_Creature.autoCull = true;
Phaser_Creature.x = 0;
Phaser_Creature.exists = true;
Phaser_Creature.y = 0;
Phaser_Creature.z = 0;
Phaser_Creature.creatureBoundsMax = new Phaser_Point();
Phaser_Creature.fresh = true;
Phaser_Creature.play = function (loop) {};
Phaser_Creature.generateTexture = function (resolution, scaleMode, renderer) { return new PIXI_RenderTexture(); };
Phaser_Creature.updateCache = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Creature.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.init = function () {};
Phaser_Creature.postUpdate = function () {};
Phaser_Creature.destroy = function (destroyChildren, destroyTexture) {};
Phaser_Creature.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.setAnimation = function (key) {};
Phaser_Creature.toLocal = function (position, from) { return new PIXI_Point(); };
Phaser_Creature.stop = function () {};
Phaser_Creature.install = function () {};
Phaser_Creature.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Creature.preUpdate = function () {};
Phaser_Creature.setStageReference = function (stage) { return new PIXI_DisplayObject(); };
Phaser_Creature.update = function () {};
Phaser_Creature.toGlobal = function (position) { return new PIXI_Point(); };
Phaser_Creature.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.kill = function () { return new PIXI_DisplayObject(); };

var Phaser_GameObjectFactory = function (game) {};
Phaser_GameObjectFactory.prototype = new Object();
Phaser_GameObjectFactory.game = new Phaser_Game();
Phaser_GameObjectFactory.world = new Phaser_World();
Phaser_GameObjectFactory.renderTexture = function (width, height, key, addToCache) { return new Phaser_RenderTexture(); };
Phaser_GameObjectFactory.sound = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectFactory.rope = function (x, y, key, frame, points, group) { return new Phaser_Rope(); };
Phaser_GameObjectFactory.graphics = function (x, y, group) { return new Phaser_Graphics(); };
Phaser_GameObjectFactory.video = function (key, url) { return new Phaser_Video(); };
Phaser_GameObjectFactory.tilemap = function (key, tileWidth, tileHeight, width, height) { return new Phaser_Tilemap(); };
Phaser_GameObjectFactory.button = function (x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame, group) { return new Phaser_Button(); };
Phaser_GameObjectFactory.weapon = function (quantity, key, frame, group) { return new Phaser_Weapon(); };
Phaser_GameObjectFactory.sprite = function (x, y, key, frame, group) { return new Phaser_Sprite(); };
Phaser_GameObjectFactory.spriteBatch = function (parent, name, addToStage) { return new Phaser_SpriteBatch(); };
Phaser_GameObjectFactory.audio = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectFactory.text = function (x, y, text, style, group) { return new Phaser_Text(); };
Phaser_GameObjectFactory.group = function (parent, name, addToStage, enableBody, physicsBodyType) { return new Phaser_Group(); };
Phaser_GameObjectFactory.audioSprite = function (key) { return new Phaser_AudioSprite(); };
Phaser_GameObjectFactory.image = function (x, y, key, frame, group) { return new Phaser_Image(); };
Phaser_GameObjectFactory.retroFont = function (font, characterWidth, characterHeight, chars, charsPerRow, xSpacing, ySpacing, xOffset, yOffset) { return new Phaser_RetroFont(); };
Phaser_GameObjectFactory.bitmapText = function (x, y, font, text, size, group) { return new Phaser_BitmapText(); };
Phaser_GameObjectFactory.physicsGroup = function (physicsBodyType, parent, name, addToStage) { return new Phaser_Group(); };
Phaser_GameObjectFactory.filter = function (filter, _any) { return new Phaser_Filter(); };
Phaser_GameObjectFactory.existing = function (object) { return new Object(); };
Phaser_GameObjectFactory.tween = function (object) { return new Phaser_Tween(); };
Phaser_GameObjectFactory.plugin = function (plugin, parameter) { return new Phaser_Plugin(); };
Phaser_GameObjectFactory.bitmapData = function (width, height, key, addToCache) { return new Phaser_BitmapData(); };
Phaser_GameObjectFactory.tileSprite = function (x, y, width, height, key, frame, group) { return new Phaser_TileSprite(); };
Phaser_GameObjectFactory.emitter = function (x, y, maxParticles) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_GameObjectFactory.creature = function (x, y, key, group) { return new Phaser_Creature(); };

var Phaser_Physics_P2_PointProxy = function (world, destination) {};
Phaser_Physics_P2_PointProxy.prototype = new Object();
Phaser_Physics_P2_PointProxy.x = 0;
Phaser_Physics_P2_PointProxy.y = 0;
Phaser_Physics_P2_PointProxy.mx = 0;
Phaser_Physics_P2_PointProxy.my = 0;

var Phaser_GameObjectCreator = function (game) {};
Phaser_GameObjectCreator.prototype = new Object();
Phaser_GameObjectCreator.game = new Phaser_Game();
Phaser_GameObjectCreator.world = new Phaser_World();
Phaser_GameObjectCreator.image = function (x, y, key, frame) { return new Phaser_Image(); };
Phaser_GameObjectCreator.retroFont = function (font, characterWidth, characterHeight, chars, charsPerRow, xSpacing, ySpacing, xOffset, yOffset) { return new Phaser_RetroFont(); };
Phaser_GameObjectCreator.renderTexture = function (width, height, key, addToCache) { return new Phaser_RenderTexture(); };
Phaser_GameObjectCreator.sound = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectCreator.rope = function (x, y, width, height, key, frame) { return new Phaser_Rope(); };
Phaser_GameObjectCreator.bitmapText = function (x, y, font, text, size, align) { return new Phaser_BitmapText(); };
Phaser_GameObjectCreator.graphics = function (x, y) { return new Phaser_Graphics(); };
Phaser_GameObjectCreator.tilemap = function (key, tileWidth, tileHeight, width, height) {};
Phaser_GameObjectCreator.button = function (x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame) { return new Phaser_Button(); };
Phaser_GameObjectCreator.filter = function (filter, _any) { return new Phaser_Filter(); };
Phaser_GameObjectCreator.tween = function (obj) { return new Phaser_Tween(); };
Phaser_GameObjectCreator.bitmapData = function (width, height, key, addToCache) { return new Phaser_BitmapData(); };
Phaser_GameObjectCreator.sprite = function (x, y, key, frame) { return new Phaser_Sprite(); };
Phaser_GameObjectCreator.spriteBatch = function (parent, name, addToStage) { return new Phaser_SpriteBatch(); };
Phaser_GameObjectCreator.audio = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectCreator.text = function (x, y, text, style) { return new Phaser_Text(); };
Phaser_GameObjectCreator.tileSprite = function (x, y, width, height, key, frame) { return new Phaser_TileSprite(); };
Phaser_GameObjectCreator.emitter = function (x, y, maxParticles) { return new Phaser_Emitter(); };
Phaser_GameObjectCreator.group = function (parent, name, addToStage, enableBody, physicsBodyType) { return new Phaser_Group(); };
Phaser_GameObjectCreator.audioSprite = function (key) { return new Phaser_AudioSprite(); };

var CanvasGraphics = function () {};
CanvasGraphics.prototype = new Object();

var Phaser_State = function () {};
Phaser_State.prototype = new Object();
Phaser_State.game = new Phaser_Game();
Phaser_State.tweens = new Phaser_TweenManager();
Phaser_State.sound = new Phaser_SoundManager();
Phaser_State.scale = new Phaser_ScaleManager();
Phaser_State.world = new Phaser_World();
Phaser_State.load = new Phaser_Loader();
Phaser_State.physics = new Phaser_Physics();
Phaser_State.camera = new Phaser_Camera();
Phaser_State.particles = new Phaser_Particles();
Phaser_State.make = new Phaser_GameObjectCreator();
Phaser_State.key = "";
Phaser_State.add = new Phaser_GameObjectFactory();
Phaser_State.cache = new Phaser_Cache();
Phaser_State.rnd = new Phaser_RandomDataGenerator();
Phaser_State.input = new Phaser_Input();
Phaser_State.stage = new Phaser_Stage();
Phaser_State.math = new Phaser_Math();
Phaser_State.time = new Phaser_Time();
Phaser_State.loadUpdate = function () {};
Phaser_State.paused = function () {};
Phaser_State.loadRender = function () {};
Phaser_State.update = function () {};
Phaser_State.preload = function () {};
Phaser_State.pauseUpdate = function () {};
Phaser_State.create = function () {};
Phaser_State.render = function () {};
Phaser_State.init = function () {};
Phaser_State.preRender = function () {};
Phaser_State.resize = function () {};
Phaser_State.resumed = function () {};
Phaser_State.shutdown = function () {};

var Phaser_StateManager = function (game, pendingState) {};
Phaser_StateManager.prototype = new Object();
Phaser_StateManager.onLoadUpdateCallback = new Function();
Phaser_StateManager.game = new Phaser_Game();
Phaser_StateManager.onLoadRenderCallback = new Function();
Phaser_StateManager.onPreRenderCallback = new Function();
Phaser_StateManager.onResumedCallback = new Function();
Phaser_StateManager.onUpdateCallback = new Function();
Phaser_StateManager.onRenderCallback = new Function();
Phaser_StateManager.states = new Object();
Phaser_StateManager.current = "";
Phaser_StateManager.onPreloadCallback = new Function();
Phaser_StateManager.onPauseUpdateCallback = new Function();
Phaser_StateManager.onStateChange = new Phaser_Signal();
Phaser_StateManager.onPausedCallback = new Function();
Phaser_StateManager.created = true;
Phaser_StateManager.onCreateCallback = new Function();
Phaser_StateManager.onInitCallback = new Function();
Phaser_StateManager.onResizeCallback = new Function();
Phaser_StateManager.onShutDownCallback = new Function();
Phaser_StateManager.link = function (key) {};
Phaser_StateManager.update = function () {};
Phaser_StateManager.remove = function (key) {};
Phaser_StateManager.pauseUpdate = function () {};
Phaser_StateManager.clearCurrentState = function () {};
Phaser_StateManager.checkState = function (key) { return new Boolean(); };
Phaser_StateManager.getCurrentState = function () { return new Phaser_State(); };
Phaser_StateManager.render = function () {};
Phaser_StateManager.add = function (key, state, autoStart) {};
Phaser_StateManager.resume = function () {};
Phaser_StateManager.restart = function (clearWorld, clearCache, parameter) {};
Phaser_StateManager.preRender = function (elapsedTime) {};
Phaser_StateManager.start = function (key, clearWorld, clearCache, parameter) {};
Phaser_StateManager.destroy = function () {};
Phaser_StateManager.pause = function () {};
Phaser_StateManager.unlink = function (key) {};
Phaser_StateManager.loadComplete = function () {};
Phaser_StateManager.resize = function () {};
Phaser_StateManager.preUpdate = function () {};



PIXI = {};
Phaser = {};
Phaser.Easing = {};
Phaser.Component = {};
Phaser.Physics = {};
Phaser.Physics.P2 = {};
Phaser.Particles = {};
Phaser.Physics.Ninja = {};
Phaser.Physics.Arcade = {};
Phaser.Utils = {};
Phaser.Particles.Arcade = {};

// easing


Phaser.Easing = {};
Phaser.Easing.Linear = {};
Phaser.Easing.Linear.None = function (k) { return new Number(); };
Phaser.Easing.Quadratic = {};
Phaser.Easing.Quadratic.In = function (k) { return new Number(); };
Phaser.Easing.Quadratic.Out = function (k) { return new Number(); };
Phaser.Easing.Quadratic.InOut = function (k) { return new Number(); };
Phaser.Easing.Cubic = {};
Phaser.Easing.Cubic.In = function (k) { return new Number(); };
Phaser.Easing.Cubic.Out = function (k) { return new Number(); };
Phaser.Easing.Cubic.InOut = function (k) { return new Number(); };
Phaser.Easing.Quartic = {};
Phaser.Easing.Quartic.In = function (k) { return new Number(); };
Phaser.Easing.Quartic.Out = function (k) { return new Number(); };
Phaser.Easing.Quartic.InOut = function (k) { return new Number(); };
Phaser.Easing.Quintic = {};
Phaser.Easing.Quintic.In = function (k) { return new Number(); };
Phaser.Easing.Quintic.Out = function (k) { return new Number(); };
Phaser.Easing.Quintic.InOut = function (k) { return new Number(); };
Phaser.Easing.Sinusoidal = {};
Phaser.Easing.Sinusoidal.In = function (k) { return new Number(); };
Phaser.Easing.Sinusoidal.Out = function (k) { return new Number(); };
Phaser.Easing.Sinusoidal.InOut = function (k) { return new Number(); };
Phaser.Easing.Exponential = {};
Phaser.Easing.Exponential.In = function (k) { return new Number(); };
Phaser.Easing.Exponential.Out = function (k) { return new Number(); };
Phaser.Easing.Exponential.InOut = function (k) { return new Number(); };
Phaser.Easing.Circular = {};
Phaser.Easing.Circular.In = function (k) { return new Number(); };
Phaser.Easing.Circular.Out = function (k) { return new Number(); };
Phaser.Easing.Circular.InOut = function (k) { return new Number(); };
Phaser.Easing.Elastic = {};
Phaser.Easing.Elastic.In = function (k) { return new Number(); };
Phaser.Easing.Elastic.Out = function (k) { return new Number(); };
Phaser.Easing.Elastic.InOut = function (k) { return new Number(); };
Phaser.Easing.Back = {};
Phaser.Easing.Back.In = function (k) { return new Number(); };
Phaser.Easing.Back.Out = function (k) { return new Number(); };
Phaser.Easing.Back.InOut = function (k) { return new Number(); };
Phaser.Easing.Bounce = {};
Phaser.Easing.Bounce.In = function (k) { return new Number(); };
Phaser.Easing.Bounce.Out = function (k) { return new Number(); };
Phaser.Easing.Bounce.InOut = function (k) { return new Number(); };
Phaser_Easing.Default = Phaser_Easing.Linear.None;
Phaser_Easing.Power0 = Phaser_Easing.Linear.None;
Phaser_Easing.Power1 = Phaser_Easing.Quadratic.Out;
Phaser_Easing.Power2 = Phaser_Easing.Cubic.Out;
Phaser_Easing.Power3 = Phaser_Easing.Quartic.Out;
Phaser_Easing.Power4 = Phaser_Easing.Quintic.Out;

// alias

PIXI.SpriteBatch = PIXI_SpriteBatch;
PIXI.GraphicsData = PIXI_GraphicsData;
PIXI.AbstractFilter = PIXI_AbstractFilter;
Phaser.Rectangle = Phaser_Rectangle;
Phaser.Ellipse = Phaser_Ellipse;
Phaser.Polygon = Phaser_Polygon;
Phaser.Circle = Phaser_Circle;
PIXI.DisplayObjectContainer = PIXI_DisplayObjectContainer;
PIXI.DisplayObject = PIXI_DisplayObject;
PIXI.Strip = PIXI_Strip;
PIXI.Rope = PIXI_Rope;
Phaser.Point = Phaser_Point;
Phaser.Canvas = Phaser_Canvas;
PIXI.Sprite = PIXI_Sprite;
PIXI.TilingSprite = PIXI_TilingSprite;
Phaser.Easing = Phaser_Easing;
Phaser.Easing.Linear = Phaser_Easing_Linear;
Phaser.Net = Phaser_Net;
Phaser.Component.AutoCull = Phaser_Component_AutoCull;
Phaser.Component.Reset = Phaser_Component_Reset;
Phaser.Utils = Phaser_Utils;
Phaser.RandomDataGenerator = Phaser_RandomDataGenerator;
Phaser.Signal = Phaser_Signal;
Phaser.Frame = Phaser_Frame;
Phaser.Math = Phaser_Math;
Phaser.DOM = Phaser_DOM;
Phaser.Tween = Phaser_Tween;
Phaser.Easing.Quintic = Phaser_Easing_Quintic;
Phaser.Device = Phaser_Device;
Phaser.Component.BringToTop = Phaser_Component_BringToTop;
Phaser.Time = Phaser_Time;
Phaser.Sound = Phaser_Sound;
Phaser.Game = Phaser_Game;
Phaser.Animation = Phaser_Animation;
Phaser.Easing.Exponential = Phaser_Easing_Exponential;
Phaser.Physics.Arcade = Phaser_Physics_Arcade;
Phaser.Mouse = Phaser_Mouse;
Phaser.Particles = Phaser_Particles;
Phaser.Pointer = Phaser_Pointer;
Phaser.Component.LifeSpan = Phaser_Component_LifeSpan;
Phaser.Component.LoadTexture = Phaser_Component_LoadTexture;
Phaser.Component.InCamera = Phaser_Component_InCamera;
Phaser.RenderTexture = Phaser_RenderTexture;
Phaser.Physics.Ninja = Phaser_Physics_Ninja;
Phaser.QuadTree = Phaser_QuadTree;
Phaser.Video = Phaser_Video;
Phaser.Component.Crop = Phaser_Component_Crop;
Phaser.RequestAnimationFrame = Phaser_RequestAnimationFrame;
Phaser.Easing.Bounce = Phaser_Easing_Bounce;
Phaser.KeyCode = Phaser_KeyCode;
Phaser.FrameData = Phaser_FrameData;
Phaser.Key = Phaser_Key;
Phaser.InputHandler = Phaser_InputHandler;
Phaser.PointerMode = Phaser_PointerMode;
Phaser.Touch = Phaser_Touch;
Phaser.Timer = Phaser_Timer;
Phaser.AnimationParser = Phaser_AnimationParser;
Phaser.Line = Phaser_Line;
Phaser.Physics.P2.FixtureList = Phaser_Physics_P2_FixtureList;
Phaser.Keyboard = Phaser_Keyboard;
Phaser.Physics.P2.InversePointProxy = Phaser_Physics_P2_InversePointProxy;
Phaser.Tileset = Phaser_Tileset;
Phaser.Easing.Circular = Phaser_Easing_Circular;
Phaser.AnimationManager = Phaser_AnimationManager;
Phaser.SinglePad = Phaser_SinglePad;
Phaser.Component.ScaleMinMax = Phaser_Component_ScaleMinMax;
WebGLGraphicsData = WebGLGraphicsData;
Phaser.Physics = Phaser_Physics;
Phaser.Component.Delta = Phaser_Component_Delta;
Phaser.Component.Destroy = Phaser_Component_Destroy;
Phaser.Physics.P2.CollisionGroup = Phaser_Physics_P2_CollisionGroup;
Phaser.ImageCollection = Phaser_ImageCollection;
Phaser.ArraySet = Phaser_ArraySet;
Phaser.Physics.P2.PrismaticConstraint = Phaser_Physics_P2_PrismaticConstraint;
Phaser.Component.FixedToCamera = Phaser_Component_FixedToCamera;
Phaser.Particles.Arcade = Phaser_Particles_Arcade;
Phaser.TilemapParser = Phaser_TilemapParser;
Phaser.LoaderParser = Phaser_LoaderParser;
Phaser.Matrix = Phaser_Matrix;
Phaser.Gamepad = Phaser_Gamepad;
Phaser.TweenManager = Phaser_TweenManager;
Phaser.BitmapData = Phaser_BitmapData;
Phaser.Easing.Sinusoidal = Phaser_Easing_Sinusoidal;
Phaser.Group = Phaser_Group;
Phaser.Physics.P2.ContactMaterial = Phaser_Physics_P2_ContactMaterial;
Phaser.Component.Angle = Phaser_Component_Angle;
WebGLGraphics = WebGLGraphics;
Phaser.Physics.P2 = Phaser_Physics_P2;
Phaser.Component.InWorld = Phaser_Component_InWorld;
Phaser.Input = Phaser_Input;
Phaser.TimerEvent = Phaser_TimerEvent;
Phaser.Component.Smoothed = Phaser_Component_Smoothed;
Phaser.Events = Phaser_Events;
Phaser.Component.InputEnabled = Phaser_Component_InputEnabled;
Phaser.Easing.Cubic = Phaser_Easing_Cubic;
Phaser.Tile = Phaser_Tile;
Phaser.SignalBinding = Phaser_SignalBinding;
Phaser.Tilemap = Phaser_Tilemap;
Phaser.Physics.P2.RevoluteConstraint = Phaser_Physics_P2_RevoluteConstraint;
Phaser.Physics.Ninja.Circle = Phaser_Physics_Ninja_Circle;
Phaser.SpriteBatch = Phaser_SpriteBatch;
Phaser.Physics.P2.DistanceConstraint = Phaser_Physics_P2_DistanceConstraint;
Phaser.Physics.P2.LockConstraint = Phaser_Physics_P2_LockConstraint;
Phaser.Physics.P2.Material = Phaser_Physics_P2_Material;
Phaser.Component.Health = Phaser_Component_Health;
Phaser.Create = Phaser_Create;
Phaser.Component.Bounds = Phaser_Component_Bounds;
Phaser.DeviceButton = Phaser_DeviceButton;
Phaser.Physics.Arcade.Body = Phaser_Physics_Arcade_Body;
Phaser.Component.Overlap = Phaser_Component_Overlap;
Phaser.LinkedList = Phaser_LinkedList;
Phaser.Physics.Ninja.AABB = Phaser_Physics_Ninja_AABB;
Phaser.Component.Animation = Phaser_Component_Animation;
Phaser.Stage = Phaser_Stage;
Phaser.AudioSprite = Phaser_AudioSprite;
Phaser.Component.Core = Phaser_Component_Core;
Phaser.Physics.Ninja.Body = Phaser_Physics_Ninja_Body;
Phaser.Physics.P2.Body = Phaser_Physics_P2_Body;
Phaser.Component.PhysicsBody = Phaser_Component_PhysicsBody;
Phaser.Easing.Quartic = Phaser_Easing_Quartic;
Phaser.MSPointer = Phaser_MSPointer;
Phaser.Sprite = Phaser_Sprite;
Phaser.Image = Phaser_Image;
Phaser.Color = Phaser_Color;
Phaser.Plugin = Phaser_Plugin;
CanvasPool = CanvasPool;
Phaser.FlexGrid = Phaser_FlexGrid;
Phaser.Graphics = Phaser_Graphics;
Phaser.BitmapText = Phaser_BitmapText;
Phaser.RoundedRectangle = Phaser_RoundedRectangle;
Phaser.Button = Phaser_Button;
Phaser.Rope = Phaser_Rope;
Phaser.Physics.P2.BodyDebug = Phaser_Physics_P2_BodyDebug;
Phaser.Weapon = Phaser_Weapon;
Phaser.World = Phaser_World;
Phaser.RetroFont = Phaser_RetroFont;
Phaser.TilemapLayer = Phaser_TilemapLayer;
Phaser.Utils.Debug = Phaser_Utils_Debug;
Phaser.Easing.Back = Phaser_Easing_Back;
Phaser.ArrayUtils = Phaser_ArrayUtils;
Phaser.ScaleManager = Phaser_ScaleManager;
CanvasTinter = CanvasTinter;
Phaser.Physics.Ninja.Tile = Phaser_Physics_Ninja_Tile;
Phaser.Bullet = Phaser_Bullet;
Phaser.Camera = Phaser_Camera;
Phaser.Text = Phaser_Text;
Phaser.Cache = Phaser_Cache;
Phaser.Easing.Quadratic = Phaser_Easing_Quadratic;
Phaser.FlexLayer = Phaser_FlexLayer;
Phaser.SoundManager = Phaser_SoundManager;
Phaser.Loader = Phaser_Loader;
Phaser.Physics.P2.GearConstraint = Phaser_Physics_P2_GearConstraint;
Phaser.PluginManager = Phaser_PluginManager;
Phaser.TweenData = Phaser_TweenData;
Phaser.TileSprite = Phaser_TileSprite;
Phaser.Particle = Phaser_Particle;
Phaser.Physics.P2.Spring = Phaser_Physics_P2_Spring;
Phaser.Easing.Elastic = Phaser_Easing_Elastic;
Phaser.Physics.Arcade.TilemapCollision = Phaser_Physics_Arcade_TilemapCollision;
Phaser.Particles.Arcade.Emitter = Phaser_Particles_Arcade_Emitter;
Phaser.Filter = Phaser_Filter;
Phaser.Physics.P2.RotationalSpring = Phaser_Physics_P2_RotationalSpring;
Phaser.Creature = Phaser_Creature;
Phaser.GameObjectFactory = Phaser_GameObjectFactory;
Phaser.Physics.P2.PointProxy = Phaser_Physics_P2_PointProxy;
Phaser.GameObjectCreator = Phaser_GameObjectCreator;
CanvasGraphics = CanvasGraphics;
Phaser.State = Phaser_State;
Phaser.StateManager = Phaser_StateManager;

// Global constants

Phaser.VERSION = String;
Phaser.GAMES = Array;
Phaser.AUTO = Number;
Phaser.CANVAS = Number;
Phaser.WEBGL = Number;
Phaser.HEADLESS = Number;
Phaser.NONE = Number;
Phaser.LEFT = Number;
Phaser.RIGHT = Number;
Phaser.UP = Number;
Phaser.DOWN = Number;
Phaser.SPRITE = Number;
Phaser.BUTTON = Number;
Phaser.IMAGE = Number;
Phaser.GRAPHICS = Number;
Phaser.TEXT = Number;
Phaser.TILESPRITE = Number;
Phaser.BITMAPTEXT = Number;
Phaser.GROUP = Number;
Phaser.RENDERTEXTURE = Number;
Phaser.TILEMAP = Number;
Phaser.TILEMAPLAYER = Number;
Phaser.EMITTER = Number;
Phaser.POLYGON = Number;
Phaser.BITMAPDATA = Number;
Phaser.CANVAS_FILTER = Number;
Phaser.WEBGL_FILTER = Number;
Phaser.ELLIPSE = Number;
Phaser.SPRITEBATCH = Number;
Phaser.RETROFONT = Number;
Phaser.POINTER = Number;
Phaser.ROPE = Number;
Phaser.CIRCLE = Number;
Phaser.RECTANGLE = Number;
Phaser.LINE = Number;
Phaser.MATRIX = Number;
Phaser.POINT = Number;
Phaser.ROUNDEDRECTANGLE = Number;
Phaser.CREATURE = Number;
Phaser.VIDEO = Number;
Phaser.PENDING_ATLAS = Number;
Phaser.HORIZONTAL = Number;
Phaser.VERTICAL = Number;
Phaser.LANDSCAPE = Number;
Phaser.PORTRAIT = Number;
Phaser.ANGLE_UP = Number;
Phaser.ANGLE_DOWN = Number;
Phaser.ANGLE_LEFT = Number;
Phaser.ANGLE_RIGHT = Number;
Phaser.ANGLE_NORTH_EAST = Number;
Phaser.ANGLE_NORTH_WEST = Number;
Phaser.ANGLE_SOUTH_EAST = Number;
Phaser.ANGLE_SOUTH_WEST = Number;
Phaser.TOP_LEFT = Number;
Phaser.TOP_CENTER = Number;
Phaser.TOP_RIGHT = Number;
Phaser.LEFT_TOP = Number;
Phaser.LEFT_CENTER = Number;
Phaser.LEFT_BOTTOM = Number;
Phaser.CENTER = Number;
Phaser.RIGHT_TOP = Number;
Phaser.RIGHT_CENTER = Number;
Phaser.RIGHT_BOTTOM = Number;
Phaser.BOTTOM_LEFT = Number;
Phaser.BOTTOM_CENTER = Number;
Phaser.BOTTOM_RIGHT = Number;




// This API is manually added because for some reason it is not covered by the JSDoc JSON files.

// phaser globals

Phaser.blendModes = {
	NORMAL : 0,
	ADD : 1,
	MULTIPLY : 2,
	SCREEN : 3,
	OVERLAY : 4,
	DARKEN : 5,
	LIGHTEN : 6,
	COLOR_DODGE : 7,
	COLOR_BURN : 8,
	HARD_LIGHT : 9,
	SOFT_LIGHT : 10,
	DIFFERENCE : 11,
	EXCLUSION : 12,
	HUE : 13,
	SATURATION : 14,
	COLOR : 15,
	LUMINOSITY : 16
};
Phaser.scaleModes = {
	DEFAULT : 0,
	LINEAR : 0,
	NEAREST : 1
};

// Phaser.Physics constants

Phaser_Physics.ARCADE = 0;
Phaser_Physics.P2JS = 1;
Phaser_Physics.NINJA = 2;
Phaser_Physics.BOX2D = 3;
Phaser_Physics.CHIPMUNK = 4;

// Phaser_Keyboard constants

Phaser_Keyboard.A = 0;
Phaser_Keyboard.B = 0;
Phaser_Keyboard.C = 0;
Phaser_Keyboard.D = 0;
Phaser_Keyboard.E = 0;
Phaser_Keyboard.F = 0;
Phaser_Keyboard.G = 0;
Phaser_Keyboard.H = 0;
Phaser_Keyboard.I = 0;
Phaser_Keyboard.J = 0;
Phaser_Keyboard.K = 0;
Phaser_Keyboard.L = 0;
Phaser_Keyboard.M = 0;
Phaser_Keyboard.N = 0;
Phaser_Keyboard.O = 0;
Phaser_Keyboard.P = 0;
Phaser_Keyboard.Q = 0;
Phaser_Keyboard.R = 0;
Phaser_Keyboard.S = 0;
Phaser_Keyboard.T = 0;
Phaser_Keyboard.U = 0;
Phaser_Keyboard.V = 0;
Phaser_Keyboard.W = 0;
Phaser_Keyboard.X = 0;
Phaser_Keyboard.Y = 0;
Phaser_Keyboard.Z = 0;
Phaser_Keyboard.ZERO = 0;
Phaser_Keyboard.ONE = 0;
Phaser_Keyboard.TWO = 0;
Phaser_Keyboard.THREE = 0;
Phaser_Keyboard.FOUR = 0;
Phaser_Keyboard.FIVE = 0;
Phaser_Keyboard.SIX = 0;
Phaser_Keyboard.SEVEN = 0;
Phaser_Keyboard.EIGHT = 0;
Phaser_Keyboard.NINE = 0;
Phaser_Keyboard.NUMPAD_0 = 96;
Phaser_Keyboard.NUMPAD_1 = 97;
Phaser_Keyboard.NUMPAD_2 = 98;
Phaser_Keyboard.NUMPAD_3 = 99;
Phaser_Keyboard.NUMPAD_4 = 100;
Phaser_Keyboard.NUMPAD_5 = 101;
Phaser_Keyboard.NUMPAD_6 = 102;
Phaser_Keyboard.NUMPAD_7 = 103;
Phaser_Keyboard.NUMPAD_8 = 104;
Phaser_Keyboard.NUMPAD_9 = 105;
Phaser_Keyboard.NUMPAD_MULTIPLY = 106;
Phaser_Keyboard.NUMPAD_ADD = 107;
Phaser_Keyboard.NUMPAD_ENTER = 108;
Phaser_Keyboard.NUMPAD_SUBTRACT = 109;
Phaser_Keyboard.NUMPAD_DECIMAL = 110;
Phaser_Keyboard.NUMPAD_DIVIDE = 111;
Phaser_Keyboard.F1 = 112;
Phaser_Keyboard.F2 = 113;
Phaser_Keyboard.F3 = 114;
Phaser_Keyboard.F4 = 115;
Phaser_Keyboard.F5 = 116;
Phaser_Keyboard.F6 = 117;
Phaser_Keyboard.F7 = 118;
Phaser_Keyboard.F8 = 119;
Phaser_Keyboard.F9 = 120;
Phaser_Keyboard.F10 = 121;
Phaser_Keyboard.F11 = 122;
Phaser_Keyboard.F12 = 123;
Phaser_Keyboard.F13 = 124;
Phaser_Keyboard.F14 = 125;
Phaser_Keyboard.F15 = 126;
Phaser_Keyboard.COLON = 186;
Phaser_Keyboard.EQUALS = 187;
Phaser_Keyboard.UNDERSCORE = 189;
Phaser_Keyboard.QUESTION_MARK = 191;
Phaser_Keyboard.TILDE = 192;
Phaser_Keyboard.OPEN_BRACKET = 219;
Phaser_Keyboard.BACKWARD_SLASH = 220;
Phaser_Keyboard.CLOSED_BRACKET = 221;
Phaser_Keyboard.QUOTES = 222;
Phaser_Keyboard.BACKSPACE = 8;
Phaser_Keyboard.TAB = 9;
Phaser_Keyboard.CLEAR = 12;
Phaser_Keyboard.ENTER = 13;
Phaser_Keyboard.SHIFT = 16;
Phaser_Keyboard.CONTROL = 17;
Phaser_Keyboard.ALT = 18;
Phaser_Keyboard.CAPS_LOCK = 20;
Phaser_Keyboard.ESC = 27;
Phaser_Keyboard.SPACEBAR = 32;
Phaser_Keyboard.PAGE_UP = 33;
Phaser_Keyboard.PAGE_DOWN = 34;
Phaser_Keyboard.END = 35;
Phaser_Keyboard.HOME = 36;
Phaser_Keyboard.LEFT = 37;
Phaser_Keyboard.UP = 38;
Phaser_Keyboard.RIGHT = 39;
Phaser_Keyboard.DOWN = 40;
Phaser_Keyboard.INSERT = 45;
Phaser_Keyboard.DELETE = 46;
Phaser_Keyboard.HELP = 47;
Phaser_Keyboard.NUM_LOCK = 144;
Phaser_Keyboard.PLUS = 43;
Phaser_Keyboard.MINUS = 45;
